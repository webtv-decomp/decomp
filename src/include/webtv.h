#include <stdbool.h>

typedef unsigned char   undefined;

typedef unsigned char    byte;
typedef unsigned int    uint;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined4;
typedef unsigned long long    undefined8;
typedef unsigned short    ushort;
#define unkbyte9   unsigned long long
#define unkbyte10   unsigned long long
#define unkbyte11   unsigned long long
#define unkbyte12   unsigned long long
#define unkbyte13   unsigned long long
#define unkbyte14   unsigned long long
#define unkbyte15   unsigned long long
#define unkbyte16   unsigned long long

#define unkuint9   unsigned long long
#define unkuint10   unsigned long long
#define unkuint11   unsigned long long
#define unkuint12   unsigned long long
#define unkuint13   unsigned long long
#define unkuint14   unsigned long long
#define unkuint15   unsigned long long
#define unkuint16   unsigned long long

#define unkint9   long long
#define unkint10   long long
#define unkint11   long long
#define unkint12   long long
#define unkint13   long long
#define unkint14   long long
#define unkint15   long long
#define unkint16   long long

#define unkfloat1   float
#define unkfloat2   float
#define unkfloat3   float
#define unkfloat5   double
#define unkfloat6   double
#define unkfloat7   double
#define unkfloat9   long double
#define unkfloat11   long double
#define unkfloat12   long double
#define unkfloat13   long double
#define unkfloat14   long double
#define unkfloat15   long double
#define unkfloat16   long double

#define BADSPACEBASE   void
#define code   void


class JSAnchorArrayMethod {

}

void FindDocument(uint **param_1);
void JSAnchorArrayMethod::_operator_array_integer_(uint **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
void JSAnchorArrayMethod::_operator_array_string_(uint **param_1,int param_2);
undefined4 JSAnchorArrayMethod::length(uint **param_1);
void JSAppletArrayMethod::_operator_array_integer_(uint **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
void JSAppletArrayMethod::_operator_array_string_(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSAppletArrayMethod::length(uint **param_1);
void JSAppletMethod::name(uint **param_1);
void FindAnchor(uint **param_1);
void FindArea(uint **param_1);
byte * FindURL(uint **param_1);
void SwitchURL(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void SetURL(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined4 * JSBaseHREFMethod::hash_read(uint **param_1);
void JSBaseHREFMethod::hash_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined4 * JSBaseHREFMethod::host_read(uint **param_1);
void JSBaseHREFMethod::host_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
int ** JSBaseHREFMethod::hostname_read(uint **param_1);
void JSBaseHREFMethod::hostname_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSBaseHREFMethod::href_read(uint **param_1);
void JSBaseHREFMethod::href_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined4 * JSBaseHREFMethod::pathname_read(uint **param_1);
void JSBaseHREFMethod::pathname_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined4 * JSBaseHREFMethod::port_read(uint **param_1);
void JSBaseHREFMethod::port_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined4 * JSBaseHREFMethod::protocol_read(uint **param_1);
void JSBaseHREFMethod::protocol_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined4 * JSBaseHREFMethod::search_read(uint **param_1);
void JSBaseHREFMethod::search_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSAreaMethod::onmouseout_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSAreaMethod::onmouseout_write(uint **param_1,uint *param_2,int param_3);
void JSAreaMethod::onmouseover_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSAreaMethod::onmouseover_write(uint **param_1,uint *param_2,int param_3);
void JSAreaMethod::target_read(uint **param_1);
void JSAreaMethod::target_write(uint **param_1,int param_2);
void JSArrayMethod::NewArray_size(uint param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint ** JSArrayMethod::NewArray_stack(int *param_1,int param_2,undefined4 param_3,undefined4 param_4);
int ** JSArrayMethod::join(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
uint JSArrayMethod::length_read(uint **param_1);
void DisposeLargeIndices(int param_1,uint param_2);
void JSArrayMethod::length_write(int param_1,uint param_2);
ulonglong JSArrayMethod::prototype(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint ** JSArrayMethod::reverse(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int JSArrayMethod::sort(int param_1,int param_2);
undefined4 JSArrayMethod::BuiltInCompare(undefined4 param_1,int *param_2,int *param_3,undefined4 param_4);
undefined4 JSArrayMethod::CallUserCompare(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint JSArrayMethod::Find(uint **param_1,char *param_2);
void JSArrayMethod::MakeArray(uint **param_1,char *param_2,char *param_3,undefined4 param_4);
uint ** JSArrayMethod::MakeInstance(uint param_1,char *param_2,undefined4 param_3,undefined4 param_4);
void JSButtonMethod::blur(uint **param_1);
void JSButtonMethod::click(uint **param_1);
void JSButtonMethod::focus(uint **param_1);
void JSButtonMethod::form(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSButtonMethod::name_read(uint **param_1);
void JSButtonMethod::name_write(uint **param_1,int param_2);
void JSButtonMethod::onblur_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSButtonMethod::onblur_write(uint **param_1,uint *param_2,int param_3);
void JSButtonMethod::onclick_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSButtonMethod::onclick_write(uint **param_1,uint *param_2,int param_3);
void JSButtonMethod::onfocus_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSButtonMethod::onfocus_write(uint **param_1,uint *param_2,int param_3);
void JSButtonMethod::type(uint **param_1);
void JSButtonMethod::value_read(uint **param_1);
void JSButtonMethod::value_write(uint **param_1,int param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void JSChatMethod::addChannelMessage(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSCheckboxMethod::blur(uint **param_1);
void JSCheckboxMethod::click(uint **param_1);
undefined JSCheckboxMethod::checked_read(uint **param_1);
void JSCheckboxMethod::checked_write(uint **param_1,char param_2);
uint JSCheckboxMethod::defaultChecked_read(uint **param_1);
void JSCheckboxMethod::defaultChecked_write(uint **param_1,uint param_2);
void JSCheckboxMethod::focus(uint **param_1);
void JSCheckboxMethod::form(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSCheckboxMethod::name_read(uint **param_1);
void JSCheckboxMethod::name_write(uint **param_1,int param_2);
void JSCheckboxMethod::onblur_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSCheckboxMethod::onblur_write(uint **param_1,uint *param_2,int param_3);
void JSCheckboxMethod::onclick_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSCheckboxMethod::onclick_write(uint **param_1,uint *param_2,int param_3);
void JSCheckboxMethod::onfocus_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSCheckboxMethod::onfocus_write(uint **param_1,uint *param_2,int param_3);
void JSCheckboxMethod::type(void);
void JSCheckboxMethod::value_read(uint **param_1);
void JSCheckboxMethod::value_write(uint **param_1,int param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void JSCompoundStack::Push(int *param_1,int param_2);
void JSForElement::SetInValue(int *param_1,uint param_2);
void JSForStack::Pop(int *param_1);
void JSForStack::Push(int *param_1,int param_2);
void JSKeywordStack::Push(uint *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSLogicalStack::Push(int *param_1,uint param_2,uint param_3,int param_4);
uint JSLogicalStack::IsActive(int *param_1,int param_2,uint param_3);
void JSWithElement::Set(undefined4 *param_1,undefined4 *param_2,undefined param_3);
void JSWithStack::Copy(int *param_1,uint *param_2,undefined4 param_3,undefined4 param_4);
void JSWithStack::Dispose(int *param_1);
void JSWithStack::Dispose(int *param_1,int param_2);
int * JSWithStack::Find(int *param_1,int param_2);
void JSWithStack::Pop(int *param_1);
void JSFunctionStacks::Delete(int **param_1);
void JSFunctionStacks::Init(undefined4 *param_1,int param_2);
void JSFunctionStacks::New(void);
bool JSContext::CallFunction(char **param_1,undefined4 param_2,char *param_3,int param_4);
undefined4 JSContext::CheckEndKeyword(int *param_1,uint param_2,uint *******param_3,uint **param_4);
bool JSContext::ConvertUsing(int *param_1,int *param_2,char *param_3);
void JSContext::EndLoop(int *param_1,int param_2,int *param_3,undefined4 param_4);
int JSContext::EndStatement(char **param_1,int *param_2,uint *******param_3,uint *******param_4);
void JSContext::SetResult(int *param_1,int *param_2,int param_3,undefined4 param_4);
void JSContext::EvaluateLesser(int *param_1,int param_2,uint *******param_3,uint **param_4);
void JSContext::EvaluateLValue(int *param_1,int param_2,uint *******param_3,uint **param_4);
void JSContext::FindFunction(int *param_1);
int JSContext::FindOuterLoop(int *param_1);
void JSContext::Init(int *param_1,int param_2,int param_3,undefined4 param_4);
void JSContext::Kill(undefined4 *param_1);
bool JSContext::ParentheseslessFunctionCall(char **param_1,undefined4 param_2,char *param_3,int param_4);
bool JSContext::ParentheseslessNew(char **param_1,undefined4 param_2,uint *******param_3,uint **param_4);
void JSContext::ReturnFromFunction(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSContext::SetUpFunctionThis(int *param_1);
void JSDateMethod::GetDateLong(uint **param_1,int *param_2);
void JSDateMethod::SetDateLong(uint param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDateMethod::ResetDateLong(uint **param_1,uint param_2);
uint ** JSDateMethod::Date(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDateMethod::NewDate(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDateMethod::NewDate_string(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDateMethod::NewDate_int(uint param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDateMethod::NewDate_ymd(int param_1,int param_2,int param_3,int param_4,int param_5,int param_6);
undefined4 JSDateMethod::getDate(uint **param_1);
undefined4 JSDateMethod::getDay(uint **param_1);
undefined4 JSDateMethod::getHours(uint **param_1);
undefined4 JSDateMethod::getMinutes(uint **param_1);
int JSDateMethod::getMonth(uint **param_1);
undefined4 JSDateMethod::getSeconds(uint **param_1);
float JSDateMethod::getTime(uint **param_1);
int JSDateMethod::getYear(uint **param_1);
float JSDateMethod::parse(int param_1);
void JSDateMethod::setDate(uint **param_1,undefined4 param_2);
void JSDateMethod::setHours(uint **param_1,undefined4 param_2);
void JSDateMethod::setMinutes(uint **param_1,undefined4 param_2);
void JSDateMethod::setMonth(uint **param_1,undefined4 param_2);
void JSDateMethod::setSeconds(uint **param_1,undefined4 param_2);
void JSDateMethod::setTime(uint **param_1,float param_2);
void JSDateMethod::setYear(uint **param_1,undefined4 param_2);
void JSDateMethod::toGMTString(uint **param_1);
void JSDateMethod::toLocaleString(uint **param_1);
float JSDateMethod::UTC(int param_1,int param_2,int param_3,int param_4,int param_5,int param_6);
void FindDocument(uint **param_1);
void ColorString(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void StringToColor(int param_1,undefined4 param_2,int param_3,undefined4 param_4);
void JSDocumentMethod::alinkColor_read(void);
void JSDocumentMethod::anchors(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::applets(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::bgColor_read(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::bgColor_write(uint **param_1,int param_2,int param_3,undefined4 param_4);
int ** JSDocumentMethod::cookie_read(uint **param_1);
void JSDocumentMethod::cookie_write(uint **param_1,int param_2);
void JSDocumentMethod::close(uint **param_1);
ulonglong JSDocumentMethod::domain_read(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined8 JSDocumentMethod::domain_write(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::embeds(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::fgColor_read(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::fgColor_write(uint **param_1,int param_2,int param_3,undefined4 param_4);
void JSDocumentMethod::forms(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::images(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::lastModified(uint **param_1);
void JSDocumentMethod::linkColor_read(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::linkColor_write(uint **param_1,int param_2,int param_3,undefined4 param_4);
void JSDocumentMethod::links(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::location_read(uint **param_1);
void JSDocumentMethod::location_write(uint **param_1,int param_2);
void JSDocumentMethod::open(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
uint * JSDocumentMethod::referrer(uint **param_1);
void JSDocumentMethod::title(uint **param_1);
uint * JSDocumentMethod::URL(uint **param_1);
uint JSDocumentMethod::write(int *param_1,int param_2,uint param_3,undefined4 param_4);
uint JSDocumentMethod::writeln(int *param_1,int param_2,uint param_3,undefined4 param_4);
void JSDocumentMethod::vlinkColor_read(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSDocumentMethod::vlinkColor_write(uint **param_1,int param_2,int param_3,undefined4 param_4);
bool CheckAddress(uint param_1);
int StringLength(byte *param_1);
undefined8 JSError::Report(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSElement::AddOwner(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int PinFloat(float param_1);
void JSConvert::Convert(undefined4 *param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSElement::Convert(int *param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSElement::ConvertReference(undefined4 *param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSElement::Clean(int *param_1);
void JSElement::GetString(int param_1,char *param_2);
int * JSEvalStack::Pop(int *param_1);
void JSEvalStack::Push(int *param_1,int param_2,int param_3);
void JSEvalStack::Push(int *param_1);
void JSEvalStack::Push(int *param_1,float param_2);
void JSEvalStack::Push(int *param_1,int param_2);
void JSEvalStack::Push(int *param_1,int param_2);
void JSEvalStack::Push(int *param_1,int param_2);
void JSEvalStack::Push(int *param_1,int param_2);
void JSEvalStack::Push(int *param_1,undefined4 *param_2);
void JSEvalStack::Push(int *param_1,int param_2);
void JSEvalStack::Push(int *param_1,int param_2);
void JSEvalStack::Push(int *param_1,int param_2);
void JSElement::SetFloating(undefined4 *param_1,float param_2);
void JSContext::EvaluateBuiltIn(int *param_1,uint **param_2,uint **param_3,uint **param_4,int param_5);
void JSContext::EvaluateNode(int *param_1,uint *******param_2,uint *******param_3,uint **param_4);
ulonglong JSContext::EvaluateOperator(int *param_1,uint *******param_2,uint *******param_3,uint **param_4);
void JSContext::PushBuiltInFunctionResult(int *param_1,uint *param_2,int param_3,int param_4,int *param_5);
undefined8 JSOperator::MatchIt(int *param_1,int param_2,int param_3,undefined4 param_4);
undefined4 JSOperator::SetClass(int *param_1,int *param_2,undefined *param_3,uint *param_4);
void JSOperatorStack::Push(int *param_1,undefined param_2);
void JSParenStack::Push(int *param_1,undefined param_2,uint param_3,uint param_4);
void JSFileUploadMethod::name(void);
void JSFileUploadMethod::value(void);
void JSFormArrayMethod::_operator_array_integer_(uint **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
void JSFormArrayMethod::_operator_array_string_(uint **param_1,int param_2);
undefined4 JSFormArrayMethod::length(uint **param_1);
uint ** JSControlArrayMethod::_operator_array_integer_(uint **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
ulonglong JSControlArrayMethod::_operator_array_string_(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int JSControlArrayMethod::length(uint **param_1);
uint ** JSElementArrayMethod::_operator_array_integer_(uint **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
uint ** JSElementArrayMethod::_operator_array_string_(uint **param_1,uint *param_2);
undefined4 JSElementArrayMethod::length(uint **param_1);
void JSFormMethod::action_read(uint **param_1);
void JSFormMethod::action_write(uint **param_1,int param_2);
void JSFormMethod::elements(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
ulonglong JSFormMethod::encoding_read(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined8 JSFormMethod::encoding_write(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 JSFormMethod::length(uint **param_1);
void JSFormMethod::method_read(uint **param_1);
void JSFormMethod::method_write(uint **param_1,int param_2);
void JSFormMethod::name_read(uint **param_1);
void JSFormMethod::name_write(uint **param_1,int param_2);
void JSFormMethod::onsubmit_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSFormMethod::onsubmit_write(uint **param_1,uint *param_2,int param_3);
void JSFormMethod::onreset_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSFormMethod::onreset_write(uint **param_1,uint *param_2,int param_3);
void JSFormMethod::reset(uint **param_1);
void JSFormMethod::submit(uint **param_1,undefined4 param_2,undefined4 param_3,uint param_4);
void JSFormMethod::target_read(uint **param_1);
void JSFormMethod::target_write(uint **param_1,int param_2);
void FindFrame(uint **param_1);
uint ** JSFrameArrayMethod::_operator_array_integer_(uint **param_1,uint **param_2,undefined4 param_3,undefined4 param_4);
uint ** JSFrameArrayMethod::_operator_array_string_(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSFrameArrayMethod::length(uint **param_1);
void JSFrameMethod::document(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSFrameMethod::frames(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSFrameMethod::length(uint **param_1);
void JSFrameMethod::location_read(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSFrameMethod::location_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSFrameMethod::name_read(uint **param_1);
void JSFrameMethod::name_write(uint **param_1,int param_2);
void JSFrameMethod::onload_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSFrameMethod::onload_write(uint **param_1,uint *param_2,int param_3);
void JSFrameMethod::onunload_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSFrameMethod::onunload_write(uint **param_1,uint *param_2,int param_3);
uint ** JSFrameMethod::parent(uint **param_1,uint **param_2,undefined4 param_3,undefined4 param_4);
uint ** JSFrameMethod::top(uint **param_1,uint **param_2,undefined4 param_3,undefined4 param_4);
uint JSBuiltInFunction::Find(int **param_1,uint *param_2);
void JSFunctionArgument::Delete(int **param_1);
void JSFunctionArgument::New(undefined4 *param_1,int param_2);
void JSParamStack::GetIndex(int param_1,int param_2);
int JSParamStack::GetIndex(int param_1,int param_2);
void JSParamStack::GetTop(int *param_1);
void JSParamStack::Push(int *param_1);
void JSParamStack::Push(int *param_1,int param_2);
void JSParamStack::Pop(int *param_1);
void JSParamStack::SetDepth(uint *param_1,uint param_2);
void JSScriptFunction::Add(int param_1);
void JSScriptFunction::AddParameter(uint *param_1,int param_2);
void JSScriptFunction::Delete(int **param_1);
void JSScriptFunction::New(void);
int JSReturnStack::GetBottom(int param_1);
void JSReturnStack::Init(undefined4 param_1,int param_2);
void JSReturnStack::Pop(int **param_1);
void JSReturnStack::Push(int *param_1,int param_2,int param_3,int param_4,undefined param_5,int param_6,int param_7,uint param_8,int param_9,uint param_10,undefined param_11);
uint ** JSFunctionMethod::NewFunction(int *param_1,int param_2,undefined4 param_3,undefined4 param_4);
uint ** JSFunctionMethod::arguments(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
ulonglong JSFunctionMethod::caller(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
ulonglong JSFunctionMethod::prototype(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint * JSGlobalFunctions::escape(int param_1);
void JSGlobalFunctions::eval(uint *param_1);
bool JSGlobalFunctions::isNaN(uint param_1);
undefined4 JSGlobalFunctions::parseFloat(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
char * JSGlobalFunctions::parseInt(int param_1,uint param_2,undefined4 *param_3);
void JSGlobalFunctions::jstypeof(int param_1,int param_2);
int GetByteVal(uint param_1);
int ** JSGlobalFunctions::unescape(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void JSHiddenMethod::form(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSHiddenMethod::name_read(uint **param_1);
void JSHiddenMethod::name_write(uint **param_1,int param_2);
void JSHiddenMethod::type(void);
void JSHiddenMethod::value_read(uint **param_1);
void JSHiddenMethod::value_write(uint **param_1,int param_2);
int * JSHistoryArrayMethod::_operator_array_integer_(undefined4 param_1,uint param_2,undefined4 param_3,undefined4 param_4);
void JSHistoryArrayMethod::length(void);
void JSHistoryMethod::back(void);
void JSHistoryMethod::current(void);
void JSHistoryMethod::forward(void);
void JSHistoryMethod::go_int(int param_1);
void JSHistoryMethod::go_string(int param_1);
int JSHistoryMethod::length(void);
ulonglong JSHistoryMethod::next(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSHistoryMethod::previous(void);
void FindDocument(uint **param_1);
void JSImageArrayMethod::_operator_array_integer_(uint **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
void JSImageArrayMethod::_operator_array_string_(uint **param_1,int param_2);
undefined4 JSImageArrayMethod::length(uint **param_1);
uint FindImage(uint **param_1);
uint FindImageOrError(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint ** JSImageMethod::NewImage(int param_1,int param_2,int param_3,undefined4 param_4);
int JSImageMethod::border(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 JSImageMethod::complete(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSImageMethod::height(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int JSImageMethod::hspace(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSImageMethod::name(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSImageMethod::onabort_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSImageMethod::onabort_write(uint **param_1,uint *param_2,int param_3,undefined4 param_4);
void JSImageMethod::onerror_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSImageMethod::onerror_write(uint **param_1,uint *param_2,int param_3,undefined4 param_4);
void JSImageMethod::onload_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSImageMethod::onload_write(uint **param_1,uint *param_2,int param_3,undefined4 param_4);
ulonglong JSImageMethod::prototype(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSImageMethod::src_read(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSImageMethod::src_write(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
int JSImageMethod::vspace(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSImageMethod::width(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSList::Add(int *param_1,int param_2);
void JSList::Delete(int *param_1,int param_2);
void JSList::Idle(int *param_1,undefined4 param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
uint * JSInstance::Add(uint **param_1,uint param_2);
uint * JSInstance::Add(uint **param_1,uint *param_2,int param_3);
void JSInstance::Add(uint **param_1,uint *param_2);
void JSInstance::AddOwner(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSInstance::Compact(int param_1);
uint JSInstance::CountAllMembers(uint **param_1);
int JSInstance::CountMembers(int param_1);
void JSInstance::Dispose(int param_1,uint param_2);
void JSInstance::Dispose(uint **param_1,char *param_2);
void JSInstance::Delete(int **param_1);
void JSInstance::Dispose(int **param_1);
int JSInstance::Exists(uint **param_1,uint *param_2,int param_3);
uint * JSInstance::Find(uint **param_1,uint param_2);
uint * JSInstance::Find(uint **param_1,int param_2,int param_3);
uint * JSInstance::Find(uint **param_1,char *param_2);
void JSInstance::Find(uint **param_1,int param_2);
undefined4 JSInstance::GetMember(int param_1,uint param_2);
int JSInstance::GetMember(int param_1,char *param_2);
uint JSInstance::MissingIndex(uint **param_1,uint param_2);
void JSInstance::New(void);
void JSInstance::Remove(int *param_1,int **param_2);
void JSInstance::SetMember(int param_1,uint param_2,undefined4 param_3);
void FindDocument(uint **param_1);
void JSLinkArrayMethod::_operator_array_integer_(uint **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
void JSLinkArrayMethod::_operator_array_string_(uint **param_1,int param_2);
undefined4 JSLinkArrayMethod::length(uint **param_1);
void JSLinkMethod::onclick_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSLinkMethod::onclick_write(uint **param_1,uint *param_2,int param_3);
void JSLinkMethod::onmouseout_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSLinkMethod::onmouseout_write(uint **param_1,uint *param_2,int param_3);
void JSLinkMethod::onmouseover_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSLinkMethod::onmouseover_write(uint **param_1,uint *param_2,int param_3);
void JSLinkMethod::target_read(uint **param_1);
void JSLinkMethod::target_write(uint **param_1,int param_2);
void JSLocationMethod::reload(uint **param_1);
void JSLocationMethod::replace(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
float JSMathMethod::abs_float(float param_1);
undefined4 JSMathMethod::acos(float param_1);
undefined4 JSMathMethod::asin(float param_1);
float JSMathMethod::atan(float param_1);
float JSMathMethod::atan2(float param_1,float param_2);
float JSMathMethod::ceil(float param_1);
undefined4 JSMathMethod::cos(float param_1);
float JSMathMethod::exp(float param_1);
float JSMathMethod::floor(float param_1);
undefined4 JSMathMethod::log(float param_1);
float JSMathMethod::max_float(float param_1,float param_2);
float JSMathMethod::min_float(float param_1,float param_2);
float JSMathMethod::pow(float param_1,float param_2);
float JSMathMethod::random(void);
float JSMathMethod::round(float param_1);
undefined4 JSMathMethod::sin(float param_1);
float JSMathMethod::sqrt(float param_1);
float JSMathMethod::tan(float param_1);
void FindMimeType(uint **param_1);
void JSMimeTypeArrayMethod::_operator_array_integer_(undefined4 param_1,uint param_2,undefined4 param_3,undefined4 param_4);
uint ** JSMimeTypeArrayMethod::_operator_array_string_(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSMimeTypeArrayMethod::length(void);
void JSMimeTypeMethod::description(uint **param_1);
uint ** JSMimeTypeMethod::enabledPlugin(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSMimeTypeMethod::type(uint **param_1);
ulonglong JSMimeTypeMethod::suffixes(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void JSHeap::AllocateNoDebug(uint param_1);
void JSHeap::DeallocateNoDebug(int **param_1,int param_2);
uint * JSBlock::Allocate(int *param_1,uint param_2);
void JSBlock::Deallocate(int **param_1,int **param_2,int param_3);
int ** JSBlock::NewBlock(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSHeap::Delete(int **param_1);
void JSHeap::Init(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint * JSEventHandler::GetEventHandler(uint *param_1,int param_2);
void JSEventHandler::MakeEventHandler(char *param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
int JSMemberLookup::Find(int param_1,int param_2,uint *param_3);
int JSMemberLookup::Find(int param_1,char *param_2,uint *param_3);
void JSNavigatorMethod::appCodeName(void);
void JSNavigatorMethod::appName(void);
void JSNavigatorMethod::appVersion(void);
void JSNavigatorMethod::mimeTypes(void);
void JSNavigatorMethod::plugins(void);
void JSNavigatorMethod::userAgent(void);
void JSObject::Add(char *param_1,undefined4 param_2);
void JSObject::Add(char *param_1,undefined4 param_2);
void JSObject::Add(char *param_1,undefined4 param_2,undefined4 param_3);
bool JSObject::Dispose(int **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int * JSObject::Find(char *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int * JSObject::Find(int **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSObject::Init(void);
void JSObject::New(undefined4 param_1);
void JSObject::New(undefined4 param_1);
uint * AppendArrayElement(int **param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSObjectMethod::NewObject(void);
int ** JSObjectMethod::toString(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined4 JSObjectMethod::valueOf(int param_1,int *param_2);
bool JSBooleanMethod::NewBoolean(int param_1);
undefined8 JSNumberMethod::prototype(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSInstance::ToString(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSOptionArrayMethod::_operator_array_integer_(uint **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
void JSOptionArrayMethod::_operator_array_string_(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined4 JSOptionArrayMethod::length(uint **param_1);
void JSOptionsMethod::array_integer_write(uint **param_1,uint **param_2,uint param_3,undefined4 param_4);
int JSOptionsMethod::selectedIndex_read(uint **param_1);
void JSOptionsMethod::selectedIndex_write(uint **param_1,int param_2);
uint ** JSOptionMethod::NewOption(int param_1,int param_2,uint param_3,uint param_4);
uint FindMenuItem(uint **param_1);
uint JSOptionMethod::defaultSelected_read(uint **param_1);
void JSOptionMethod::defaultSelected_write(uint **param_1,uint param_2);
int JSOptionMethod::index(uint **param_1);
uint JSOptionMethod::selected_read(uint **param_1);
void JSOptionMethod::selected_write(uint **param_1,int param_2);
void JSOptionMethod::text_read(uint **param_1);
void JSOptionMethod::text_write(uint **param_1,int param_2);
void JSOptionMethod::value_read(uint **param_1);
void JSOptionMethod::value_write(uint **param_1,int param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
bool IsJavaScriptFunction(byte *param_1);
byte JSKeyword::Token(char *param_1,char *param_2);
int JSStream::JSStream(int param_1);
void JSStream::~JSStream(int **param_1,uint param_2);
void JSStream::Add(int param_1,undefined4 param_2);
undefined4 JSStream::AddDecimalValue(int *param_1,int param_2);
undefined4 JSStream::AddFloat(int *param_1,char param_2,undefined4 param_3,undefined4 param_4);
void JSStream::Add(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
int JSStream::AddMissingSemi(int param_1,int param_2);
undefined4 JSStream::AddToken(int *param_1);
undefined4 JSStream::AddStringToken(char **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
bool JSStream::Advance(int *param_1);
void JSStream::Back(int *param_1);
void JSStream::Cleanup(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSStream::ClearTimeout(uint **param_1);
undefined JSStream::ConsumeUntilStarSlash(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined JSStream::ConsumeUntilEndOfLine(int *param_1);
void JSStream::Delete(int **param_1);
void JSStream::Delete(int **param_1,int **param_2);
undefined4 JSStream::Idle(int **param_1,int param_2,char *param_3,uint **param_4);
uint JSStream::IsSingleByteToken(undefined4 param_1,uint param_2);
undefined4 JSStream::IsPriorStreamWaiting(int param_1);
undefined4 JSStream::Evaluate(int **param_1,int **param_2,char *param_3,uint **param_4);
undefined4 JSStream::EvaluateOne(char **param_1,undefined4 param_2,uint *******param_3,uint **param_4);
undefined8 JSStream::FunctionPass(int **param_1,int **param_2,undefined4 param_3,undefined4 param_4);
int JSStream::GetPendingStream(void);
void JSStream::GetWhiteSpace(int *param_1);
void JSStream::KeywordToken(char **param_1);
void JSStream::Kill(int **param_1,int param_2);
void JSStream::Kill(int **param_1);
undefined4 JSStream::LookForFunction(char **param_1,int **param_2,undefined4 param_3,undefined4 param_4);
void JSStream::MakeInstance(undefined4 param_1,uint param_2,char *param_3,undefined4 param_4);
undefined JSStream::Next(int *param_1);
char JSStream::NextChar(char **param_1);
void JSStream::NextToken(char **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int JSStream::New(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
char JSStream::ProcessCharacterEscape(char **param_1);
void JSStream::Release(int param_1,int **param_2);
void JSStream::SetPendingValue(int param_1,undefined4 param_2);
void JSStream::SetPendingString(int param_1,char *param_2);
void JSStream::SetStream(char **param_1,char *param_2,char *param_3,int param_4);
char ** JSStream::SetTopStream(char **param_1,char *param_2,char *param_3,int param_4,uint param_5);
uint ** JSStream::SetTimeout(uint *param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSStream::SetThis(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
int ** JSStream::SetThis(int param_1,int **param_2,uint param_3,char *param_4,int param_5);
void JSStream::SetWith(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSStream::SkipFunction(char **param_1,int **param_2,undefined4 param_3,undefined4 param_4);
void JSStream::Zero(int param_1);
void FindDocument(uint **param_1);
void FindEmbed(uint **param_1);
void FindPlugin(uint **param_1);
uint ** JSEmbedArrayMethod::_operator_array_integer_(uint **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
uint ** JSEmbedArrayMethod::_operator_array_string_(uint **param_1,int param_2);
undefined4 JSEmbedArrayMethod::length(uint **param_1);
uint ** JSEmbedMethod::document(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSEmbedMethod::name(uint **param_1);
void JSEmbedMethod::play(uint **param_1);
void JSEmbedMethod::src_read(uint **param_1);
void JSEmbedMethod::src_write(uint **param_1,int param_2);
uint ** JSEmbedMethod::location_read(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSEmbedMethod::location_write(uint **param_1,int param_2);
void JSPluginArrayMethod::_operator_array_integer_(undefined4 param_1,uint param_2,undefined4 param_3,undefined4 param_4);
uint ** JSPluginArrayMethod::_operator_array_string_(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined4 JSPluginArrayMethod::length(void);
void JSPluginMethod::filename(uint **param_1);
void JSPluginMethod::name(uint **param_1);
uint ** JSPluginMIMEArrayMethod::_operator_array_integer_(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
uint ** JSPluginMIMEArrayMethod::_operator_array_string_(uint **param_1,int param_2,undefined4 param_3,undefined4 param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void JSRadioMethod::blur(uint **param_1);
undefined JSRadioMethod::checked_read(uint **param_1);
void JSRadioMethod::checked_write(uint **param_1,char param_2);
void JSRadioMethod::click(uint **param_1);
uint JSRadioMethod::defaultChecked_read(uint **param_1);
void JSRadioMethod::defaultChecked_write(uint **param_1,uint param_2);
void JSRadioMethod::focus(uint **param_1);
void JSRadioMethod::form(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int JSRadioMethod::length(uint **param_1);
void JSRadioMethod::name_read(uint **param_1);
void JSRadioMethod::name_write(uint **param_1,int param_2);
void JSRadioMethod::onblur_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSRadioMethod::onblur_write(uint **param_1,uint *param_2,int param_3);
void JSRadioMethod::onclick_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSRadioMethod::onclick_write(uint **param_1,uint *param_2,int param_3);
void JSRadioMethod::onfocus_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSRadioMethod::onfocus_write(uint **param_1,uint *param_2,int param_3);
void JSRadioMethod::type(void);
void JSRadioMethod::value_read(uint **param_1);
void JSRadioMethod::value_write(uint **param_1,int param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void JSSelectMethod::blur(uint **param_1);
void JSSelectMethod::focus(uint **param_1);
void JSSelectMethod::form(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 JSSelectMethod::length(uint **param_1);
void JSSelectMethod::name_read(uint **param_1);
void JSSelectMethod::name_write(uint **param_1,int param_2);
void JSSelectMethod::onblur_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSSelectMethod::onblur_write(uint **param_1,uint *param_2,int param_3);
void JSSelectMethod::onchange_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSSelectMethod::onchange_write(uint **param_1,uint *param_2,int param_3);
void JSSelectMethod::onfocus_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSSelectMethod::onfocus_write(uint **param_1,uint *param_2,int param_3);
void JSSelectMethod::options(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int JSSelectMethod::selectedIndex_read(uint **param_1);
void JSSelectMethod::selectedIndex_write(uint **param_1,int param_2);
void JSSelectMethod::type(uint **param_1);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
uint * JSString::Append(int **param_1,char *param_2,int param_3);
undefined4 JSString::Compare(uint *param_1,uint *param_2);
void JSString::Copy(int param_1,int param_2,int param_3);
void JSString::Copy(int param_1,char *param_2,int param_3,int param_4);
void JSString::Copy(int param_1,undefined param_2,int param_3);
void JSString::Delete(int **param_1);
void JSString::Init(uint *param_1,char *param_2);
void JSString::Init(int param_1,char *param_2,short param_3);
void JSString::Init(int param_1,int param_2,uint param_3);
uint * JSString::New(char *param_1);
uint * JSString::New(char *param_1,short param_2);
uint * JSString::New(int param_1,uint param_2);
void JSString::NewCopy(char *param_1);
void JSString::SetData(uint *param_1,char *param_2);
void JSString::SetSize(uint *param_1,uint param_2);
void JSStringMethod::anchor(int param_1,int param_2);
void JSStringMethod::big(int param_1);
void JSStringMethod::blink(int param_1);
void JSStringMethod::bold(int param_1);
void JSStringMethod::fixed(int param_1);
void JSStringMethod::fontcolor(int param_1,int param_2);
void JSStringMethod::italics(int param_1);
undefined2 JSStringMethod::length(int param_1);
void JSStringMethod::link(int param_1,int param_2);
void JSStringMethod::small(int param_1);
void JSStringMethod::strike(int param_1);
void JSStringMethod::sub(int param_1);
void JSStringMethod::sup(int param_1);
uint * JSStringMethod::NewString(uint *param_1);
uint * JSStringMethod::charAt(int param_1,uint param_2);
uint * JSStringMethod::fontsize(int param_1,undefined4 param_2);
int JSStringMethod::indexOf(int param_1,int param_2,uint param_3);
int JSStringMethod::lastIndexOf(int param_1,int param_2,uint param_3);
uint ** JSStringMethod::split(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void JSStringMethod::substring(int param_1,uint param_2,uint param_3);
uint * JSStringMethod::toLowerCase(int param_1);
uint * JSStringMethod::toUpperCase(int param_1);
uint * JSStringMethod::Bracket(int param_1,char *param_2);
uint * JSStringMethod::Bracket(int param_1,int param_2,char *param_3,char *param_4,int param_5);
void JSTextMethod::blur(uint **param_1);
void JSTextMethod::defaultValue_read(uint **param_1);
void JSTextMethod::defaultValue_write(uint **param_1,int param_2);
void JSTextMethod::focus(uint **param_1);
void JSTextMethod::form(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSTextMethod::name_read(uint **param_1);
void JSTextMethod::name_write(uint **param_1,int param_2);
void JSTextMethod::onblur_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSTextMethod::onblur_write(uint **param_1,uint *param_2,int param_3);
void JSTextMethod::onchange_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSTextMethod::onchange_write(uint **param_1,uint *param_2,int param_3);
void JSTextMethod::onfocus_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSTextMethod::onfocus_write(uint **param_1,uint *param_2,int param_3);
void JSTextMethod::type(uint **param_1);
void JSTextMethod::value_read(uint **param_1);
void JSTextMethod::value_write(uint **param_1,int param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void JSName::Delete(int **param_1);
void JSName::Dispose(int **param_1);
void JSName::Init(void);
void JSName::New(uint param_1);
uint * JSName::New(char *param_1);
int JSName::New(char *param_1,short param_2);
uint * JSName::New(uint *param_1);
undefined4 JSRegistryBlock::Find(int param_1,uint *param_2,undefined4 param_3,undefined4 param_4);
uint * JSRegistry::Add(undefined4 *param_1,uint *param_2);
void JSRegistry::Delete(int **param_1);
undefined4 JSRegistry::Delete(int *param_1,int **param_2);
void JSRegistry::Find(int *param_1,uint *param_2,undefined4 param_3,undefined4 param_4);
undefined4 JSScope::New(int param_1);
void JSScope::AddGlobal(undefined4 *param_1,uint *param_2);
int * JSScope::Delete(int **param_1);
undefined4 JSScope::Dispose(int *param_1,int **param_2);
void JSScope::Exists(int *param_1,uint *param_2,undefined4 param_3,undefined4 param_4);
int ** JSScope::Find(int *param_1,int **param_2,int param_3,undefined4 param_4);
void FindWindow(uint **param_1);
void JSBaseWindowMethod::alert(int param_1);
void JSBaseWindowMethod::clearTimeout(undefined4 param_1,uint **param_2);
undefined4 JSBaseWindowMethod::confirm(int param_1);
void JSBaseWindowMethod::defaultStatus_read(void);
void JSBaseWindowMethod::history(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSBaseWindowMethod::open(uint **param_1,int param_2,int param_3,undefined4 param_4);
int JSBaseWindowMethod::opener_read(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined8 JSBaseWindowMethod::opener_write(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSBaseWindowMethod::prompt(undefined4 param_1,int param_2,int param_3);
int JSBaseWindowMethod::self(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSBaseWindowMethod::setTimeout(undefined4 param_1,uint *param_2,int param_3,undefined4 param_4);
void JSBaseWindowMethod::status_read(void);
void JSBaseWindowMethod::status_write(undefined4 param_1,int param_2);
int JSBaseWindowMethod::window(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSWindowMethod::document(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSWindowMethod::frames(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSWindowMethod::length(uint **param_1);
void JSWindowMethod::location_read(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void JSWindowMethod::location_write(uint **param_1,int param_2);
void JSWindowMethod::name_read(uint **param_1);
void JSWindowMethod::name_write(uint **param_1,int param_2);
void JSWindowMethod::onload_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSWindowMethod::onload_write(uint **param_1,uint *param_2,int param_3);
void JSWindowMethod::onunload_read(uint **param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void JSWindowMethod::onunload_write(uint **param_1,uint *param_2,int param_3);
int JSWindowMethod::parent(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int JSWindowMethod::top(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 * JSPromptPanel::JSPromptPanel(undefined4 *param_1);
void JSPromptPanel::~JSPromptPanel(int **param_1,uint param_2);
void JSPromptPanel::Close(int *param_1,char param_2);
uint JSPromptPanel::DispatchInputType(int *param_1,int param_2,int param_3);
void JSPromptPanel::Open(int *param_1);
void JSPromptPanel::WritePage(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void RealAudioStream::RealAudioStream(undefined4 *param_1);
void RealAudioStream::~RealAudioStream(int **param_1,uint param_2);
void RealAudioStream::Start(int *param_1);
void RealAudioStream::Stop(int *param_1);
void RealAudioStream::Replay(int *param_1);
void RealAudioStream::Pause(int param_1);
void RealAudioStream::Resume(int *param_1);
undefined RealAudioStream::RequiresConnection(int *param_1);
void RealAudioStream::SkipAhead(int *param_1,int param_2);
void RealAudioStream::SkipBack(int *param_1,int param_2);
void RealAudioStream::SkipTo(int param_1,uint param_2);
int RealAudioStream::GetTimePlayed(int *param_1);
int RealAudioStream::GetTimeRemaining(int *param_1);
void RealAudioStream::GetTitle(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint RealAudioStream::IsLive(int param_1);
uint RealAudioStream::IsPlaying(int param_1);
bool RealAudioStream::Idle(int *param_1);
void RealAudioStream::SetURL(int param_1,char *param_2);
void RealAudioStream::CloseStream(int param_1);
undefined4 RealAudioStream::OpenStream(int *param_1);
undefined4 RealAudioStream::StartPlaying(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * CRaSession::CRaSession(undefined4 *param_1);
void CRaSession::~CRaSession(int **param_1,uint param_2);
undefined4 *CRaSession::Open(int **param_1,undefined4 *param_2,undefined4 *param_3,short param_4,undefined4 param_5,undefined4 param_6,undefined2 param_7);
int CRaSession::Open(int **param_1);
undefined4 CRaSession::DoOpenLocal(void);
undefined4 * CRaSession::OpenURL(int **param_1,char *param_2);
void CRaSession::get_header_mask(int param_1,uint *param_2);
int CRaSession::send_client_events(int *param_1);
undefined4 *CRaSession::DoOpenNet(undefined4 *param_1,undefined4 *param_2,short param_3,undefined4 *param_4,undefined2 param_5);
bool CRaSession::Begin(int **param_1);
bool CRaSession::Resume(int **param_1);
bool CRaSession::Pause(int **param_1);
undefined4 CRaSession::CloseImplementation(int **param_1,short param_2);
void CRaSession::Close(int **param_1);
int CRaSession::CheckBeginRaEvent(int *param_1,undefined2 *param_2);
int CRaSession::GetBeginRaEvent(int *param_1,undefined4 *param_2,ushort *param_3,int **param_4);
int CRaSession::GetEndRaEvent(int *param_1,int **param_2);
undefined4 CRaSession::GetIsLiveStream(int **param_1);
int CRaSession::GetStatus(int *param_1,undefined4 *param_2,undefined4 *param_3);
int ** CRaSession::GetTitle(int **param_1);
void CRaSession::SetTitle(int param_1,char *param_2);
bool CRaSession::Seek(int **param_1,int param_2);
void CRaSession::ProcessIdle(int **param_1);
void CRaSession::SetVolume(int *param_1,short param_2);
void CRaSession::SetServerTimeout(int param_1,ushort param_2);
void CRaSession::ReportError(int param_1,undefined4 param_2);
void callback::~callback(int **param_1,uint param_2);
void WebTV_CNotifier::create_notifier(void);
void WebTV_CNotifier::WebTV_CNotifier(undefined4 *param_1);
void WebTV_CNotifier::~WebTV_CNotifier(int **param_1,uint param_2);
void MKBreakHere(void);
undefined4 WebTV_CNotifier::_SendNotification(undefined4 param_1,uint param_2,uint param_3);
undefined4 WebTV_CNotifier::_GetErrorString(int param_1,undefined4 param_2,int param_3,uint param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void WebTV_CWaveHeader::WebTV_CWaveHeader(undefined4 *param_1);
void WebTV_CWaveHeader::~WebTV_CWaveHeader(int **param_1,uint param_2);
undefined4 WebTV_CWaveHeader::Allocate(int *param_1,ushort param_2);
void WebTV_CWaveHeader::Release(int *param_1,short param_2);
undefined4 WebTV_CWaveHeader::PlayBuffer(int *param_1,undefined4 *param_2,uint param_3,int param_4);
int WebTV_CWaveHeader::RemainingBytes(int param_1);
void WebTV_CWaveHeader::Consume(int param_1,short param_2);
int WebTV_CWaveHeader::Data(int param_1);
void WebTV_CWaveOutput::WebTV_CWaveOutput(undefined4 *param_1,undefined4 param_2);
void WebTV_CWaveOutput::~WebTV_CWaveOutput(int **param_1,uint param_2);
bool WebTV_CWaveOutput::IsStalled(int *param_1);
undefined4 WebTV_CWaveOutput::Open(int *param_1,undefined4 *param_2);
undefined4 WebTV_CWaveOutput::GetAudioBuffer(int param_1,int *param_2);
undefined4 WebTV_CWaveOutput::Play(int param_1,int *param_2,uint param_3,int param_4);
uint WebTV_CWaveOutput::BytesToFrames(int param_1,uint param_2);
int WebTV_CWaveOutput::FramesToBytes(int param_1,int param_2);
void WebTV_CWaveOutput::CopyOutSoundData(int param_1,uint *param_2,uint param_3);
int WebTV_CWaveOutput::AudioStreamCallback(short param_1,int *param_2);
void WebTV_CWaveOutput::DonePlaying(int param_1,short param_2);
void WebTV_CWaveOutput::ReleaseBlocks(int param_1,short param_2);
undefined4 WebTV_CWaveOutput::NewChannel(undefined4 param_1);
undefined4 WebTV_CWaveOutput::DisposeChannel(int param_1);
void WebTV_CWaveOutput::Abort(int *param_1);
void WebTV_CWaveOutput::Reset(int *param_1);
void WebTV_CWaveOutput::Pause(int *param_1);
void WebTV_CWaveOutput::Resume(int *param_1);
void WebTV_CWaveOutput::Idle(void);
void WebTV_CWaveOutput::SetVolume(int *param_1,short param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void callback::~callback(int **param_1,uint param_2);
int * CRaSuperBlocks::CRaSuperBlocks(int *param_1);
void CRaSuperBlocks::~CRaSuperBlocks(int **param_1,uint param_2);
undefined4 CRaSuperBlocks::Initialize(int *param_1,ushort param_2,short param_3);
undefined4 CRaSuperBlocks::Finalize(int param_1);
void CRaSuperBlocks::Enter(int param_1);
void CRaSuperBlocks::Exit(int param_1);
int CRaSuperBlocks::GetNextSuperBlock(int param_1,undefined4 *param_2);
int CRaSuperBlocks::PeekSuperBlockAt(int param_1,int param_2,undefined4 *param_3);
void CRaSuperBlocks::SynchSuperBlocks(int param_1);
undefined4 CRaSuperBlocks::GetSuperBlockData(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 WebTV_CDecoder::get_decoders(void);
void WebTV_CDecoder::create_decoder(void);
undefined4 * WebTV_CDecoder::WebTV_CDecoder(undefined4 *param_1);
void WebTV_CDecoder::~WebTV_CDecoder(int **param_1,uint param_2);
char * WebTV_CDecoder::init_decoder(char **param_1,short *param_2);
uint WebTV_CDecoder::decompress(uint *param_1,undefined4 *param_2,int param_3,undefined2 *param_4,uint *param_5,int param_6);
undefined4 * WebTV_conn::new_socket(short param_1);
undefined4 * WebTV_conn::WebTV_conn(undefined4 *param_1);
void WebTV_conn::~WebTV_conn(int **param_1,uint param_2);
undefined4 WebTV_conn::init_drivers(void);
undefined4 WebTV_conn::close_drivers(void);
undefined4 WebTV_conn::host_to_ip_str(void);
void callback::~callback(int **param_1,uint param_2);
int ** _RAAllocateTaggedMemory(uint param_1);
void _RAFreeTaggedMemory(int **param_1);
void _RADelete(void);
undefined4 * WebTV_tcp::WebTV_tcp(undefined4 *param_1);
void WebTV_tcp::~WebTV_tcp(int **param_1,uint param_2);
undefined4 WebTV_tcp::connect(int param_1,byte *param_2,short param_3,short param_4);
undefined4 WebTV_tcp::read(int param_1,undefined4 param_2,undefined2 *param_3);
undefined4 WebTV_tcp::write(int param_1,undefined4 param_2,undefined2 *param_3);
void callback::~callback(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void WebTV_udp::WebTV_udp(undefined4 *param_1);
void WebTV_udp::~WebTV_udp(int **param_1,uint param_2);
uint WebTV_udp::FIFOCount(int param_1);
uint WebTV_udp::WriteFIFO(int param_1,undefined4 *param_2,uint param_3);
undefined4 WebTV_udp::datahandler(undefined4 param_1,undefined4 param_2,undefined4 *param_3,uint param_4);
byte WebTV_udp::init(int param_1,short param_2);
undefined4 WebTV_udp::read(int param_1,undefined4 *param_2,ushort *param_3);
void callback::~callback(int **param_1,uint param_2);
undefined4 * CByteQueue::CByteQueue(undefined4 *param_1,int param_2,int param_3);
int * CByteQueue::CByteQueue(int *param_1,int *param_2);
void CByteQueue::~CByteQueue(int **param_1,uint param_2);
int * CByteQueue::operator=(int *param_1,undefined4 *param_2);
uint CByteQueue::Base_DeQueueBytes(undefined4 *param_1,undefined4 *param_2,uint param_3);
uint CByteQueue::Base_EnQueueBytes(int *param_1,undefined4 *param_2,uint param_3);
uint CByteQueue::PeekAt(undefined4 *param_1,int param_2,undefined4 *param_3);
uint CByteQueue::Base_PeekBuff(undefined4 *param_1,undefined4 *param_2,uint param_3);
void CByteQueue::EnQueue(int *param_1,undefined4 *param_2,int param_3);
void CByteQueue::DeQueue(undefined4 *param_1,undefined4 *param_2,int param_3);
void CByteQueue::FlushQueue(int param_1);
void CByteQueue::Base_SetEmpty(int param_1);
int CByteQueue::GetAvailableElements(int param_1);
int CByteQueue::Base_GetAvailableBytes(int param_1);
int CByteQueue::GetQueuedItemCount(int param_1);
int CByteQueue::Base_GetUsedByteCount(int param_1);
void CDecoder::create_decoder(void);
void CDecoder::CDecoder(undefined4 *param_1);
void CDecoder::~CDecoder(int **param_1,uint param_2);
void CDecoder::init(undefined4 *param_1);
void CDecoder::set_bandwidth(int param_1);
int CDecoder::bwlist_create(void);
int CDecoder::bwlist_data(void);
void CDecoder::bwlist_delete(void);
int CDecoder::bwlist_add_decoder(int *param_1,char *param_2);
void CDecoder::get_bwlist_data(int *param_1,undefined2 *param_2);
void MD5Data(undefined *param_1,undefined4 *param_2,uint param_3);
undefined4 * Challenge::Challenge(undefined4 *param_1,undefined4 *param_2,uint param_3);
undefined * Challenge::Challenge(undefined *param_1);
undefined *Challenge::response1(int param_1,undefined4 *param_2,byte *param_3,undefined4 param_4,undefined4 param_5);
undefined *Challenge::response2(int param_1,undefined4 *param_2,byte *param_3,undefined4 param_4,undefined4 param_5);
int CInter3::CInter3(int param_1);
void CInter3::~CInter3(int **param_1,uint param_2);
undefined2 CInter3::ErrorCorrection(undefined4 param_1,uint param_2,int *param_3,uint param_4,int param_5,int param_6,int *param_7,int param_8,int param_9,ushort param_10,ushort param_11,ushort param_12);
void CInter4::CInter4(int param_1);
void CInter4::~CInter4(int **param_1,uint param_2);
int CInter4::Init(int param_1,uint *param_2,ushort *param_3,ushort *param_4);
void CInter4::Deinterleave(undefined4 param_1,int param_2,uint param_3,undefined4 *param_4,short *param_5,int param_6);
undefined4 CInter4::ErrorCorrection(int param_1,undefined4 param_2,uint *param_3,uint param_4,int param_5,undefined4 *param_6,uint *param_7,int param_8,undefined4 param_9,uint param_10,ushort param_11,uint param_12);
void CInter5::CInter5(int param_1);
void CInter5::~CInter5(int **param_1,uint param_2);
int CInter5::Init(ushort *param_1,uint *param_2,ushort *param_3,ushort *param_4);
undefined4 CInter5::Deinterleave(undefined4 param_1,undefined4 *param_2,short param_3,undefined4 *param_4,undefined2 *param_5);
undefined4 CInter5::ErrorCorrection(int param_1,undefined4 param_2,uint *param_3,uint param_4,int param_5,undefined4 param_6,uint *param_7,int param_8,undefined4 param_9,ushort param_10,ushort param_11,ushort param_12);
int CInterleave::Construct(char *param_1,undefined2 *param_2);
void CInterleave::CInterleave(int param_1);
void CInterleave::~CInterleave(int **param_1,uint param_2);
void conn::new_socket(short param_1);
void conn::~conn(int **param_1,uint param_2);
void conn::conn(undefined4 *param_1);
void conn::init_drivers(void);
void conn::close_drivers(void);
void conn::host_to_ip_str(void);
void callback::~callback(int **param_1,uint param_2);
void CPref::~CPref(int **param_1,uint param_2);
void CRa3File::CRa3File(undefined4 *param_1);
void CRa3File::~CRa3File(int **param_1,uint param_2);
short CRa3File::ra_read_header(int param_1);
uint CRa3File::ra_format_bufsize(int param_1);
uint CRa3File::ra_write_header(int param_1,undefined4 param_2,short param_3);
uint CRa3File::ra_write_header(int param_1);
undefined4 CRa3File::ra_set_header(int param_1,short *param_2,uint param_3,short param_4);
int ** CRa3File::ra_get_header(int param_1,short *param_2);
uint CRa3File::ra_setup_file(void);
int ** CRa3File::ra_get_setup_data(undefined4 param_1,undefined4 *param_2);
uint CRa3File::ra_data_seek(int param_1,uint param_2,uint *param_3);
void CRa3File::ra_get_compression(int param_1,short *param_2,char *param_3);
undefined4 * CRa4File::CRa4File(undefined4 *param_1);
void CRa4File::~CRa4File(int **param_1,uint param_2);
uint CRa4File::ra_read_header(int param_1);
uint CRa4File::ra_format_bufsize(int param_1);
int CRa4File::ra_write_header(int param_1);
undefined4 CRa4File::ra_set_header(int param_1,short *param_2,undefined4 param_3,short param_4);
int ** CRa4File::ra_get_header(int param_1,short *param_2);
int CRa4File::ra_find_chunk(undefined4 param_1,int param_2,int *param_3);
uint CRa4File::ra_setup_file(void);
undefined4 CRa4File::ra_headerlength(undefined4 param_1,undefined2 *param_2);
int ** CRa4File::ra_get_setup_data(int param_1,undefined4 *param_2);
uint CRa4File::ra_deinterleave(int param_1,uint param_2);
uint CRa4File::ra_data_seek(int param_1,uint param_2,uint *param_3);
undefined4 CRaDataFile::Construct(void);
void CRaDataFile::~CRaDataFile(int **param_1,uint param_2);
undefined2 RaOpenFile(undefined4 param_1,short param_2,ushort param_3);
int RaGetTitle(ushort param_1,undefined4 param_2,undefined2 param_3);
int RaGetAuthor(ushort param_1,undefined4 param_2,undefined2 param_3);
int RaGetCopyright(ushort param_1,undefined4 param_2,undefined2 param_3);
void CRaEventList::CRaEventList(undefined4 *param_1);
void CRaEventList::~CRaEventList(int **param_1,uint param_2);
int * CRaEventList::AddHead(int **param_1,int *param_2);
bool CRaEventList::IsEmpty(int *param_1);
int * CRaEventList::RemoveHead(int **param_1);
int CRaEventList::AddTail(int *param_1,int *param_2);
int * CRaEventList::RemoveTail(int **param_1);
undefined4 CRaEventList::GetHeadPosition(undefined4 *param_1);
undefined4 CRaEventList::GetHead(int *param_1);
undefined4 CRaEventList::GetTail(int param_1);
undefined4 CRaEventList::GetNext(undefined4 param_1,int *param_2);
void CRaEventList::RemoveAt(int **param_1,int **param_2);
void CRaEventList::InsertAfter(int param_1,int *param_2,int *param_3);
undefined4 CRaFile::ra_open_reader(void);
undefined4 * CRaFile::ra_open_reader_net(undefined4 *param_1,int param_2);
undefined4 CRaFile::ra_open_writer(void);
undefined4 * CRaFile::ra_create(undefined4 param_1,short param_2);
short CRaFile::ra_init_interleaver(int param_1);
void CRaFile::CRaFile(undefined4 *param_1);
void CRaFile::~CRaFile(int **param_1,uint param_2);
void CRaFile::ra_get_title(int param_1,undefined4 *param_2,uint param_3);
void CRaFile::ra_get_author(int param_1,undefined4 *param_2,uint param_3);
void CRaFile::ra_get_copyright(int param_1,undefined4 *param_2,uint param_3);
void CRaFile::ra_get_app(int param_1,undefined4 *param_2,uint param_3);
void CRaFile::copy_string(undefined4 *param_1,undefined4 *param_2,uint param_3);
undefined4 CRaFile::ra_set_title(int param_1,undefined4 *param_2);
undefined4 CRaFile::ra_set_author(int param_1,undefined4 *param_2);
undefined4 CRaFile::ra_set_copyright(int param_1,undefined4 *param_2);
undefined4 CRaFile::ra_set_app(int param_1,undefined4 *param_2);
void CRaFile::ra_set_compression(int param_1,undefined2 param_2,undefined4 *param_3);
short CRaFile::ra_set_interleaver(int param_1,undefined4 *param_2);
undefined4 CRaFile::ra_validate(void);
undefined4 CRaFile::ra_headerlength(undefined4 param_1,undefined2 *param_2);
void CRaFile::ra_get_compression(int param_1,undefined2 *param_2,char *param_3);
undefined4 CRaFile::ra_prepare_data(int param_1);
uint CRaFile::ra_prepare_chunk(int param_1);
uint CRaFile::ra_chunk_done(int param_1);
undefined4 CRaFile::ra_data_done(int param_1);
undefined4 CRaFile::ra_write_id(void);
undefined4 CRaFile::ra_write_chunk(void);
uint CRaFile::ra_time_to_bytes(int param_1,uint param_2,int param_3,uint *param_4);
uint CRaFile::ra_bytes_to_superblock(int param_1,uint param_2);
short CRaFile::ra_data_next(int param_1,undefined4 *param_2,uint *param_3,undefined *param_4);
bool CRaFile::ra_data_uninterleaved(int param_1,undefined4 *param_2,uint *param_3);
undefined4 CRaFile::ra_read_word(undefined4 param_1,undefined2 *param_2,char param_3);
undefined4 CRaFile::ra_write_word(void);
undefined4 CRaFile::ra_write_dword(void);
undefined4 CRaFile::ra_byte_align(undefined4 param_1,byte param_2,short *param_3);
uint CRaFile::ra_update_toc(int param_1);
undefined4 CRaFile::ra_write_toc(int param_1,int *param_2);
int CRaFile::ra_find_chunk(int param_1,int param_2,int *param_3);
void CRaFile::ra_error_correction(int param_1,undefined param_2,undefined param_3,undefined param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,undefined4 param_9,undefined2 param_10,undefined2 param_11,undefined2 param_12);
void CRaFile::ra_prepare_rewrite_header(void);
void CRaFileList::CRaFileList(undefined4 *param_1);
void CRaFileList::~CRaFileList(int **param_1,uint param_2);
undefined2 CRaFileList::RaOpenFile(int **param_1,undefined4 param_2,short param_3,ushort param_4);
undefined4 CRaFileList::RaCloseFile(int **param_1,ushort param_2);
undefined4 CRaFileList::RaSetTitle(uint *param_1,ushort param_2,undefined4 param_3);
undefined4 CRaFileList::RaSetAuthor(uint *param_1,ushort param_2,undefined4 param_3);
undefined4 CRaFileList::RaSetCopyright(uint *param_1,ushort param_2,undefined4 param_3);
bool CRaFileList::RaGetTitle(uint *param_1,ushort param_2,undefined4 param_3,undefined2 param_4);
bool CRaFileList::RaGetAuthor(uint *param_1,ushort param_2,undefined4 param_3,undefined2 param_4);
bool CRaFileList::RaGetCopyright(uint *param_1,ushort param_2,undefined4 param_3,undefined2 param_4);
undefined2 CRaFileList::RaGetCompression(uint *param_1,ushort param_2);
undefined4 CRaFileList::RaGetDuration(uint *param_1,ushort param_2);
undefined2 CRaFileList::AddOpenFile(int **param_1,int *param_2,undefined2 param_3);
void CRaFileList::RemoveClosedFile(int **param_1,int **param_2);
uint CRaFileList::FindOpenFile(uint *param_1,ushort param_2);
char * CRaFileList::TimeParse(undefined4 param_1,char *param_2);
void CRaNotifier::create_notifier(void);
void CRaNotifier::CRaNotifier(undefined4 *param_1);
void CRaNotifier::~CRaNotifier(int **param_1,uint param_2);
undefined4 CRaNotifier::SendConnectionInfo(uint *param_1,undefined4 param_2);
undefined4 CRaNotifier::SendLiveStreamEvent(uint *param_1,undefined param_2);
undefined4 CRaNotifier::SendBeginRaEvent(uint *param_1,undefined4 *param_2);
undefined4 CRaNotifier::SendEndRaEvent(void);
undefined4 CRaNotifier::SendClosedEvent(uint *param_1);
void CRaNotifier::SendOpenedEvent(int param_1);
void CRaNotifier::SendAsyncError(uint *param_1,undefined4 param_2,int param_3);
undefined4 CRaNotifier::SendError(uint *param_1,char *param_2,int param_3);
void CRaNotifier::SendStoppedEvent(uint *param_1);
undefined4 CRaNotifier::SendPlayStatusText(uint *param_1,undefined4 param_2,char *param_3);
undefined4 CRaNotifier::SendClipAtribText(uint *param_1,undefined4 param_2,char *param_3);
undefined4 CRaNotifier::SendPosition(uint *param_1,undefined4 param_2,undefined4 param_3);
undefined4 CRaNotifier::Send_URL_Param_Done(uint *param_1);
undefined4 CRaNotifier::SendNotification(uint *param_1,uint param_2,undefined param_3,undefined param_4,undefined4 param_5);
void CRaPtrList::CRaPtrList(undefined4 *param_1);
void CRaPtrList::~CRaPtrList(int **param_1,uint param_2);
bool CRaPtrList::IsPtrListValid(uint *param_1);
int * CRaPtrList::RemoveHead(int **param_1);
int * CRaPtrList::RemoveTail(undefined4 *param_1);
int ** CRaPtrList::AddHead(int **param_1,int *param_2);
int ** CRaPtrList::AddTail(undefined4 *param_1,int *param_2);
void CRaPtrList::AddHead(int **param_1,int param_2);
void CRaPtrList::AddTail(undefined4 *param_1,int *param_2);
void CRaPtrList::RemoveAll(undefined4 *param_1);
int CRaPtrList::GetNext(undefined4 param_1,int *param_2);
int CRaPtrList::GetPrev(undefined4 param_1,int *param_2);
int CRaPtrList::GetAt(undefined4 param_1,int param_2);
void CRaPtrList::RemoveAt(int **param_1,int **param_2);
int ** CRaPtrList::InsertBefore(int **param_1,int *param_2,int *param_3);
void CRaPtrList::InsertAfter(undefined4 *param_1,int *param_2,int *param_3);
undefined4 * CRaPtrList::FindIndex(undefined4 *param_1,int param_2);
int ** CRaPtrList::NewNode(int param_1,int *param_2,int *param_3);
void CRaPtrList::FreeNode(int param_1,int **param_2);
char ** CRaURL::CRaURL(char **param_1,char *param_2);
void CRaURL::~CRaURL(int **param_1,uint param_2);
bool CRaURL::equalivalent_str(char *param_1,char *param_2);
undefined4 CRaURL::parse_url(int param_1,char *param_2);
undefined4 CRaURL::parse_options(int param_1,char *param_2);
undefined4 CRaURL::find_option(int param_1,char *param_2,char **param_3,char **param_4);
void callback::~callback(int **param_1,uint param_2);
void domain::~domain(int **param_1,uint param_2);
void domain::delete_list(int *param_1);
int domain::add_domain(uint **param_1,undefined4 *param_2);
bool domain::is_subdomain(int **param_1,char *param_2);
bool domain::get_domain(undefined4 *param_1,int param_2,char *param_3);
int domain::set_proxy(int param_1,undefined4 *param_2,undefined2 param_3,undefined2 param_4);
int domain::set_splitter(int param_1,char *param_2,undefined2 param_3,undefined2 param_4);
int domain::get_URL_info(int **param_1,int *param_2,int *param_3,ushort param_4,int **param_5,int **param_6,ushort *param_7);
void callback::~callback(int **param_1,uint param_2);
undefined4 initErrCorr(ushort param_1,uint param_2,short param_3,uint param_4,ushort param_5,ushort param_6,ushort *param_7);
void freeErrCorr(void);
undefined4 decode_errcorr(int param_1,undefined4 *param_2,int param_3);
undefined4 pack(char *param_1,ushort *param_2,int param_3);
undefined4 unpack(short *param_1,byte *param_2,int param_3);
undefined4 interl_init(ushort *param_1,ushort *param_2);
undefined4 interl_deinterleave(int param_1,uint param_2,undefined4 *param_3,short *param_4,int param_5);
void interl_close(void);
void fcos(float param_1,float *param_2);
void sqrt(float param_1);
void time(uint *param_1);
undefined4 gettimeofday(undefined4 *param_1);
void RAAllocateMemory(uint param_1);
void RAFreeMemory(int **param_1);
void netplay::netplay(undefined4 *param_1,undefined4 param_2);
void netplay::~netplay(int **param_1,uint param_2);
undefined4 *netplay::Setup(int param_1,undefined4 *param_2,undefined4 *param_3,short param_4,undefined4 param_5,undefined2 param_6);
void netplay::_Pause(int param_1);
undefined4 * netplay::_Resume(int param_1);
void netplay::_Seek(int param_1,int param_2,int param_3,short param_4);
undefined4 netplay::_GetConnectionInfo(int param_1,int *param_2);
void netplay::_Abort(int param_1);
bool netplay::_GetClipAttribute(int param_1,int param_2,undefined4 *param_3,ushort param_4);
void netplay::Imp_handle_retry(int param_1);
void netplay::Imp_handle_alert(int param_1,short param_2);
uint netplay::Imp_System_task(int param_1);
uint netplay::Imp_interrupt_task(int param_1);
void netplay::Imp_GetStatistics(int param_1,int *param_2);
undefined4 netplay::Imp_data_next(int param_1,undefined4 *param_2,uint *param_3,undefined4 *param_4,int *param_5,undefined2 *param_6);
int netplay::set_proxy(int param_1,undefined4 *param_2,undefined2 param_3);
void netplay::SetServerTimeout(int param_1,uint param_2);
void netplay::SendNetHostMsg(int param_1);
void netplay::SendHostMsg(int param_1,undefined4 param_2);
void netplay::handle_alert(int param_1,short param_2);
void netplay::Imp_SendPlayEvent(int param_1);
void callback::~callback(int **param_1,uint param_2);
void pnplayer::pnplayer(undefined4 *param_1,undefined4 param_2);
void pnplayer::~pnplayer(int **param_1,uint param_2);
void pnplayer::Abort(int *param_1,int param_2);
undefined4 pnplayer::Setup(int param_1);
uint pnplayer::Initialize(int *param_1);
void pnplayer::Pause(int *param_1);
void pnplayer::Resume(int *param_1);
void pnplayer::handle_retry(int *param_1);
void pnplayer::Seek(int *param_1,int param_2);
void pnplayer::DoSeek(int *param_1,int param_2);
undefined4 pnplayer::GetStatus(int param_1,undefined4 *param_2,undefined4 *param_3);
uint pnplayer::ProcessIdle(int *param_1);
uint pnplayer::interrupt_task(int *param_1);
void pnplayer::play_status(int *param_1);
void pnplayer::SendPlayNetStreamEvent(int param_1);
void pnplayer::SendPlayLocalFileEvent(int param_1);
void pnplayer::SendPlayLiveStreamEvent(int param_1);
void pnplayer::SendStoppedEvent(int param_1);
void pnplayer::SendPausedEvent(int param_1);
void pnplayer::ProcessIdleEvents(int param_1);
int pnplayer::SendSimpleRaText(int param_1,undefined2 param_2,undefined4 *param_3);
void pnplayer::SetVolume(int param_1,short param_2);
int pnplayer::Audio(int *param_1);
void pnplayer::buffers(int param_1);
void pnplayer::delete_buffers(int param_1);
undefined4 pnplayer::GetConnectionInfo(int *param_1);
undefined4 pnplayer::GetIsLiveStream(int *param_1);
undefined4 pnplayer::CheckBeginRaEvent(int param_1,undefined2 *param_2);
undefined4 pnplayer::GetBeginRaEvent(int param_1,undefined4 *param_2,ushort *param_3,int **param_4);
undefined4 pnplayer::GetEndRaEvent(int param_1,int **param_2);
void pnplayer::callback_task(int *param_1,int param_2,int param_3);
undefined4 pnplayer::retry_ok(void);
void pnplayer::GetClipAttribute(int *param_1,undefined4 param_2,undefined4 param_3,undefined2 param_4);
void pnplayer::ReportError(int param_1,undefined4 param_2);
void pnplayer::ResetAudio(int param_1);
void callback::~callback(int **param_1,uint param_2);
void pn_net::pn_net(undefined4 *param_1,undefined4 param_2);
void pn_net::~pn_net(int **param_1,uint param_2);
void pn_net::abort(int param_1);
uint pn_net::interrupt_task(int param_1);
uint pn_net::system_task(int param_1);
uint pn_net::process(int param_1);
undefined4 * pn_net::buffers(int param_1);
void pn_net::delete_buffers(int param_1);
undefined4 *pn_net::setup(int *param_1,undefined4 *param_2,undefined4 *param_3,short param_4,undefined2 param_5);
int pn_net::init_TCP(int param_1,undefined4 param_2,short param_3);
int pn_net::init_UDP(int param_1);
undefined4 pn_net::control_write(int param_1);
int pn_net::control_read(int param_1);
uint pn_net::data_read(int param_1);
undefined4 pn_net::UDP_audio(int param_1,int param_2,short param_3);
undefined4 pn_net::TCP_audio(int param_1,undefined4 *param_2,ushort param_3);
void pn_net::reset_ra_buffers(int param_1,int param_2);
byte pn_net::hello_state(int param_1,char *param_2);
undefined4 pn_net::length_state(int param_1,undefined4 *param_2);
undefined4 pn_net::audio_len_state(int param_1,undefined4 *param_2);
undefined4 pn_net::audio_state(int param_1,undefined4 *param_2,ushort param_3);
void pn_net::ping_request(int param_1);
void pn_net::ping(int param_1);
undefined4 pn_net::format_len_state(int param_1,undefined4 *param_2);
uint pn_net::format_state(int param_1,undefined4 *param_2,ushort param_3);
uint pn_net::init_format(int param_1);
undefined4 pn_net::challenge_len_state(int param_1,undefined4 *param_2);
int pn_net::challenge_state(int param_1,byte *param_2,ushort param_3);
undefined4 pn_net::proxy_status_len(int param_1,undefined4 *param_2);
void pn_net::proxy_status(int param_1,char *param_2,int param_3,undefined4 param_4);
undefined4 pn_net::redirect_len_state(int param_1,undefined4 *param_2);
undefined4 * pn_net::redirect_state(int *param_1,undefined4 *param_2,int param_3);
void pn_net::set_interleave(int param_1,short param_2);
int pn_net::ra_buffers(int param_1);
void pn_net::delete_ra_buffers(int param_1);
byte pn_net::event_len_state(int param_1,undefined4 *param_2);
byte pn_net::event_state(int param_1,undefined4 *param_2,uint param_3);
undefined4 pn_net::time_state(int param_1,undefined4 *param_2);
undefined4 pn_net::alert_len_state(int param_1,undefined4 *param_2);
undefined4 pn_net::alert_state(int param_1,char *param_2,ushort param_3);
void pn_net::server_hello(int param_1);
int pn_net::proxy_hello(int param_1);
void pn_net::flow_control(int param_1,short param_2);
undefined4 * pn_net::resume(int *param_1);
void pn_net::pause(int param_1);
void pn_net::seek(int *param_1,int param_2,int param_3,short param_4);
undefined4 pn_net::data_next(int param_1,undefined4 *param_2,uint *param_3,undefined4 *param_4,int *param_5,undefined2 *param_6);
undefined4 pn_net::superblock_next(int param_1);
void pn_net::get_compression(int param_1);
void pn_net::get_host(int param_1,char *param_2,uint param_3);
void pn_net::get_title(int param_1,undefined *param_2,short param_3);
void pn_net::get_author(int param_1,undefined *param_2,short param_3);
void pn_net::get_copyright(int param_1,undefined *param_2,short param_3);
void pn_net::init_statistics(int param_1);
void pn_net::update_statistics(int param_1);
void pn_net::get_statistics(int param_1,int *param_2);
void pn_net::send_statistics(int param_1,undefined4 param_2);
undefined4 * pn_net::retry(int *param_1,undefined4 param_2,short param_3);
int pn_net::server_timeout(int param_1);
void pn_net::set_data_callback(undefined4 *param_1,undefined4 param_2);
int pn_net::set_proxy(int param_1,undefined4 *param_2,undefined2 param_3);
void pn_net::set_server_timeout(int param_1,uint param_2);
void callback::~callback(int **param_1,uint param_2);
uint RaFormatReadBase(ushort *param_1,byte *param_2);
undefined4 RaFormatReadMain(ushort *param_1,undefined *param_2);
int RaFormatBufferSize(int param_1);
char * TimeParse(byte *param_1);
void TimeOutput(uint param_1,char *param_2);
void Init_144(int *param_1);
void Decode_144(undefined4 *param_1,uint param_2,int param_3,undefined2 *param_4,undefined4 param_5);
undefined4 Close_144(void);
void calcParamsDec(void);
undefined4 CLongBitField::GetMaskBit(int param_1);
void CLongBitField::BitSet(uint *param_1,int param_2,int param_3);
bool CLongBitField::BitTest(uint *param_1,int param_2);
int CLongBitField::BitRange(uint *param_1,int param_2);
void GetMaskBit(int param_1);
void BitSet(uint *param_1,int param_2,int param_3);
void BitTest(uint *param_1,int param_2);
void BitRange(uint *param_1,int param_2);
void EXCITE_DEC(int param_1,int param_2,int param_3,int param_4,int param_5,short *param_6,short *param_7,short *param_8,undefined2 *param_9);
void DIR_DEC(undefined4 *param_1,uint *param_2,uint *param_3,short *param_4,int param_5);
undefined4 initTablesDec(void);
int INTERPOLATE_DEC(undefined4 param_1,int *param_2,int *param_3,undefined4 param_4,undefined4 param_5,int param_6,undefined4 param_7,undefined4 param_8,int *param_9,undefined4 param_10,undefined4 param_11,int param_12,int param_13);
void I_MOV_DEC(undefined4 param_1,int *param_2,int param_3,undefined4 param_4,undefined4 param_5,int param_6,int param_7);
int RES_ENG_DEC(int param_1,int *param_2);
int liScaledSqrt(int param_1);
void P_EXDEC(undefined2 *param_1,int param_2,int param_3);
bool ATORCI(short *param_1,int param_2);
undefined4 RCTOAI(int *param_1,int *param_2);
void getCodesHex(int param_1,undefined4 *param_2);
void R_SUB(int param_1);
int RS_RRI(short *param_1,int param_2);
void unpack144(ushort *param_1,undefined4 *param_2);
undefined4 init_uvdecode(int *param_1);
void reinit_uvdecode(void);
undefined4 decompress_data(undefined4 *param_1,uint param_2,int param_3,undefined2 *param_4,undefined4 param_5);
void loop_133(int param_1,int param_2);
void loop_m33(int param_1,short param_2,int param_3);
void Init_288(int *param_1);
void Decode_288(int param_1,uint param_2,int param_3,short *param_4,undefined4 param_5);
undefined4 Close_288(void);
void pwf_adapter_dec(float *param_1,int param_2,int param_3);
void init_pwf_adapter_dec(undefined4 *param_1,undefined4 *param_2);
void bsf_adapter_dec(float *param_1,int param_2,int param_3);
void gain_adapter_dec(float *param_1,int param_2);
void init_bsf_adapter_dec(undefined4 *param_1);
void init_gain_adapter_dec(undefined4 *param_1);
void hybwin_fast(int param_1,int param_2,int param_3,int param_4,float *param_5,float *param_6,float *param_7,int param_8,float *param_9,float param_10);
undefined4 levdur(float *param_1,undefined4 *param_2,int param_3);
undefined4 sf_levdur(float *param_1,undefined4 *param_2,int param_3);
void bw_expand2(int param_1,int param_2,int param_3,int param_4,float *param_5,float *param_6);
void bw_expand1(int param_1,int param_2,int param_3,int param_4);
void autocorr_fast(int param_1,float *param_2,int param_3,int param_4,int param_5);
void ldcDecode(byte *param_1,undefined2 *param_2);
void init_decoder(void);
void decode_vector(uint param_1);
void adapt_decoder(void);
undefined4 unpack(short *param_1,byte *param_2,int param_3);
void pwfilter2_dec(int param_1,float *param_2);
void sf_zresp_dec(float *param_1,int param_2,int param_3);
void pwf_zresp_dec(float *param_1,float *param_2);
void mem_update_dec(int param_1,int param_2);
float log_rms(float *param_1);
int predict_gain_dec(void);
void update_gain_dec(float *param_1,float *param_2);
void init_gain_buf_dec(void);
undefined4 initLdcDecoder(undefined4 *param_1,undefined4 *param_2,short param_3);
void freeLdcDecoder(void);
void Compression_Name(undefined2 *param_1,char *param_2);
int InitDecoder(int *param_1);
undefined4 Decode(int param_1,uint param_2,int param_3,short *param_4);
void FreeDecoder(void);
void Init_999(int *param_1);
void Decode_999(undefined4 *param_1,uint param_2,undefined2 *param_3,short *param_4,int param_5);
undefined4 Close_999(void);
undefined4 * ac3_dec(undefined4 *param_1,undefined2 param_2,undefined4 param_3);
void ac3_init(void);
undefined4 * ac3_info(undefined4 *param_1,undefined4 param_2,int param_3);
void bsi_d(void);
void unp_bsi(void);
void cifft(void);
undefined4 * crc_calc(undefined4 *param_1,uint param_2,int param_3);
int dbInitDecoder(int param_1,int param_2,int *param_3);
int GetFrameInfo(undefined4 param_1);
int DecodeFrame(undefined4 param_1,uint param_2);
void AddNoise(float *param_1);
void FractToShort(float *param_1,undefined2 *param_2,int param_3);
int dbDecode(undefined4 *param_1,uint param_2,undefined2 *param_3,int param_4);
void dbFreeDecoder(void);
undefined4 * dolby_sub(undefined4 *param_1,uint param_2,int param_3);
void dolbyinit(void);
void downmix(void);
void clr_downmix(void);
void setup_downmix(void);
float DSPlimit(float param_1);
int DSPnorm(float param_1,undefined4 param_2,ushort param_3);
void idctsc(void);
void idctsc2(void);
void mants_d(void);
void chmants_d(int param_1);
void lfemants_d(undefined4 param_1);
void calc_gain(float param_1,undefined4 param_2,short param_3);
void matrix_d(void);
void unpexps(short *param_1);
void expand_delta(short *param_1,short *param_2,ushort *param_3,short param_4);
void unpmants(void);
void bitunp_lj(ushort *param_1,int param_2);
void bitunp_rj(ushort *param_1,int param_2);
void bitskip(ushort param_1);
void window_d(ushort param_1);
void xdcall(void);
void CProp::CProp(undefined2 *param_1);
void CProp::Create(void);
void CProp::~CProp(int **param_1,uint param_2);
undefined4 CProp::GetProperty(int param_1,uint param_2,ushort param_3,ushort *param_4);
undefined2 * CUnixProp::CUnixProp(undefined2 *param_1);
void CUnixProp::~CUnixProp(int **param_1,uint param_2);
void CUnixProp::_Imp_init(void);
int CUnixProp::_Imp_get_string(undefined4 param_1,uint param_2,ushort param_3,char *param_4,int param_5);
void CompressionName3(undefined2 *param_1,char *param_2);
int InitDBDecoder(int *param_1);
byte DecodeDB(undefined4 *param_1,uint param_2,undefined2 *param_3,short *param_4,int param_5);
void FreeDBDecoder(void);
undefined4 GetFlavorProperty(uint param_1,ushort param_2,ushort *param_3);
int FLOATTOFRACSAMP(float param_1);
int FLOATTOSAMP(float param_1);
undefined4 * MPEGAudioStream::MPEGAudioStream(undefined4 *param_1);
void MPEGAudioStream::~MPEGAudioStream(int **param_1,uint param_2);
undefined4 * ShockWaveAudioStream::ShockWaveAudioStream(undefined4 *param_1);
void ShockWaveAudioStream::~ShockWaveAudioStream(int **param_1,uint param_2);
void MPEGAudioStream::StopPlaying(int param_1);
undefined4 MPEGAudioStream::SkipShockWaveHeader(int param_1,char param_2);
undefined8 MPEGAudioStream::StartPlaying(int param_1,char param_2);
undefined4 MPEGAudioStream::DecodeFrameHeader(int param_1);
void MPEGAudioStream::DecodeAllocation2(int param_1,int param_2);
void MPEGAudioStream::DecodeScale2(int param_1,uint *param_2,int param_3);
void MPEGAudioStream::DecodeSamples2(int param_1,uint *param_2,int param_3,int *param_4);
undefined4 MPEGAudioStream::SeekSync(int param_1);
uint MPEGAudioStream::GetFrameSize(int param_1);
void MPEGAudioStream::SkipAncilliaryData(int param_1);
int MPEGAudioStream::DecodeLayer2Frame(int param_1,undefined2 *param_2,int *param_3);
int MPEGAudioStream::DecodeLayer1Frame(int param_1,undefined2 *param_2,int *param_3);
int MPEGAudioStream::DecodeFrame(int param_1,ushort *param_2,int *param_3);
uint FixCubeRoot(int param_1);
void MPEGAudioStream::BandGainAdjust3(int param_1,int param_2,int param_3,char param_4);
uint MPEGAudioStream::GainAdjust3(int param_1,int param_2,int param_3);
bool MPEGAudioStream::GetGain3(int param_1,uint param_2,undefined4 *param_3);
uint MPEGAudioStream::HGet1Bit(int param_1);
int MPEGAudioStream::HGetBitPos(int param_1);
void MPEGAudioStream::HybridSynthesis3(int param_1,int param_2);
int MPEGAudioStream::DecodeLayer3Frame(int param_1,ushort *param_2,int *param_3);
void MPEGAudioStream::GetScaleFactors3(int param_1,int param_2,int param_3);
void MPEGAudioStream::GetLSFScaleData3(int param_1,int param_2,int param_3);
void MPEGAudioStream::SetGranule3(int param_1,int param_2,int param_3);
void MPEGAudioStream::GetLSFScaleFactors3(int param_1,int param_2);
undefined4 MPEGAudioStream::LongCode3(int param_1,int param_2,byte *param_3,short *param_4);
uint MPEGAudioStream::BigValues3(int param_1,int param_2);
int MPEGAudioStream::SmallValues3(int param_1,int param_2,int param_3,int param_4);
uint MPEGAudioStream::GetBits(int param_1,uint param_2);
uint MPEGAudioStream::GetSampleFrequency(int param_1);
int MPEGAudioStream::GetBitRate(int param_1);
undefined4 MPEGAudioStream::GetSideInfo3(int param_1);
undefined4 MPEGAudioStream::BufferFrame3(int param_1);
void MPEGAudioStream::HPrep(int param_1);
uint MPEGAudioStream::HGetBitsRead(int param_1,uint param_2);
uint MPEGAudioStream::HGetBitRead(int param_1);
void MPEGAudioStream::HSkipBits(int param_1,int param_2);
uint MPEGAudioStream::HGetBits(int param_1,uint param_2);
undefined4 MPEGAudioStream::HuffmanDecode3(int param_1,int param_2,int param_3);
void MPEGAudioStream::Dequantize3(int param_1,uint *param_2,int param_3);
void MPEGAudioStream::ReorderAndAntiAlias3(int param_1,undefined4 *param_2,undefined4 *param_3);
int MPEGAudioStream::InitIStereo3(int param_1,int param_2);
void MPEGAudioStream::Stereo3(int param_1,uint *param_2,uint *param_3);
uint MPEGAudioStream::GetBitsRead(int param_1,int param_2);
uint MPEGAudioStream::NextBitsRead(int param_1,int param_2);
int MPEGAudioStream::GetSamples(int param_1,ushort *param_2,int *param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
bool SynthesisFilter::Initialize(int param_1);
void SynthesisFilter::SynthesisFilter(undefined4 *param_1);
void HalfTrans(short *param_1);
void SynthesisFilter::ComputeNewV(int param_1,int *param_2);
void SynthesisFilter::ComputeSamples(int param_1,undefined2 *param_2);
void SynthesisFilter::CalculatePCMSamples(int *param_1,int *param_2,undefined2 *param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
bool ProTracker15ModLoader::LoadModuleHeader(int *param_1);
bool ProTracker15ModLoader::Test(int *param_1);
void ProTracker15ModLoader::ConvertNote(undefined4 param_1,byte *param_2);
void ProTracker15ModLoader::ConvertTrack(undefined4 param_1,byte *param_2,int param_3);
undefined4 ProTracker15ModLoader::LoadPatterns(int *param_1);
bool ProTracker15ModLoader::Load(int *param_1);
void ProTracker15ModLoader::~ProTracker15ModLoader(int **param_1,uint param_2);
undefined4 GenericModLoader::Test(int *param_1);
void GenericModLoader::ConvertNote(undefined4 param_1,byte *param_2);
void GenericModLoader::ConvertTrack(undefined4 param_1,byte *param_2,int param_3);
undefined4 GenericModLoader::ML_LoadPatterns(undefined4 param_1,int param_2);
bool GenericModLoader::Load(undefined4 *param_1);
void GenericModLoader::~GenericModLoader(int **param_1,uint param_2);
bool MultiTrackerModLoader::Test(int *param_1);
void MultiTrackerModLoader::~MultiTrackerModLoader(int **param_1,uint param_2);
void MultiTrackerModLoader::Convert(int param_1);
undefined4 MultiTrackerModLoader::Load(undefined4 *param_1);
bool ScreamTrackerModLoader::Test(int *param_1);
void ScreamTrackerModLoader::~ScreamTrackerModLoader(int **param_1,uint param_2);
undefined4 ScreamTrackerModLoader::ReadPattern(int *param_1);
void ScreamTrackerModLoader::ConvertTrack(undefined4 param_1,byte *param_2);
undefined4 ScreamTrackerModLoader::Load(int *param_1);
undefined4 ScreamTracker2ModLoader::Test(int *param_1);
void ScreamTracker2ModLoader::ConvertNote(undefined4 param_1,byte *param_2);
void ScreamTracker2ModLoader::ConvertTrack(undefined4 param_1,byte *param_2,int param_3);
undefined4 ScreamTracker2ModLoader::LoadPatterns(int *param_1);
undefined4 ScreamTracker2ModLoader::Load(int *param_1);
void ScreamTracker2ModLoader::~ScreamTracker2ModLoader(int **param_1,uint param_2);
bool UltraTrackerModLoader::Test(int *param_1);
undefined UltraTrackerModLoader::ReadUltEvent(int *param_1);
undefined4 UltraTrackerModLoader::Load(int *param_1);
void UltraTrackerModLoader::~UltraTrackerModLoader(int **param_1,uint param_2);
bool UniTrackerModLoader::Test(int *param_1);
int ** UniTrackerModLoader::StrRead(int *param_1);
int ** UniTrackerModLoader::TrkRead(int *param_1);
undefined4 UniTrackerModLoader::Load(int **param_1);
void UniTrackerModLoader::~UniTrackerModLoader(int **param_1,uint param_2);
bool FastTrackModLoader::Test(int *param_1);
void FastTrackModLoader::ReadNote(undefined4 param_1,int param_2,uint *param_3);
void FastTrackModLoader::Convert(undefined4 param_1,char *param_2,ushort param_3);
undefined4 FastTrackModLoader::Load(int **param_1);
void FastTrackModLoader::~FastTrackModLoader(int **param_1,uint param_2);
undefined4 Mod669ModLoader::Test(int *param_1);
undefined4 Mod669ModLoader::Load(undefined4 *param_1);
void Mod669ModLoader::~Mod669ModLoader(int **param_1,uint param_2);
void ModLoader::ModLoader(int param_1);
void ModLoader::~ModLoader(int **param_1,uint param_2);
int PeriodToNote(int param_1);
int ** ModPlayer::MyMalloc(int param_1,uint param_2);
int ** ModPlayer::MyCalloc(int param_1,int param_2,int param_3);
undefined4 ModPlayer::ReadComment(int param_1,uint param_2);
undefined4 ModPlayer::AllocPatterns(int param_1);
bool ModPlayer::AllocTracks(int param_1);
bool ModPlayer::AllocInstruments(undefined4 *param_1);
undefined4 ModPlayer::AllocSamples(int param_1,int *param_2);
int ** DupStr(int param_1,ushort param_2);
undefined4 ModPlayer::ML_LoadSamples(int *param_1);
bool ModPlayer::CanPlayData(uint *param_1,uint param_2,uint param_3);
undefined4 ModPlayer::ML_GetLoaders(int param_1);
void ModPlayer::ML_ReleaseLoaders(int param_1);
undefined ModPlayer::ML_LoadHeader(int param_1);
void ModPlayer::ML_XFreeInstrument(int param_1,int *param_2);
void ModPlayer::ML_Free(uint *param_1);
undefined4 ModPlayer::ML_LoadFP(uint *param_1);
int ModPlayer::_mm_pending(int param_1);
bool ModPlayer::_mm_fseek(int param_1,int param_2,int param_3);
undefined4 ModPlayer::_mm_ftell(int param_1);
int ModPlayer::_mm_read_SBYTE(int param_1);
undefined ModPlayer::_mm_read_UBYTE(int param_1);
uint ModPlayer::_mm_read_M_UWORD(int param_1);
uint ModPlayer::_mm_read_I_UWORD(int param_1);
int ModPlayer::_mm_read_I_SWORD(int param_1);
uint ModPlayer::_mm_read_M_ULONG(int param_1);
uint ModPlayer::_mm_read_I_ULONG(int param_1);
bool ModPlayer::_mm_read_str(int param_1,undefined *param_2,int param_3);
bool ModPlayer::_mm_read_UBYTES(int param_1,undefined *param_2,int param_3);
bool ModPlayer::_mm_read_I_UWORDS(int param_1,undefined2 *param_2,int param_3);
bool ModPlayer::_mm_read_I_ULONGS(int param_1,uint *param_2,int param_3);
int ** mod_malloc(uint param_1);
void mod_free(int **param_1);
int ** mod_realloc(int **param_1,uint param_2);
void ModPlayer::ModPlayer(int param_1);
void ModPlayer::~ModPlayer(int **param_1,uint param_2);
undefined4 ModPlayer::MP_Init(uint *param_1,uint param_2,uint param_3);
void ModPlayer::Start(int param_1);
void ModPlayer::Stop(int param_1);
void ModPlayer::Pause(int param_1);
void ModPlayer::Resume(int param_1);
undefined ModPlayer::GetNumChannels(int param_1);
void ModPlayer::Error(int param_1,undefined param_2);
int Interpolate(int param_1,int param_2,int param_3,int param_4,int param_5);
int DoPan(short param_1,short param_2);
void StartEnvelope(undefined4 *param_1,undefined param_2,undefined param_3,undefined param_4,undefined param_5,undefined param_6,undefined4 param_7);
int ProcessEnvelope(int *param_1,short param_2,char param_3);
int GetFreq2(int param_1);
int ModPlayer::GetPeriod(int param_1,uint param_2,uint param_3);
void ModPlayer::DoEEffects(int param_1,uint param_2);
void ModPlayer::DoVibrato(int param_1);
void ModPlayer::DoTremolo(int param_1);
void ModPlayer::DoVolSlide(int param_1,uint param_2);
void ModPlayer::DoS3MVolSlide(int param_1,char param_2);
void ModPlayer::DoXMVolSlide(int param_1,char param_2);
void ModPlayer::DoXMGlobalSlide(int param_1,char param_2);
void ModPlayer::DoXMPanSlide(int param_1,uint param_2);
void ModPlayer::DoS3MSlideDn(int param_1,uint param_2);
void ModPlayer::DoS3MSlideUp(int param_1,uint param_2);
void ModPlayer::DoS3MTremor(int param_1,uint param_2);
void ModPlayer::DoS3MRetrig(int param_1,byte param_2);
void ModPlayer::DoS3MSpeed(int param_1,char param_2);
void ModPlayer::DoS3MTempo(int param_1,undefined param_2);
void ModPlayer::DoToneSlide(int param_1);
void ModPlayer::DoPTEffect0(int param_1,uint param_2);
void ModPlayer::PlayNote(int *param_1);
void ModPlayer::PlayEffects(int param_1);
void ModPlayer::MP_HandleTick(int *param_1);
bool ModPlayer::MP_Ready(int param_1);
void ModPlayer::MP_SetPosition(int param_1,ushort param_2);
void UniSetRow(byte *param_1);
undefined UniGetByte(void);
void UniSkipOpcode(byte param_1);
byte * UniFindRow(byte *param_1,ushort param_2);
void UniReset(void);
void UniWrite(undefined param_1,undefined param_2);
void UniInstrument(undefined param_1);
void UniNote(undefined param_1);
void UniPTEffect(char param_1,char param_2);
void UniSEffect(undefined param_1,byte param_2);
undefined4 MyCmp(char *param_1,char *param_2,ushort param_3);
void UniNewline(void);
int ** UniDup(void);
bool UniInit(void);
void UniCleanup(void);
void ModPlayer::SL_Init(int param_1,undefined2 param_2,undefined2 param_3);
void ModPlayer::SL_Load(int param_1,undefined2 *param_2,uint param_3);
undefined4 ModPlayer::VC_SampleLoad(int param_1,uint *param_2);
void ModPlayer::VC_SampleUnload(int param_1,int param_2);
void ModPlayer::MixStereoInline(int param_1,int *param_2,int *param_3,uint param_4,int param_5,short param_6,int param_7,int param_8);
void ModPlayer::MixStereoInlineDelta(int param_1,int *param_2,int *param_3,uint param_4,int param_5,short param_6,int param_7,int param_8);
void ModPlayer::MixStereoInterp(undefined4 param_1,int param_2,int *param_3,uint param_4,int param_5,short param_6,int param_7,int param_8);
void ModPlayer::VC_AddChannel(int param_1,int param_2,int *param_3,uint param_4);
void ModPlayer::VC_FillTick(int param_1,undefined2 *param_2,uint param_3);
void ModPlayer::VC_WriteSamples(int *param_1,undefined2 *param_2,uint param_3);
uint VC_WriteBytes(undefined2 *param_1,uint param_2);
void ModPlayer::VC_SetVolume(int param_1,int param_2);
void ModPlayer::VC_PlayStart(int param_1);
undefined4 ModPlayer::VC_Init(int param_1);
void ModPlayer::VC_VoiceSetVolume(int param_1,uint param_2,undefined param_3);
void ModPlayer::VC_VoiceSetFrequency(int param_1,uint param_2,undefined4 param_3);
void ModPlayer::VC_VoiceSetPanning(int param_1,uint param_2,undefined param_3);
void ModPlayer::VC_VoicePlay(int param_1,uint param_2,uint *param_3,uint param_4);
void Mod::Mod(undefined4 *param_1);
void Mod::~Mod(int **param_1,uint param_2);
void Mod::Reset(int *param_1);
void Mod::EndPlay(int param_1);
undefined4 Mod::IsDone(int param_1);
int ** Mod::PlayData(int param_1,uint param_2,uint param_3,int param_4);
undefined4 Mod::ValidateData(int param_1,uint param_2,uint param_3);
void Mod::Play(int *param_1,undefined4 param_2);
void Mod::Pause(int param_1);
void Mod::SetVolume(int param_1,undefined4 param_2);
void Mod::Resume(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void YuyvDataChunk::Init(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint PrintSystem::PrintPage(int **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
bool PrintSystem::PrinterFontMetrics(int **param_1,uint param_2,char param_3,int *param_4);
int PrintSystem::PrinterTextMeasure(int **param_1,undefined4 param_2,uint param_3,char param_4,byte *param_5,int param_6);
uint PrintSystem::PrinterPaintText(int **param_1,undefined4 param_2,uint param_3,char param_4,char *param_5,int param_6,uint param_7,int param_8,int param_9,uint param_10,ushort **param_11);
void PrintSystem::PrinterDrawExtent(int param_1,int param_2,int param_3);
void PrintSystem::PrinterFunction(int **param_1,undefined4 param_2);
uint PrintSystem::LoadDriver(int *param_1);
void PrintSystem::InitHeader(int **param_1);
int * PrintSystem::ImageHeader(int **param_1,undefined4 *param_2);
int PrintSystem::ImageBody(int param_1,int param_2);
undefined4 PrintSystem::WaitForDocument(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 PrintSystem::WaitForImages(int param_1,int *param_2,char *param_3,uint **param_4);
void PrintSystem::SystemIdle(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4);
uint PrintSystem::PrinterFontSize(undefined4 param_1,uint param_2);
void PrintSystem::GetFontInfoForPrinter(undefined4 param_1,uint param_2,char param_3,int *param_4);
undefined4 PrintSystem::FitsOnThisPage(int param_1,int param_2);
void PrintSystem::DisplayPrinterStatus(int param_1,int param_2);
bool PrintSystem::UserHasCancelled(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void MakeHPPrinterDriver(undefined4 param_1,undefined4 param_2);
void HPPrinterDriver::HPPrinterDriver(undefined4 *param_1,undefined4 param_2,undefined4 param_3);
undefined4 HPPrinterDriver::OpenDriver(int param_1,int *param_2);
undefined4 HPPrinterDriver::EndPage(int param_1,undefined4 param_2,int param_3,undefined4 param_4);
int HPPrinterDriver::SetUpFont(int param_1,uint param_2,uint *param_3,undefined4 param_4,undefined4 param_5,uint param_6);
undefined4 HPPrinterDriver::MeasureText(int param_1,int *param_2,undefined4 param_3,byte *param_4,int param_5);
void HPPrinterDriver::PrintText(int *param_1,undefined4 param_2,undefined4 param_3,undefined *param_4,int param_5,int param_6,int param_7);
undefined4 HPPrinterDriver::PrintGraphics(int param_1,uint **param_2,int param_3,int param_4);
undefined4 HPPrinterDriver::PrinterFunction(undefined4 param_1,char *param_2);
undefined4 HPPrinterDriver::CloseDriver(int param_1,uint param_2,int param_3,undefined4 param_4);
bool YieldToSystem(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 DisplayPrinterStatus(undefined4 param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int ** OpenPort(void);
void ClosePort(void);
uint GetStatus(int **param_1);
void ReadPort(void);
void WritePort(int **param_1,undefined *param_2,ushort *param_3);
void GetDevID(int **param_1,undefined *param_2,int *param_3);
void GetECPStatus(int **param_1,byte *param_2,int *param_3,byte *param_4);
undefined * GetHPGlobals(void);
undefined4 xlate_parallel_error(int param_1);
uint * AllocMem(uint param_1);
undefined4 FreeMem(int **param_1);
uint GetSystemTickCount(void);
int GetRandomNumber(void);
int ceiling(float param_1);
float frac(float param_1);
uint * MyAlloc(int param_1,uint param_2);
uint * OpenJob(undefined2 param_1,int *param_2,int **param_3,undefined4 *param_4);
void SetDevCaps(int *param_1);
int CloseJob(int **param_1,undefined4 param_2,int param_3,undefined4 param_4);
void AbortJob(int **param_1,undefined4 param_2,int param_3,undefined4 param_4);
void PCL::EndPage(int param_1,undefined4 param_2,int param_3,undefined4 param_4);
void NewPage(int param_1,undefined4 param_2,int param_3,undefined4 param_4);
undefined4 BlankRasters(int *param_1,int param_2,int param_3);
void PCL::ResetSeedRaster(int param_1,uint *param_2);
int PCL::UHT_Raster(int param_1,int param_2);
int SendRasters(int param_1,int *param_2,int param_3);
int PCL::PCL(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7,int param_8,int param_9,int param_10,uint param_11);
void PCL::AllocPlanes(int param_1);
int PCL600::PCL600(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7,int param_8,int param_9,int param_10,uint param_11);
int PCL400::PCL400(int param_1,int param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,int param_7,int param_8);
void PCL::~PCL(int **param_1,uint param_2);
int stringlen(char *param_1);
int PCL::EscCopy(undefined4 param_1,undefined *param_2,char *param_3,undefined4 param_4,undefined param_5);
int PCL::EscAmplCopy(undefined4 param_1,undefined *param_2,undefined4 param_3,undefined4 param_4);
void PCL::SetMediaType(int param_1,int param_2);
void PCL::SetMediaSize(int param_1,int param_2);
void PCL::SetMediaSource(int param_1,int param_2);
void PCL::SetQuality(int param_1,uint param_2);
void PCL::SetSimpleColor(int param_1);
void PCL::InitFonts(int *param_1);
void PCL::ForceFontSend(int param_1);
void PCL::DeleteFont(int *param_1,int param_2);
void PCL::SetPenDependencies(int param_1);
undefined4 PCL::GetPitch(undefined4 param_1,int param_2,byte param_3);
void PCL::SetTypeface(int *param_1,undefined4 param_2,int param_3);
undefined4 PCL::TransparentChar(undefined4 param_1,int param_2,undefined4 param_3,int param_4);
bool PCL::StyleValue(undefined4 param_1,int param_2);
byte PCL::WeightValue(undefined4 param_1,int param_2);
void PCL::HasColorPen(int param_1);
void PCL::HasBlackPen(int param_1);
int PCL::Raster(int param_1,int param_2);
void PCL::ConfigureRasterData(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void PCL::Header_Margins(int param_1);
void PCL::Header_Graphics(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void PCL::Header_Simple(int param_1);
void PCL::Header_Modes(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void PCL400::Header(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void PCL600::Header(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
int PCL::TextOut(int *param_1,int param_2,int param_3,int param_4,int param_5,int param_6);
void PCL::SendCAP(int param_1,undefined4 param_2,undefined4 param_3);
void PCL::SendCAPy(int param_1,undefined4 param_2);
void PCL::DisableUnderline(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 PCL::SendFont(int *param_1,int param_2);
void PCL::EndRaster(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void PCL::EndJob(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void PCL::FormFeed(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void PCL400::~PCL400(int **param_1,uint param_2);
void PCL600::~PCL600(int **param_1,uint param_2);
void Uq(int param_1,int param_2,byte *param_3,undefined *param_4,undefined *param_5,undefined *param_6,undefined *param_7);
void EDiffBinary(short *param_1);
void calc_sizes(int param_1,int *param_2,int *param_3,int *param_4,int *param_5,int *param_6,int *param_7,int *param_8,int *param_9);
undefined4 UmpquaHTStart(ushort param_1,uint param_2,undefined2 param_3,uint *param_4);
void calc_pointers(int param_1,int *param_2,int *param_3,int *param_4,int *param_5,int *param_6,int *param_7,int *param_8,int *param_9);
undefined4 UmpquaHT(uint *param_1,byte *param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
void UmpquaHTEnd(uint *param_1);
undefined4 PerformPrinterFunction(undefined4 param_1,char *param_2);
undefined4 BusyWait(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
bool PrinterIsAlive(int param_1);
void GetC32Status(int param_1,byte *param_2,int *param_3,undefined4 param_4);
uint ParseErrorState(int param_1,uint param_2,undefined4 param_3,undefined4 param_4);
undefined4 WriteToPort(int param_1,int param_2,int param_3,undefined4 param_4);
int Mode9(char *param_1,int param_2,char *param_3,char *param_4);
undefined4 EnumFont(int param_1,int *param_2,undefined4 *param_3);
undefined4 RealizeFont(int param_1,uint *param_2,int *param_3);
undefined4 UnrealizeFont(int param_1,uint param_2);
undefined4 GetTextExtent(int param_1,uint param_2,byte *param_3,int param_4,uint *param_5,int *param_6);
int TextOut(int param_1,int param_2,int param_3,uint param_4,undefined *param_5,int param_6);
void Pixel_ReplicateF(undefined param_1,int param_2,int param_3,int param_4,int param_5);
uint GetLuminance(int param_1,int param_2,int param_3);
bool Compare_Threshold(int param_1,int param_2,int param_3,int param_4,int param_5);
void ResSynStart(int param_1,int param_2,int param_3,undefined4 param_4,int *param_5);
int ResSyn(int *param_1,undefined4 *param_2,int param_3);
int create_out(int *param_1,int param_2);
void rez_synth(int *param_1,int param_2);
void apply_filterF(int param_1,int param_2,int param_3,int param_4,int param_5,int param_6,float *param_7);
void read_filter(int param_1);
int choose_classes(float *param_1,int *param_2);
void SetDevInfo(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void VerifyDJ400Info(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void VerifyDJ600Info(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void VerifyDJ6XXInfo(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void VerifyDevInfo(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void AudioIdle(void);
undefined4 ValidateAudioDataType(int *param_1);
int ValidateAudioDataType(int *param_1);
uint ByteSwapLong(uint param_1);
undefined4 * Audio::Audio(undefined4 *param_1);
void Audio::~Audio(int **param_1,uint param_2);
uint Audio::GetTitle(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void Audio::Load(int param_1,int *param_2);
void Audio::Load(int param_1,byte *param_2,uint param_3,uint param_4);
void Audio::Load(int param_1,uint param_2,uint param_3);
void Audio::NewAudio(int *param_1);
int * Audio::NewAudio(int param_1);
void Audio::SetAttributeStr(int param_1,int param_2,char *param_3);
undefined4 * AudioStream::AudioStream(undefined4 *param_1);
void AudioStream::~AudioStream(int **param_1,uint param_2);
void AudioStream::Reset(int param_1);
int AudioStream::GuessDataType(int param_1);
undefined4 AudioStream::NewAudioDecoder(int param_1);
void AudioStream::OpenStream(int *param_1);
int AudioStream::GetData(int *param_1,int param_2,int *param_3);
int * AudioStream::PeekData(int *param_1,int param_2,int *param_3);
void AudioDecoder::AudioDecoder(undefined4 *param_1);
void AudioDecoder::~AudioDecoder(int **param_1,uint param_2);
bool AudioDecoder::IsPlaying(int param_1);
void AudioDecoder::Pause(int param_1);
void AudioDecoder::Resume(int param_1);
void AudioDecoder::SetVolume(int param_1,int param_2);
void AudioDecoder::SkipAhead(int param_1,undefined4 param_2);
void AudioDecoder::SkipBack(int param_1);
void AudioStream::GetPending(int param_1);
void AudioStream::Rewind(int param_1);
undefined4 AudioStream::GetShort(int *param_1,undefined2 *param_2);
undefined4 AudioStream::GetLong(int *param_1,uint *param_2);
undefined4 AudioStream::PeekLong(int *param_1,uint *param_2);
int AudioStream::BytesLeft(int param_1);
undefined4 AudioStream::BytesAvailable(int param_1);
void AudioStream::CloseStream(int param_1);
void AudioStream::WaitForData(int *param_1,int param_2);
undefined4 AudioStream::BufferControl(int *param_1,int param_2);
void AudioStream::Start(int param_1);
bool AudioStream::IsPlaying(int param_1);
void AudioStream::Stop(int *param_1);
void AudioStream::Fadeout(int *param_1);
undefined4 AudioStream::Idle(int *param_1);
void AudioStream::Pause(int *param_1);
void AudioStream::Resume(int param_1);
void AudioStream::Replay(int *param_1);
uint AudioStream::GetTimeRemaining(int *param_1);
uint AudioStream::GetTimePlayed(int *param_1);
void AudioStream::SkipAhead(int param_1,int param_2);
void AudioStream::SkipBack(int param_1);
void AudioDecoder::StopPlaying(int param_1);
void AudioStream::SetVolume(int param_1,int param_2);
void AudioStream::FadeStep(int param_1);
void CopyULAWSamples(byte *param_1,short *param_2,int param_3);
void CopyALAWSamples(byte *param_1,short *param_2,int param_3);
int PIN16(int param_1);
void CopySamples(undefined4 *param_1,undefined4 *param_2,uint param_3,char param_4,char param_5,char param_6,uint param_7);
void WAVAudioStream::MSADecode(int param_1,byte *param_2,short *param_3,int param_4,short *param_5);
void IMADecode4(byte *param_1,undefined2 *param_2,int param_3,short *param_4);
void IMADecode3(byte *param_1,undefined2 *param_2,int param_3,short *param_4);
undefined4 WAVAudioStream::StartPlaying(int param_1,char param_2);
uint WAVAudioStream::GetBits(int param_1,uint param_2);
int WAVAudioStream::GetSamples(int param_1,undefined4 *param_2,int *param_3);
uint AUAudioStream::StartPlaying(int param_1,byte param_2);
uint AUAudioStream::GetBits(int param_1,uint param_2);
int AUAudioStream::GetSamples(int param_1,undefined4 *param_2,uint *param_3);
uint AIFFAudioStream::ReadIEEEFormat(int param_1);
undefined4 AIFFAudioStream::StartPlaying(int param_1,char param_2);
int AIFFAudioStream::GetSamples(int param_1,undefined4 *param_2,int *param_3);
void GSMAudioStream::StartPlaying(int param_1,char param_2);
int GSMAudioStream::GetSamples(int param_1,ushort *param_2,int *param_3);
void AudioDecoder::StartAudioStream(int param_1,undefined4 param_2);
undefined4 AudioStream::AllocateStreamBuffer(int param_1,int param_2);
int AudioStreamCallback(short param_1,int **param_2);
undefined4 AudioDecoder::StartAudioOutput(int param_1);
void Audio::SetPriority(int param_1,uint param_2);
void GSMAudioStream::~GSMAudioStream(int **param_1,uint param_2);
void AUAudioStream::~AUAudioStream(int **param_1,uint param_2);
void AIFFAudioStream::~AIFFAudioStream(int **param_1,uint param_2);
void WAVAudioStream::~WAVAudioStream(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int quanp2(int param_1);
void g72x_init_chan_state(undefined4 *param_1);
void g72x_init_state(undefined4 *param_1,int param_2,uint param_3);
void g72X_decoder(uint param_1,int *param_2,undefined2 *param_3,int param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int gsm_sub(short param_1,short param_2);
int gsm_asr(ushort param_1,short param_2);
int gsm_add(short param_1,short param_2);
uint gsm_mult_r(short param_1,short param_2);
int gsm_asl(ushort param_1,short param_2);
void Postprocessing(int param_1,ushort *param_2);
void read_2_triplets(uint param_1,uint *param_2);
void read_3_triplets(uint param_1,uint *param_2);
undefined4 gsm_decode(int param_1,byte *param_2,ushort *param_3);
int Step(short param_1,short param_2,short param_3,short param_4);
void Decoding_of_the_coded_Log_Area_Ratios(undefined4 *param_1,undefined2 *param_2);
void Coefficients_0_12(short *param_1,short *param_2,undefined2 *param_3);
void Coefficients_13_26(short *param_1,short *param_2,undefined2 *param_3);
void Coefficients_27_39(short *param_1,short *param_2,undefined2 *param_3);
void Coefficients_40_159(undefined2 *param_1,undefined2 *param_2);
void LARp_to_rp(short *param_1);
void Short_term_synthesis_filtering(int param_1,int param_2,int param_3,int *param_4,short *param_5);
void Gsm_Short_Term_Synthesis_Filter(int param_1,undefined4 *param_2,int *param_3,short *param_4);
void Gsm_Long_Term_Synthesis_Filtering(int param_1,int param_2,int param_3,int param_4,undefined2 *param_5);
void APCM_inverse_quantization(int *param_1,int param_2,short param_3,int *param_4);
void RPE_grid_positioning(int param_1,undefined4 *param_2,undefined4 *param_3);
void Gsm_RPE_Decoding(undefined4 param_1,int param_2,int param_3,int *param_4,undefined4 *param_5);
void LateBoot(undefined4 param_1,undefined *param_2,undefined4 param_3,undefined4 *param_4);
void TaskMaster(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void ResetWatchPup(void);
undefined4 GetChipVersion(void);
void Reboot(uint param_1);
void DetermineBootType(void);
undefined4 ColdBooted(void);
bool ResetAfterColdBoot(void);
bool HaveTellyscript(void);
void CrashCheckHeap(int param_1);
undefined Watchdog(char param_1);
void Die(void);
void CacheParityErrorNotify(void);
void GetRandom(void);
bool ROMCodeChecksumOK(int *param_1);
bool ROMFSChecksumOK(uint param_1);
bool FSChecksumOK(int *param_1);
void ComputeCPUSpeed(void);
int TimeVBLs(int param_1);
void PollVBL(void);
void InitEECardIntf(void);
int GetEECardIntf(void);
bool EECardWrite(uint param_1,uint param_2);
uint EECardRead(uint param_1);
undefined4 * EECard::EECard(undefined4 *param_1);
void EECard::~EECard(int **param_1,uint param_2);
undefined4 EECard::Read(int *param_1,undefined *param_2,int param_3,uint param_4);
undefined4 EECard::Write(int *param_1,byte *param_2,int param_3,uint param_4);
undefined4 EECard::IsFormatted(void);
undefined4 EECard::Format(void);
void EECard::Init(int param_1,undefined4 param_2);
void EECard_IICIntf::Init(void);
bool EECard_IICIntf::IsEECard(int *param_1);
undefined8 EnableFences(undefined4 param_1);
undefined4 DisableFences(undefined4 param_1);
void CollapseFences(void);
uint AddressToBankOffset(uint param_1);
undefined * AddressToBankBase(uint param_1);
undefined4 Stride(int param_1);
int BlockIndex(int param_1,uint param_2,uint param_3);
undefined4 BlockSize(int param_1,uint param_2,uint param_3);
int BlockStart(int param_1,uint param_2,uint param_3);
uint OffsetIntoBlock(int param_1,uint param_2,uint param_3);
undefined * BankSelectToBankBase(int param_1);
void EnableCEDelayMode(char param_1);
uint EraseBlock(int *param_1,uint param_2,uint param_3);
uint ProgramBlock(int *param_1,uint param_2,uint *param_3,uint param_4);
uint EraseAndProgramBlock(int *param_1,uint param_2,uint *param_3,uint param_4,uint param_5);
bool FlashIsPresent(int param_1);
undefined * OffsetToFlashAddress(int param_1,int param_2);
undefined4 AppFlashWidthAndCachedStart(uint *param_1);
uint AppFlashSize(void);
uint CheckForBungedMX(int *param_1);
undefined4 StartChipEraseFlash(uint param_1,uint **param_2);
undefined4 PollChipEraseStatus(uint **param_1);
undefined4 CopyFromFlash(undefined4 *param_1,undefined4 *param_2,uint param_3);
uint CopyToFlash(uint *param_1,int **param_2,uint param_3,uint param_4);
uint CopyToBlock(uint *param_1,int **param_2,uint param_3,uint param_4);
uint EraseFlash(uint param_1,uint param_2,uint param_3);
uint EraseInBlock(uint param_1,uint param_2,uint param_3);
void AllocateFlashBuf(uint param_1);
void FreeFlashBuf(int **param_1);
void copy16to32(undefined4 *param_1,undefined2 *param_2,int param_3);
void CopyFromFlash(int param_1,undefined4 *param_2,undefined4 *param_3,uint param_4);
void FlashPrologue(void);
void FlashEpilogue(void);
void WriteEnableFlash(char param_1);
uint * IdentifyFlash(uint param_1,uint **param_2);
uint * idFlash(int *param_1);
void ValidateROMTimingParams(void);
int * idFlash_16(uint *param_1);
int * lookupDesc_16(int param_1,uint param_2,uint param_3);
void EraseBlock_16(int *param_1,uint *param_2);
undefined4 EraseBlock_16_AMD_MX_Common(int param_1,uint *param_2);
void EraseBlock_16_AMD(int param_1,uint *param_2);
void EraseBlock_16_MX(int param_1,uint *param_2);
int ProgramBlock_16(int *param_1,uint *param_2,uint *param_3,int param_4);
undefined4 WaitAMDStatus_16(uint *param_1,uint param_2,uint param_3,uint param_4);
int ProgramBlock_16_AMD(int param_1,uint *param_2,uint *param_3,int param_4);
undefined8 ProgramBlock_16_MX(int param_1,uint *param_2,uint *param_3,int param_4);
void InitGPIOs(void);
undefined4 WriteOutputs(undefined4 param_1,char param_2);
bool ReadOutputs(uint param_1);
bool ReadInputs(uint param_1);
void SetVideoEncoderReset(char param_1);
void SetRFUPower(char param_1);
uint GetRFUPower(void);
void SetAudioMute(char param_1);
undefined4 GetVideoConnectionType(void);
void SelectAudioInputDevice(char param_1);
bool GetDAALineStatus(void);
bool GetDAASnoop(void);
bool GetDAARingDetect(void);
bool GetAFTOutput(void);
void SetAudioCodecCS_N(char param_1);
void SetAudioCodecCCLK(char param_1);
void SetAudioCodecCDATA(char param_1);
bool GetDelayedPowerOK(void);
void SetModemReset(char param_1);
uint MicrophoneConnected(void);
uint IRBlasterConnected(void);
void ConfigVidDecoderGPOutputs(byte param_1,byte param_2);
void SetVideoBypass(char param_1);
void SetBoxLEDs(uint param_1);
uint GetBoxLEDs(void);
void SetBoxMessageLED(char param_1);
void SetConnectedLEDState(int param_1);
void SetMessageLEDState(int param_1);
undefined4 GetMessageLEDState(void);
void SaveMessageLEDState(uint param_1);
void RestoreMessageLEDState(void);
undefined4 GetConnectedLEDState(void);
void FlashConnectLED(void);
void FlashPowerLED(void);
void FlashMessageLED(void);
void SetPowerLEDState(int param_1);
undefined4 ReadModemReg(undefined4 *param_1);
void WriteModemReg(undefined4 *param_1,undefined4 param_2);
undefined4 InitModem(void);
byte ModemGetCD(void);
void MonitorCD(void);
void ModemSetDTR(char param_1);
undefined ModemGetDTR(void);
void EnableModemInterrupts(void);
void DisableModemInterrupts(void);
void ModemReset(void);
uint ModemFIFOCount(void);
bool putchar_modem(undefined param_1);
undefined4 putbuf_modem(undefined *param_1,uint param_2);
int getbuf_modem(undefined *param_1,int param_2);
void WaitUSec(int param_1);
uint USecDelayTime(int param_1);
uint MSecDelayTime(int param_1);
uint HWTimeInMicroSecs(uint param_1);
uint HWTimeInMilliSecs(uint param_1);
void InitIICIntf(void);
undefined4 GetIICIntf(void);
bool IICWrite(uint param_1,uint param_2,uint param_3);
uint IICRead(uint param_1,uint param_2);
bool EarlyIICWrite(uint param_1,uint param_2,uint param_3);
void IIC_HWIntf::IIC_HWIntf(undefined4 *param_1);
void IIC_HWIntf::Init(int param_1);
bool IIC_HWIntf::IICWrite(int *param_1,uint param_2,uint param_3,uint param_4);
uint IIC_HWIntf::IICRead(int *param_1,uint param_2,uint param_3);
void IIC_HWIntf::Start(int *param_1);
void IIC_HWIntf::Restart(int *param_1);
void IIC_HWIntf::Stop(int *param_1);
bool IIC_HWIntf::SendByte(int *param_1,uint param_2);
uint IIC_HWIntf::ReadByte(int *param_1,char param_2);
void IIC_HWIntf::WaitUSec(int *param_1,int param_2);
void IIC_HWIntf::SendBit(int *param_1,undefined param_2);
void IIC_HWIntf::SetClk(int *param_1,char param_2);
void InitIR(void);
void InitIRHardware(void);
undefined4 KeyCanRepeat(char param_1,byte param_2);
void IRIdle(void);
void HandleSonyIR(int param_1,uint *param_2);
void HandlePhilipsIR(int param_1,uint *param_2);
void HandleEchoStarIR(int param_1,uint *param_2);
void ParseIRKBData(byte param_1,byte param_2,uint param_3);
void IRKBMake(uint param_1,uint param_2,undefined4 param_3);
void IRKBBreak(undefined4 param_1,uint param_2);
undefined4 RemoteManufacturer(uint *param_1);
void Sony_ParseAndPost(undefined4 param_1,undefined4 param_2);
void Philips_ParseAndPost(undefined4 param_1,undefined4 param_2);
void SetSampleInterval(int param_1);
int TicksToUS(int param_1);
void DrainIRInFIFO(void);
void InitSoloIR(void);
undefined4 C_IRIntHandler(void);
void CreateIRTask(void);
void InterpretIRSamplesTask(void);
void InterpretIRSamples(void);
void InitDecodeSony(void);
void SonyBitUpdate(int param_1);
void ValidateSonyData(void);
void DecodeSony(int param_1,uint param_2);
void InitDecodeSejin(void);
void SejinTestBitTime_0(int param_1,uint param_2,int param_3,undefined param_4);
void SejinTestBitTime_1(int param_1,uint param_2,int param_3,undefined param_4);
void ValidateSejinData(void);
void SejinGetBit(int param_1);
void DecodeSejin(int param_1,uint param_2);
void InitDecodePhilips(void);
byte PhilipsTimeToT(uint param_1);
void PhilipsGetBit(int param_1,int param_2);
void PhilipsGetToggle(int param_1,int param_2);
void ValidatePhilipsData(void);
void DecodePhilips(int param_1,uint param_2);
void CheckPhilipsDecoder(void);
void InitDecodeEchoStar(void);
void PostEchoStar(int param_1,int param_2,int param_3);
undefined4 UpdateEchoStarBits(int param_1);
void PostEchoStarBits(void);
void DecodeEchoStar(int param_1,uint param_2);
uint * GetIRForDiags(undefined *param_1);
void InitIRForDiags(void);
void ParallelGetByte(void);
void PekoeParallelGetByte(void);
uint ParallelGet4Bytes(void);
undefined4 PPortPeriphInit(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4);
void PPortResetAndEnable(void);
undefined4 PPortTwistedCableConnected(void);
undefined4 PPortFinishECPNegotiation(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
bool PPortGotUserInterrupt(void);
void PPortPeripheralGetByte(void);
undefined4 MaxiBrowserBase(void);
undefined4 MaxiBrowserSize(void);
undefined4 GetLastMaxiBrowserBase(void);
void SetLastMaxiBrowserBase(undefined4 param_1);
undefined4 GetLastMaxiBrowserSize(void);
void SetLastMaxiBrowserSize(undefined4 param_1);
undefined4 ValidateMaxiBrowser(void);
bool ValidateTier3DiagImage(void);
undefined8 InvalidateMaxiBrowser(void);
undefined4 MaxiBrowserVersion(void);
void BootRAMImage(undefined *param_1);
void SetROMTiming(void);
void SetROMTimingManual(int param_1);
void InitSiliconSerialNumber(void);
bool SiSerialNumCRC(byte *param_1);
void ReadPrimaryNV(undefined4 *param_1,uint param_2,uint param_3);
void WritePrimaryNV(uint *param_1,uint param_2,uint param_3);
undefined GetPrimaryNVSelect(void);
void TogglePrimaryNVSelect(void);
void ReadSecondaryNV(undefined *param_1,uint param_2,int param_3);
void WriteSecondaryNV(byte *param_1,uint param_2,int param_3);
undefined GetSecondaryNVSelect(void);
void ToggleSecondaryNVSelect(void);
void ReadTier3DiagStorage(int param_1,uint param_2,uint param_3);
void WriteTier3DiagStorage(int param_1,uint param_2,uint param_3);
uint ReadBrowserStorage(byte *param_1,uint param_2,uint param_3);
uint WriteBrowserStorage(uint *param_1,uint param_2,uint param_3);
undefined GetBrowserSelect(void);
void ToggleBrowserSelect(void);
undefined GetSelect(uint param_1);
undefined BrowserImageDiskError(void);
void ToggleSelect(uint param_1);
undefined4 GetSysConfigRaw(void);
bool TVStandard(void);
bool DiskfulSystem(void);
uint BoardRevision(void);
uint SystemChipRevision(void);
void InitRIO(void);
void OptimizeTurnaroundTime(void);
void OptimizeModemTiming(void);
void InitWTVPort(void);
undefined4 EnableInterrupt(int param_1);
void DisableInterrupt(int param_1);
undefined4 ClearInterrupt(int param_1);
void ClearAllInterrupts(void);
void DisableAllInterrupts(void);
void SetRIOInterruptPolarity(int param_1,char param_2);
void InstallDefaultIntHandlers(void);
int Dispatch4640Int(uint param_1);
undefined4 TimerDispatchProc(void);
int SoloDispatchProc(void);
void VideoIntDispatcher(void);
void AudioIntDispatcher(void);
void RIODevIntDispatcher(void);
void SoloDevIntDispatcher(void);
void SoloTimerIntDispatcher(void);
void FenceIntDispatcher(void);
int SecondaryDispatch(uint *param_1,int param_2,uint *param_3,uint *param_4);
undefined4 DefaultIntHandler(int param_1);
int InstallUpgrade(int param_1,char param_2);
undefined4 AuthenticateUpgradeSignature(int param_1,undefined4 param_2,undefined4 param_3);
void SetUpgradePath(char *param_1);
void SaveUpgradePath(void);
void RestoreUpgradePath(void);
undefined4 main(undefined4 param_1,undefined *param_2,undefined4 param_3,undefined4 *param_4);
undefined4 * InitParallelPort(void);
void InitHeap(void);
void InitStack(undefined4 param_1);
void InitExceptions(void);
void UpdateAG(void);
void CrashCounter(void);
void ResetCrashCounter(void);
void InitDebugIO(void);
void InitPekoeSerial(void);
void PekoeSerialOut(char param_1);
int PekoeSerialIn(void);
void SizeMem(void);
void ProtectMemory(void);
void CommonFenceHandler(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 J1FenceReadHandler(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 J1FenceWriteHandler(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 J2FenceReadHandler(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 J2FenceWriteHandler(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 LowMemReadHandler(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 LowMemWriteHandler(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 BusTimeoutHandler(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ParallelDriver::ParallelDriver(undefined4 *param_1,undefined4 param_2);
undefined4 ParallelDriver::InitDevice(int **param_1,char param_2);
undefined4 ParallelDriver::OpenDriver(int **param_1);
undefined4 ParallelDriver::CloseDriver(int **param_1);
undefined4 ParallelDriver::AcquireDevice(void);
undefined4 ParallelDriver::ReleaseDevice(void);
void ParallelDriver::CheckBlink(int **param_1);
bool ParallelDriver::IsInitialized(int param_1);
int ParallelDriver::GetTimeSinceLastInit(int param_1);
void ParallelDriver::SetParallelLED(int **param_1,undefined param_2);
void ParallelDriver::SetDataBits(int **param_1,undefined param_2);
undefined ParallelDriver::GetDataBits(int **param_1);
void ParallelDriver::GetStatusBits(int **param_1);
void ParallelDriver::SetAndClrControl(int **param_1);
void ParallelDriver::GetControlBits(int **param_1);
void ParallelDriver::SetDataDirection(int **param_1,undefined param_2);
uint ParallelDriver::GetDeviceInfoSize(int **param_1,int *param_2);
int ParallelDriver::GetDeviceInfo(int **param_1,byte *param_2,int param_3);
undefined4 ParallelDriver::GetPrinterStatus(int **param_1);
int ParallelDriver::WaitForPrinter(int **param_1,byte param_2,byte param_3);
int ParallelDriver::PutChar(int **param_1,undefined param_2);
uint ParallelDriver::GetStatusAsNibbleData(int **param_1);
int ParallelDriver::NibbleModeGetChar(int **param_1,byte *param_2);
uint ParallelDriver::EnterNibbleMode(int **param_1,char param_2);
int ParallelDriver::ExitNibbleMode(int **param_1);
void ParallelDriver::Enter_ECP_Mode(int **param_1);
void ParallelDriver::Change_ECP_Channel(int **param_1,byte param_2);
void ParallelDriver::Fwd_to_Rev_Trans(int **param_1);
int ParallelDriver::Rev_to_Fwd_Trans(int **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int ParallelDriver::ECP_GetChar(int **param_1,undefined4 param_2);
int ParallelDriver::Exit_ECP_Mode(int **param_1);
int ParallelDriver::GetECPModeStatus(int **param_1,byte *param_2,int *param_3,byte *param_4);
int GetSmartCardIntf(void);
void InitSoloSmartCardIntf(void);
void SoloSmartCardHWIntf::SoloSmartCardHWIntf(undefined4 *param_1);
void SoloSmartCardHWIntf::Init(int param_1);
void SoloSmartCardHWIntf::PowerOn(int *param_1);
int SoloSmartCardHWIntf::PowerOn(int *param_1,undefined *param_2);
undefined4 SoloSmartCardHWIntf::PowerOff(int param_1);
int SoloSmartCardHWIntf::GetCardType(int *param_1);
int SoloSmartCardHWIntf::GetCard(int *param_1);
void SoloSmartCardHWIntf::MemCardInit(int param_1);
int SoloSmartCardHWIntf::AnswerReset(int param_1,undefined *param_2);
void SoloSmartCardHWIntf::IntHandlerInstall(int param_1,char param_2);
undefined4 SoloSmartCardHWIntf::SmartCard0IntHandler(void);
undefined4 SoloSmartCardHWIntf::GPIOIntHandler(void);
void AllocateAudioBuffers(void);
void InitAudio(void);
void InitAudioClock(void);
void StartAudioDMA(void);
void StopAudioDMA(void);
undefined8 audioInterruptHandler(void);
void InitAudioCodec(void);
void AudioCodecSelectOut(undefined4 param_1);
void AudioCodecSelectIn(undefined4 param_1);
void WriteCodecControl(uint param_1,uint param_2);
void AllocateAudioInputBuffers(void);
void InitAudioInput(void);
undefined4 StartAudioInputDMA(void);
undefined4 audioInputIntHandler(void);
void InitSucSerial(void);
void SucSerialOut(char param_1);
int SucSerialIn(char param_1);
void EnableCPUInts(undefined4 param_1);
uint DisableCPUInts(void);
void UseSystemStack(void);
uint FixMul(int param_1,int param_2);
undefined8 FixMulTrunc(int param_1,int param_2);
uint FPMul(int param_1,int param_2,uint param_3);
undefined4 FixDiv(int param_1,int param_2);
undefined4 FPDiv(int param_1,int param_2);
uint FractMul(int param_1,int param_2);
void SystemSleep(void);
void CallDebugger(void);
void EnableWatchdog(void);
void DisableWatchdog(void);
void _size_cache(void);
void StashCacheInfo(void);
void FlushAndInvalAllCaches(void);
void FlushDCache(void);
void WBAndInvalRange(uint param_1,int param_2);
undefined4 FetchCacheErrorReg(void);
undefined4 FetchConfig(void);
void SetCompare(undefined4 param_1);
undefined4 FetchCounter(void);
undefined4 FetchSR(void);
void SetSR(undefined4 param_1);
void move_exc_code(void);
void enable_cpu_ints(uint param_1);
uint disable_cpu_ints(uint param_1);
void debuggerContext(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void DupeFlashCode(int param_1,int param_2);
void CallRAMFlashFunction(void);
void DupeIdentifier(void);
void ReadSiliconSerialNumber(int param_1,uint *param_2);
void Read1WireWord(int param_1,undefined4 param_2,int param_3);
void DelayUS(int param_1);
void InitCrashLog(void);
undefined * GetCrashLogBase(void);
undefined * LogCrash(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ShowMyProgress(void);
void SetCharIO(byte param_1);
undefined GetCharIO(void);
int putchar(int param_1);
int getchar(void);
int _float_test(uint param_1);
int _float_int(uint *param_1,int param_2);
undefined4 _float_unscale(int *param_1,uint *param_2);
undefined4 _float_scale(uint *param_1,int param_2);
float _float_poly(float param_1,undefined4 param_2,float *param_3,int param_4);
float _float_tento(float param_1,undefined4 param_2,uint param_3);
uint _float_sign(uint param_1);
float ceilf(float param_1);
float floorf(float param_1);
float fabsf(float param_1);
float fmodf(float param_1,float param_2);
float sqrtf(float param_1);
float tanf(float param_1);
float atanf(float param_1,undefined4 param_2);
float atan2f(float param_1,float param_2,undefined4 param_3);
float _Atanf(float param_1,undefined4 param_2,uint param_3);
void acosf(float param_1,undefined4 param_2);
void asinf(float param_1,undefined4 param_2);
float _Asinf(float param_1,undefined4 param_2,uint param_3);
void logf(float param_1,undefined4 param_2);
float _Logf(float param_1,undefined4 param_2,int param_3);
void cosf(float param_1,float *param_2);
void sinf(float param_1,float *param_2);
float _Sinf(float param_1,float *param_2,int param_3);
float expf(float param_1);
float powf(float param_1,float param_2);
uint _Exp(float *param_1,int param_2);
undefined4 memcmp(byte *param_1,byte *param_2,int param_3);
undefined4 * memmove(undefined4 *param_1,undefined4 *param_2,uint param_3);
uint * memset(uint *param_1,byte param_2,uint param_3);
char * memchr(char *param_1,char param_2,int param_3);
void memcpy(undefined4 *param_1,undefined4 *param_2,uint param_3);
void _vprintf_char(int *param_1);
void _vprintf_int(int *param_1);
void _vprintf_float(int *param_1);
void _vprintf_string(char **param_1);
int _vprintf_main(undefined *param_1,undefined4 param_2,byte *param_3,uint param_4);
undefined4 _vprintf_writen(undefined4 param_1,char *param_2,int param_3);
void fputc(int param_1);
uint _vfprintf_writen(uint param_1,char *param_2,int param_3);
int _vsprintf_writen(int *param_1,undefined4 *param_2,uint param_3);
void vnullprintf(byte *param_1,uint param_2);
void vprintf(byte *param_1,uint param_2);
void vfprintf(undefined4 param_1,byte *param_2,uint param_3);
int vsprintf(int param_1,byte *param_2,uint param_3);
int vsnprintf(int param_1,int param_2,byte *param_3,uint param_4);
void nullprintf(byte *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void printf(byte *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int sprintf(int param_1,byte *param_2,undefined4 param_3,undefined4 param_4);
int snprintf(int param_1,int param_2,byte *param_3,undefined4 param_4);
uint rand16(void);
uint rand(void);
void srand(undefined4 param_1);
char * _Stoul(byte *param_1,byte **param_2,uint param_3);
float _Stod(float *param_1,float **param_2);
int strspn(char *param_1,char *param_2);
char * strstr(char *param_1,char *param_2);
void strtod(float *param_1,float **param_2);
char * strtol(byte *param_1,byte **param_2,uint param_3);
char * strcpy(char *param_1,char *param_2);
char * strncpy(char *param_1,char *param_2,int param_3);
char * strcat(char *param_1,char *param_2);
char * strchr(char *param_1,char param_2);
undefined4 strcmp(char *param_1,char *param_2);
undefined4 strncmp(char *param_1,char *param_2,int param_3);
char * strrchr(char *param_1,char param_2);
int strlen(char *param_1);
uint * strdup(char *param_1);
bool _sscanf_char(char **param_1,int *param_2,char param_3,uint *param_4,int param_5,int param_6);
undefined4 _sscanf_float(char **param_1,int *param_2,char param_3,uint *param_4,int param_5,int param_6);
undefined4 _sscanf_int(byte **param_1,int *param_2,char param_3,uint *param_4,int param_5,int param_6,int param_7);
bool _sscanf_scanset(char **param_1,int *param_2,char **param_3,uint *param_4,int param_5,int param_6);
bool _sscanf_string(byte **param_1,int *param_2,char param_3,uint *param_4,int param_5,int param_6);
int _sscanf(byte *param_1,byte *param_2,uint *param_3);
void sscanf(byte *param_1,byte *param_2,undefined4 param_3,undefined4 param_4);
void gmtime(int *param_1);
uint mktime(int *param_1);
void strftime(int param_1,int param_2,char *param_3,int *param_4);
void CatchExceptions(undefined4 param_1);
undefined4 setjmp(int param_1);
undefined8 longjmp(int param_1,undefined4 param_2);
undefined * _longjmp(void);
void StackCrawl(uint **param_1);
void DeviceManager::DeviceManager(undefined4 *param_1);
void DeviceManager::ProbeExpansionBus(uint **param_1);
undefined4 DeviceManager::RegisterDevice(uint **param_1,uint param_2,uint param_3);
bool DeviceManager::DevicePresent(int *param_1,int param_2);
int DeviceManager::GetDeviceBaseAddr(int *param_1,int param_2);
int DeviceManager::DeviceLookup(int *param_1,int param_2);
void RegisterIntHandler(int param_1,undefined4 param_2,undefined4 param_3,undefined4 *param_4);
void CreateSemaphore(void);
void DeleteSemaphore(int **param_1);
undefined4 SemTake(int *param_1,char param_2);
void SemGive(int *param_1);
uint CreateSignal(void);
void DeleteSignal(uint param_1);
void SendSignal(int **param_1,uint param_2);
int * WaitSignal(uint param_1);
int ** CreateTask(int *param_1,int *param_2,int *param_3,char *param_4,int *param_5);
void Suicide(void);
void DeleteTask(int **param_1);
void LaunchTask(int param_1);
void SwapOut(int param_1);
void AddTask(int **param_1,int **param_2);
void RemoveTask(int *param_1);
int * NextTask(int **param_1);
void CSwap(void);
void Yield(char param_1);
void ContextSwitch(void);
void EnterCritical(void);
void ExitCritical(void);
void SetTaskTimer(undefined4 param_1);
void WaitTaskTimer(int param_1);
void RoundRobin(void);
void CheckTaskTimers(void);
void SleepTask(int **param_1,int **param_2);
void WakeupTask(int **param_1);
void IdleTask(void);
void CreateTaskMessageQueue(int param_1,int param_2);
void PostTaskMessage(int param_1,int param_2,int param_3,int param_4);
undefined4 GetTaskMessage(int param_1,undefined4 *param_2);
void TimeTest1(void);
void TimeTest2(void);
void TestTask(void);
void TestKernel(void);
undefined8 CheckTasks(void);
undefined8 Launch(void);
undefined4 Land(void);
uint sine1024(uint param_1);
void cosine1024(int param_1);
void BoxParallelHWIntf::BoxParallelHWIntf(undefined4 *param_1);
undefined4 BoxParallelHWIntf::InitInterface(int *param_1);
undefined BoxParallelHWIntf::FindCard(int *param_1);
void SoloParallelHWIntf::SoloParallelHWIntf(undefined4 *param_1);
undefined4 SoloParallelHWIntf::InitInterface(int *param_1);
void InternalEncoder::InternalEncoder(undefined4 *param_1);
undefined4 InternalEncoder::Init(void);
void InternalEncoder::Reset(void);
undefined4 * P7187Encoder::P7187Encoder(undefined4 *param_1);
void P7187Encoder::Init(int param_1);
void P7187Encoder::Reset(void);
void P7187Encoder::Enable(int param_1);
void P7187Encoder::Disable(int param_1);
void VideoDriver::Init(char *param_1);
void VideoDriver::EnableVideo(char *param_1);
void VideoDriver::DisableVideo(int param_1);
void VideoDriver::UseFrameBuffer(int param_1,undefined4 *param_2);
undefined4 VideoDriver::GetFrameBuffer(int param_1,int param_2);
uint VideoDriver::GetDisplayPageBase(int param_1,int param_2);
void VideoDriver::DrainVidQ(int param_1);
void VideoDriver::SetDisplayActiveAreaOffset(int param_1,int param_2,int param_3);
void VideoDriver::RestoreDisplayState(int param_1);
void VideoDriver::SaveDisplayState(int param_1);
uint VideoDriver::DisplayPage(int param_1,int param_2);
int VideoDriver::GetDisplayRowBytes(int param_1);
int VideoDriver::GetCurrentDisplayLine(void);
undefined4 VideoDriver::GetDisplayWidth(int param_1);
undefined4 VideoDriver::GetDisplayHeight(int param_1);
void VideoDriver::EnableVBLInterrupts(undefined4 param_1);
undefined4 VideoDriver::DisableVBLInterrupts(void);
undefined4 VideoDriver::VBLIntHandler(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void VideoDriver::SetBlankColor(undefined4 param_1,undefined4 param_2);
void FrameBuffer::FrameBuffer(undefined4 *param_1);
void FrameBuffer::Init(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7);
void FrameBuffer::Erase(undefined4 *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * AddressList::AddressList(undefined4 *param_1);
void AddressList::~AddressList(int **param_1,uint param_2);
char * AddressList::GetAddressAt(int param_1,int param_2);
char * AddressList::GetNameAt(int param_1,int param_2);
int AddressList::GetCount(int param_1);
void AddressList::Initialize(void);
void AddressList::Load(int param_1);
void AddressList::Reset(int param_1);
undefined4 AddressList::SetHeader(int param_1,byte *param_2,byte *param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int * CreateAuthorizationStream(void);
void AuthorizationList::Add(int *param_1,byte *param_2,char *param_3,char *param_4);
uint * AuthorizationList::NewAuthorization(int *param_1,byte *param_2);
void AuthorizationList::Remove(int *param_1,byte *param_2);
void AuthorizationList::Reset(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void SetConnectionLogBool(uint param_1);
bool GetConnectionLogBool(uint param_1);
void IncrementConnectionLogShort(int param_1);
void IncrementConnectionLogLong(int param_1);
void InitializeConnectionLog(void);
void ResetConnectionLog(void);
undefined * GetConnectionLogData(void);
int GetConnectionLogLength(void);
void SetConnectionLog(undefined4 *param_1,uint param_2);
int GetFlags(int param_1);
void AppendToCL(undefined4 *param_1,uint param_2);
void AppendStringToCL(undefined4 *param_1);
void AppendPhoneSettingsToCL(undefined4 *param_1);
int GetPhoneSettingsInCLSize(char *param_1);
void AddRunScriptToConnectionLog(undefined4 param_1,undefined4 param_2);
void AddDialInFailureToConnectionLog(undefined4 param_1);
int GetDialInFailureRecordSize(int param_1);
void AddDialInSuccessToConnectionLog(void);
int GetDialInSuccessRecordSize(int param_1);
void AddDisconnectionToConnectionLog(undefined param_1);
void AddNVRAMWriteToConnectionLog(void);
void AddTellyDownloadErrorToConnectionLog(void);
void AddNukedScriptToConnectionLog(undefined4 param_1,undefined4 param_2);
void AddResetNVToConnectionLog(void);
void AddBlackHoleToConnectionLog(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int GetBlackHoleRecordSize(int param_1);
void AddPAPRetryCountToConnectionLog(undefined4 param_1);
void AddSetClockToConnectionLog(int param_1);
void AddPowerOnToConnectionLog(undefined param_1);
int GetRecordSize(byte *param_1);
void AddSpecialKeyPressToConnectionLog(ushort param_1);
undefined4 * CookieList::CookieList(undefined4 *param_1);
void CookieList::~CookieList(int **param_1,uint param_2);
undefined4 CookieList::CreateStream(int **param_1);
void CookieList::Append(int **param_1,char *param_2,byte *param_3);
bool DomainMatch(byte *param_1,char *param_2);
bool PathMatch(byte *param_1,byte *param_2);
byte * CookieList::Exists(int **param_1,char *param_2,byte *param_3,char param_4);
void CookieList::Initialize(void);
void CookieList::Load(void);
undefined4 CookieList::LoadCookie(int **param_1,int *param_2,char param_3);
uint * CookieList::NewCookie(int **param_1,int *param_2);
int * CookieList::NewCookieResource(int **param_1,byte *param_2,byte *param_3);
int * CookieList::NewCookieResource(int **param_1,int *param_2);
bool CookieList::GetPutsPending(int param_1);
void CookieList::AddPendingPut(int param_1,int *param_2);
void CookieList::Reset(int **param_1);
void CookieList::SendToServer(int param_1,byte *param_2,byte *param_3,byte *param_4,byte *param_5);
void ParseSetCookie(byte *param_1,byte **param_2,char **param_3,char **param_4,char **param_5);
undefined4 CookieList::SetAttribute(int **param_1,byte *param_2,byte *param_3,int *param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * FavoritesFolderList::FavoritesFolderList(undefined4 *param_1);
void FavoritesFolderList::~FavoritesFolderList(int **param_1,uint param_2);
uint * FavoritesFolderList::GetFolderAt(int param_1,int param_2);
int FavoritesFolderList::GetCount(int param_1);
void FavoritesFolderList::Initialize(void);
void FavoritesFolderList::Load(int param_1);
void FavoritesFolderList::Reset(int param_1);
undefined4 FavoritesFolderList::SetHeader(int param_1,byte *param_2,byte *param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void HTTPCommand::HTTPCommand(undefined4 *param_1);
void HTTPCommand::~HTTPCommand(int **param_1,uint param_2);
undefined4 HTTPCommand::CheckBodyComplete(int param_1);
bool HTTPCommand::Idle(int *param_1);
void HTTPCommand::IdleCreateStream(int *param_1);
void HTTPCommand::IdleGetCookieBegin(int *param_1);
void HTTPCommand::IdleGetCookieEnd(int *param_1);
void HTTPCommand::IdleReadBody(int param_1);
void HTTPCommand::IdleReadHeader(int *param_1);
void HTTPCommand::IdleReadResponse(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void HTTPCommand::IdleWaitForAuthorize(int param_1);
void HTTPCommand::IdleWriteCommandEnd(int *param_1);
void HTTPCommand::Redirect(int param_1,char *param_2);
char * ParseWWWAuthenticate(byte *param_1);
uint HTTPCommand::SetHeader(int param_1,byte *param_2,byte *param_3);
void HTTPCommand::WriteHeaders(int param_1,int *param_2);
void HTTPGetCommand::HTTPGetCommand(undefined4 *param_1);
void HTTPGetCommand::~HTTPGetCommand(int **param_1,uint param_2);
void HTTPGetCommand::IdleWriteCommandBegin(int *param_1);
void HTTPPostCommand::HTTPPostCommand(undefined4 *param_1);
void HTTPPostCommand::~HTTPPostCommand(int **param_1,uint param_2);
void HTTPPostCommand::IdleWriteCommandBegin(int *param_1);
void HTTPPostCommand::IdleWriteCommandEnd(int *param_1);
int HTTPProtocol::HTTPProtocol(int param_1);
void HTTPProtocol::~HTTPProtocol(int **param_1,uint param_2);
void HTTPProtocol::Initialize(void);
undefined4 * HTTPProtocol::NewGetCommand(undefined4 param_1,int *param_2);
undefined4 * HTTPProtocol::NewPostCommand(undefined4 param_1,int *param_2);
void HTTPSProtocol::IdleConnectEnd(int param_1);
void HTTPSProtocol::IdleCommandBegin(int param_1);
void HTTPSProtocol::SetSecurityInfo(int param_1);
void HTTPSProtocol::~HTTPSProtocol(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Network::Network(undefined4 *param_1);
void Network::~Network(int **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
void Network::Activate(int param_1,int param_2);
undefined4 Network::AssignProtocol(int param_1,int *param_2);
void Network::BeginDialing(int param_1,char param_2);
undefined4 Network::BlackHoleRouterDetected(int param_1);
undefined4 Network::ChooseProtocol(int param_1,int *param_2);
void Network::Deactivate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 Network::DispatchInput(int param_1,uint *param_2);
int Network::GetConnectionCount(int param_1,int param_2);
void Network::GetSessionKey1(int param_1,undefined4 param_2);
void Network::GetSessionKey2(int param_1,undefined4 param_2);
int Network::GetTicksSinceActivateStart(int param_1);
undefined4 udp_datahandler(void);
undefined4 Network::HandleNotificationPort(undefined4 param_1,char param_2);
void Network::HangUp(int param_1,undefined4 param_2,char *param_3,uint param_4);
void Network::HangUpAll(int param_1);
void Network::Idle(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
char * ComputeLogoURL(void);
void Network::GetConnectingURL(void);
void Network::IdleShowLogoBegin(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void Network::IdleShowLogoEnd(void);
void Network::IdleDialBegin(int param_1);
void Network::IdleDialEnd(int param_1);
void Network::IdlePostPendingInput(int param_1);
void Network::IdleActiveBegin(int param_1);
void Network::IdleActiveEnd(int param_1);
void Network::IdleHangUpBegin(int param_1);
void Network::IdleHangUpEnd(int param_1);
void Network::IdleHangUpThenDialBegin(int param_1);
void Network::IdleHangUpThenDialEnd(int param_1);
void Network::IdleHangUpThenWaitBegin(int param_1);
void Network::IdleHangUpThenWaitEnd(int param_1);
void Network::IdleWaiting(void);
void Network::IdleReloginBegin(int param_1);
void Network::IdleReloginEnd(int param_1);
void Network::Initialize(void);
void Network::InitializeForSignup(int param_1,byte *param_2,undefined2 param_3,byte *param_4,undefined2 param_5,char param_6);
undefined4 Network::IsProtocolRunning(int param_1);
void Network::KillProtocols(int param_1);
int * Network::NewPendingResource(void);
void Network::GetTellyScriptID(undefined4 param_1,int *param_2,int *param_3);
int * Network::NewTellyScriptStream(void);
undefined4 Network::ProcessChallenge(int param_1,byte *param_2);
undefined4 Network::ProcessSecret(int param_1,byte *param_2);
void Network::Reactivate(int param_1);
void Network::Relogin(int param_1);
void Network::RequestNotifications(int param_1);
void Network::Restart(int param_1,char param_2);
void Network::ForceRestart(int param_1);
void Network::RestoreState(int param_1);
void Network::StoreSecretInNVRAM(undefined4 param_1,byte *param_2);
undefined * Network::GetSecretFromNVRAM(void);
void Network::EraseSecretInNVRAM(void);
void Network::RunProtocols(int param_1);
void Network::SaveState(int param_1);
void SendConnectionLog(byte *param_1);
void DumpNVStorage(byte *param_1);
void SendTCPStatLog(byte *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 Network::SetHeader(int param_1,byte *param_2,byte *param_3,undefined4 param_4);
void Network::SetNotificationPending(int param_1,undefined param_2);
void Network::SetResponse(int param_1,char *param_2);
void Network::SetSecure(int param_1,undefined param_2);
bool Network::SetSpecialAttribute(int param_1,byte *param_2,byte *param_3);
undefined4 Network::IsCurrentScriptBYOISP(void);
void Network::DeleteOldTellyScriptResource(undefined4 param_1);
void Network::SetTellyScript(int param_1,int *param_2);
void Network::SetTicket(int param_1,char *param_2);
void Network::UpdateCallState(int param_1);
void Network::UpdateStatusIndicator(int param_1,char param_2);
void Network::WriteHeaders(int param_1,int *param_2);
void Network::WriteChallengeResponse(int param_1,int *param_2);
undefined4 * VisitEntry::VisitEntry(undefined4 *param_1);
void VisitEntry::~VisitEntry(int **param_1,uint param_2);
void VisitEntry::SetURL(int param_1,int *param_2);
void VisitEntry::SetURL(int param_1,byte *param_2);
void VisitEntry::SetWhen(int param_1,undefined4 param_2);
undefined4 * VisitList::VisitList(undefined4 *param_1);
void VisitList::~VisitList(int **param_1,uint param_2);
void VisitList::Add(int param_1,int *param_2,int param_3);
void VisitList::Add(int param_1,byte *param_2,int param_3);
int ** VisitList::RemoveNext(int param_1);
undefined4 Network::HasHomeURL(int param_1);
int * Network::GetActiveResource(int *param_1,int param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Protocol::Protocol(int param_1);
void Protocol::~Protocol(int **param_1,uint param_2);
uint Protocol::CanConnectTo(int param_1,int param_2,int *param_3);
void Protocol::Connect(int param_1,int **param_2,int *param_3);
void Protocol::Disconnect(int param_1);
int Protocol::GetPercentComplete(int param_1);
uint Protocol::GetPriority(int param_1);
void Protocol::Idle(int param_1);
void Protocol::IdleCommandBegin(int param_1);
void Protocol::IdleCommandContinue(int param_1);
void Protocol::IdleCommandEnd(int param_1);
void Protocol::IdleConnectBegin(int param_1);
void Protocol::IdleConnectEnd(int param_1);
void Protocol::IdleDisconnectBegin(int param_1);
void Protocol::IdleDisconnectEnd(int param_1);
void Protocol::IdleSecureBegin(int param_1);
void Protocol::RunCommand(int param_1,int *param_2);
void Protocol::SetResource(int param_1,int *param_2);
void ProtocolCommand::ProtocolCommand(undefined4 *param_1);
void ProtocolCommand::~ProtocolCommand(int **param_1,uint param_2);
undefined4 ProtocolCommand::CreateStream(int param_1);
void ProtocolCommand::DeleteStream(int param_1);
int ProtocolCommand::GetStatus(int param_1);
void ProtocolCommand::SetHeaderString(int param_1,byte *param_2);
void ProtocolCommand::SetProtocol(int param_1,undefined4 param_2);
void ProtocolCommand::SetResource(int param_1,int *param_2);
void ProtocolCommand::SetStatus(int param_1,int param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Resource::Resource(undefined4 *param_1);
int * Resource::Resource(int *param_1,int *param_2);
void Resource::~Resource(int **param_1,uint param_2);
int * Resource::operator=(int *param_1,int *param_2);
bool Resource::operator==(int *param_1,int *param_2);
bool Resource::operator!=(int *param_1,int *param_2);
void Resource::ForceReload(int *param_1);
void Resource::GetMimeTypeDescriptor(int *param_1);
int * Resource::GetReferer(int *param_1,int *param_2);
ushort Resource::IsFileBased(int *param_1);
int Resource::LockData(int *param_1);
int * Resource::NewStream(int *param_1);
undefined4 * Resource::NewStreamForAppend(int *param_1);
undefined4 * Resource::NewStreamForWriting(int *param_1);
void Resource::Purge(int *param_1);
undefined4 Resource::Redirect(int *param_1);
void Resource::Reset(int *param_1);
void Resource::SetAuthorization(int *param_1,char *param_2);
void Resource::SetReferer(int *param_1,int *param_2);
void Resource::SetRequestTime(int *param_1,undefined4 param_2);
void Resource::SetURL(int *param_1,int param_2);
void Resource::SetURL(int *param_1,byte *param_2);
void Resource::SetURL(int *param_1,byte *param_2,undefined4 *param_3,uint param_4);
void Resource::SetURL(int *param_1,undefined4 *param_2,int *param_3);
void Resource::SetURL(int *param_1,undefined4 *param_2,int *param_3,undefined4 *param_4,uint param_5);
void Resource::UnlockData(int *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int SerialReadSync(undefined4 param_1,undefined *param_2,int param_3);
int SerialWriteSync(undefined4 param_1,undefined *param_2,int param_3);
void SerialWriteBuffered(undefined4 param_1,undefined *param_2,uint param_3);
undefined4 SerialWriteCharSync(undefined4 param_1,undefined param_2);
void SerialFlush(void);
undefined4 SerialSetFlowControl(void);
undefined SerialGetDtr(void);
undefined4 SerialSetDtr(undefined4 param_1,char param_2);
undefined4 SerialSetBaud(void);
int Service::Service(int param_1);
void Service::~Service(int **param_1,uint param_2);
void Service::Append(int param_1,int **param_2);
undefined4 Service::ComputeProtocolClassNumber(int param_1);
void Service::EndUse(int **param_1);
undefined4 Service::GetNext(int param_1);
int Service::GetProtocolClassNumber(int param_1);
bool Service::IsActive(int param_1);
bool Service::IsEqual(int param_1,int param_2);
int Service::NewProtocol(int param_1);
int Service::NewService(int *param_1);
int * Service::NewSocket(int param_1,int *param_2);
void Service::RemoveNext(int param_1);
void Service::SetConnectionLimit(int param_1,undefined param_2);
void Service::SetFlags(int param_1,undefined4 param_2);
void Service::SetHostAddress(int param_1,undefined4 param_2);
void Service::SetHostName(int param_1,byte *param_2);
void Service::SetHostPort(int param_1,undefined2 param_2);
void Service::SetIsSSL(int param_1,undefined param_2);
void Service::SetIsProxy(int param_1,undefined param_2);
void Service::SetMessage(void);
void Service::SetName(int param_1,undefined4 param_2);
void Service::SetProtocolClassNumber(int param_1,undefined4 param_2);
void Service::Suspend(int param_1);
void ServiceList::ServiceList(uint *param_1);
void ServiceList::~ServiceList(int **param_1,uint param_2);
void ServiceList::Add(int param_1,int **param_2);
void ServiceList::Add(int param_1,undefined4 param_2,byte *param_3,undefined2 param_4,undefined4 param_5,undefined4 param_6,undefined param_7);
int ServiceList::FindByName(int param_1,byte *param_2);
undefined4 * ServiceList::FindByResource(undefined4 *param_1,int param_2,int *param_3);
undefined4 *ServiceList::FindByURL(undefined4 *param_1,int param_2,undefined4 *param_3,char param_4);
undefined4 ServiceList::GetMessage(int param_1,int *param_2);
undefined ServiceList::HasService(int param_1,int *param_2,undefined4 *param_3);
undefined ServiceList::HasService(int param_1,byte *param_2,char param_3);
uint * ServiceList::NewSendURL(undefined4 param_1,byte *param_2);
uint * ServiceList::NewSendURL(undefined4 param_1,int *param_2,undefined4 *param_3);
int ServiceList::NewService(int param_1);
undefined4 ServiceList::SetHeader(int param_1,byte *param_2,byte *param_3,undefined4 param_4);
void ServicePointer::ServicePointer(undefined4 *param_1);
undefined4 * ServicePointer::ServicePointer(undefined4 *param_1,int param_2);
undefined4 * ServicePointer::ServicePointer(undefined4 *param_1,int param_2);
void ServicePointer::~ServicePointer(int **param_1,uint param_2);
int ServicePointer::operator=(int param_1,int param_2);
bool ServicePointer::IsEqual(int param_1,int param_2);
void ServicePointer::Reset(int param_1);
void ServicePointer::SetService(int param_1,int **param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 ServiceList::At(int param_1,int param_2);
undefined4 * Socket::Socket(undefined4 *param_1);
void Socket::~Socket(int **param_1,uint param_2);
void Socket::NewSocket(void);
uint Socket::NewSocket(undefined param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
uint TinySocket::WriteFIFO(int param_1,undefined4 *param_2,uint param_3);
void TinySocket::Initialize(void);
undefined4 TinySocket::NewTinySocket(void);
void TinySocket::ReturnTinySocket(int param_1);
void TinySocket::TinySocketClean(int param_1);
uint TinySocket::Init(int param_1,undefined param_2);
void TinySocket::TinySocket(undefined4 *param_1);
void TinySocket::~TinySocket(int **param_1,uint param_2);
void DNRResolverComplete(undefined4 param_1,int *param_2);
undefined4 TinySocket::Connect(int *param_1,char *param_2,short param_3);
undefined4 TinySocket::IncomingData(int param_1,undefined4 *param_2,uint param_3);
undefined4 TCPReceive(undefined4 param_1,int *param_2,undefined4 param_3,undefined4 param_4);
undefined4 TinySocket::Connect(uint param_1,uint param_2,short param_3);
undefined4 TinySocket::Listen(uint param_1,undefined2 param_2);
undefined4 TinySocket::Close(int param_1,char param_2);
void TinySocket::Dispose(int param_1);
void TinySocket::DisposeWithClose(int param_1);
int TinySocket::Idle(int *param_1,undefined4 param_2,int *param_3,undefined *param_4);
undefined4 TinySocket::RawReadIntoStream(int param_1,int *param_2);
bool TinySocket::SocketIdle(void);
void TinySocket::CloseAll(void);
undefined4 TinySocket::GetStats(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 TinySocket::Write(int param_1,undefined4 *param_2,uint param_3,uint *param_4);
bool TinySocket::CheckConnectionCompleted(int param_1);
int * TinySocket::Read(int *param_1,undefined4 param_2,int param_3,undefined4 *param_4);
void TinySocket::ReadIntoStream(int param_1,int *param_2,undefined4 param_3,undefined4 param_4);
undefined4 TinySocket::SSLReadIntoStream(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 TinySocket::Handshake(int param_1,undefined4 param_2,undefined4 *param_3,int *param_4);
uint TinySocket::BeginSSL(int param_1);
void TinySocket::EndSSL(int param_1);
int TinySocket::ReadBuffer(int param_1,undefined4 *param_2,uint param_3,int *param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void WTVPCommand::WTVPCommand(undefined4 *param_1);
void WTVPCommand::~WTVPCommand(int **param_1,uint param_2);
int WTVPCommand::GetStatus(int param_1);
void WTVPCommand::IdleReadBody(int param_1);
void WTVPCommand::IdleReadResponse(int param_1);
void WTVPCommand::RedirectWithData(int param_1,undefined4 *param_2);
undefined4 WTVPCommand::SetHeader(int param_1,byte *param_2,undefined4 *param_3,undefined4 param_4);
void WTVPCommand::WriteHeaders(int param_1,int *param_2);
void WTVPGetCommand::WTVPGetCommand(undefined4 *param_1);
void WTVPGetCommand::~WTVPGetCommand(int **param_1,uint param_2);
void WTVPGetCommand::IdleWriteCommandBegin(int *param_1);
void WTVPPostCommand::WTVPPostCommand(undefined4 *param_1);
void WTVPPostCommand::~WTVPPostCommand(int **param_1,uint param_2);
void WTVPPostCommand::IdleWriteCommandBegin(int *param_1);
void WTVPPostCommand::IdleWriteCommandEnd(int *param_1);
void WTVProtocol::~WTVProtocol(int **param_1,uint param_2);
void WTVProtocol::IdleCommandEnd(int param_1);
void WTVProtocol::IdleConnectEnd(int param_1);
void WTVProtocol::IdleDisconnectBegin(int param_1);
void WTVProtocol::IdleSecureBegin(int param_1);
void WTVProtocol::IdleSecureEnd(int param_1);
undefined4 WTVProtocol::SetSessionKeys(int param_1);
void WTVProtocol::GetSessionKeys(int param_1,int *param_2,int *param_3);
undefined4 * WTVProtocol::NewGetCommand(undefined4 param_1,int *param_2);
undefined4 * WTVProtocol::NewPostCommand(undefined4 param_1,int *param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void des_ecb_encrypt(undefined *param_1,undefined *param_2,uint *param_3,int param_4);
void des_encrypt(uint *param_1,uint *param_2,int param_3);
undefined4 des_set_key(undefined *param_1,uint *param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void des_ecb_init_key(int param_1,undefined *param_2);
void des_ecb_cipher(int param_1,int param_2,undefined *param_3,uint param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void EVP_EncryptInit(int *param_1,int param_2,undefined4 param_3,undefined4 param_4);
void EVP_DecryptInit(int *param_1,int param_2,undefined4 param_3,undefined4 param_4);
void EVP_EncryptUpdate(int *param_1,int param_2,int *param_3,undefined4 *param_4,uint param_5);
void EVP_EncryptFinal(int *param_1,undefined4 param_2,int *param_3);
void EVP_DecryptUpdate(int *param_1,int param_2,int *param_3,undefined4 *param_4,uint param_5);
undefined4 EVP_DecryptFinal(int *param_1,undefined *param_2,int *param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 asy_ioctl(int param_1,short param_2);
undefined4 asy_send(undefined4 param_1,int **param_2);
void htonip(undefined4 *param_1,uint **param_2,int param_3);
uint ntohip(undefined4 *param_1,int **param_2);
uint eac_mbuf(uint param_1);
uint lcsum_mbuf(ushort *param_1,int param_2);
uint cksum_mbuf(uint *param_1,int *param_2,uint param_3);
void ppp_free(int **param_1);
uint * ppp_malloc(uint param_1);
uint * alloc_mbuf(ushort param_1);
void free_mbuf(int **param_1);
undefined4 free_p(int **param_1);
short len_p(int *param_1);
void trim_mbuf(int **param_1,ushort param_2);
uint * copy_p(int *param_1,ushort param_2);
short pullup(int **param_1,undefined4 *param_2,ushort param_3);
void append(int **param_1,int **param_2);
void pushdown(uint **param_1,undefined4 *param_2,ushort param_3);
undefined4 pull32(int **param_1);
uint pull16(int **param_1);
uint pull8(int **param_1);
void enqueue(int *param_1,int *param_2);
int dequeue(int *param_1);
void free_q(int *param_1);
void ppp_dump(int **param_1,short param_2,undefined4 param_3,undefined4 param_4);
void htoncnf(undefined *param_1,uint **param_2);
undefined4 ntohcnf(undefined *param_1,int **param_2);
undefined4 ntohopt(undefined *param_1,int **param_2);
void fsm_timer(int param_1);
int fsm_send(int param_1,byte param_2,char param_3,uint **param_4);
int fsm_sendreq(int param_1);
int fsm_sendtermreq(int param_1);
int fsm_sendtermack(int param_1,char param_2);
void fsm_reset(int param_1);
void fsm_opening(undefined *param_1);
void fsm_proc(undefined *param_1,uint **param_2);
void fsm_timeout(int param_1);
void fsm_start(byte *param_1);
void fsm_down(undefined *param_1);
void fsm_close(undefined *param_1);
void fsm_init(int param_1);
void fsm_free(int param_1);
void ipcp_option(int **param_1,int param_2,byte param_3,byte param_4,int **param_5);
void ipcp_makeoptions(int **param_1,int param_2,uint param_3);
int * ipcp_makereq(int param_1);
undefined4 ipcp_check(int **param_1,int param_2,ushort *param_3,byte *param_4,short param_5);
uint ipcp_request(int param_1,int param_2,int **param_3);
int ipcp_ack(int param_1,int param_2,int **param_3);
undefined4 ipcp_nak(int param_1,int param_2,int **param_3);
undefined4 ipcp_reject(int param_1,int param_2,int **param_3);
void ipcp_reset(int param_1);
void ipcp_closing(int param_1);
void ipcp_opening(int param_1);
void ipcp_free(int param_1);
void ipcp_init(int param_1);
void lcp_option(int **param_1,int param_2,undefined param_3,byte param_4,int **param_5);
void lcp_makeoptions(int **param_1,int param_2,uint param_3);
uint * lcp_makereq(int param_1);
int lcp_check(int **param_1,int param_2,ushort *param_3,byte *param_4,short param_5);
uint lcp_request(int param_1,int param_2,int **param_3);
int lcp_ack(int param_1,int param_2,int **param_3);
undefined4 lcp_nak(int param_1,int param_2,int **param_3);
undefined4 lcp_reject(int param_1,int param_2,int **param_3);
void ppp_ready(int param_1);
void lcp_reset(int param_1);
void lcp_stopping(int param_1);
void lcp_closing(int param_1);
void lcp_opening(int param_1);
void lcp_init(int param_1);
void doppp_active(char *param_1);
undefined GetPPPConnecting(void);
void SetPPPConnecting(undefined param_1);
bool nowstartppp(void);
void PPPWrite(undefined4 param_1,uint **param_2);
uint ComputeFCS(uint param_1,byte *param_2,int param_3);
void htonppp(undefined *param_1,uint **param_2);
void ppp_skipped(int param_1,int **param_2);
int ppp_send(uint **param_1,int param_2);
int ppp_output(int param_1,undefined4 param_2,undefined4 param_3,undefined2 param_4,uint **param_5);
undefined4 ppp_raw(int param_1,int **param_2);
void pppInterruptHandler(void);
void ppp_proc(int param_1,uint **param_2,undefined4 param_3,undefined4 param_4);
undefined4 ppp_iostatus(int param_1,short param_2);
int ppp_discard(int param_1,uint **param_2);
int ppp_echo(int param_1,uint **param_2);
undefined4 ppp_init(int *param_1);
undefined4 ppp_cleanup(void);
undefined * put32(undefined *param_1,undefined4 param_2);
undefined * put16(undefined *param_1,undefined4 param_2);
undefined2 get16(undefined2 *param_1);
undefined4 get32(undefined4 *param_1);
void trace_log(undefined4 param_1,byte *param_2,undefined4 param_3,undefined4 param_4);
void pppCheckIfTimerExpired(void);
void pppSetTimer(undefined4 *param_1,undefined4 param_2,undefined4 param_3);
void pppStartTimer(undefined4 *param_1);
void pppCancelTimer(int **param_1);
uint * pap_makereq(int param_1);
void pap_shutdown(int param_1);
void pap_opening(undefined *param_1,byte param_2);
uint pap_check(int param_1,int param_2,int **param_3,undefined4 param_4);
void pap_proc(undefined *param_1,int **param_2,undefined4 param_3,undefined4 param_4);
void pap_timeout(int param_1);
void pap_down(undefined *param_1);
void pap_init(int param_1);
undefined4 pap_remote(int param_1);
void htontcp(int param_1,uint **param_2,uint param_3,undefined4 param_4);
uint ntohtcp(uint *param_1,int **param_2);
uint ** slhc_init(short param_1,ushort param_2);
void slhc_free(int **param_1);
undefined * encode(undefined *param_1,uint param_2);
void decode(int **param_1);
undefined4 slhc_compress(int *param_1,uint **param_2,short param_3);
int slhc_uncompress(int param_1,uint **param_2);
uint slhc_remember(int param_1,uint **param_2);
undefined4 slhc_toss(int param_1);
void DNRFlushCache(void);
void DNREnterCache(void);
undefined4 ResolverInit(void);
void DNRSwitchServers(void);
undefined4 ResolverClose(void);
undefined4 HostByName(char param_1,char *param_2,undefined4 *param_3,int param_4,int param_5);
void DNRHandlerLoop(void);
undefined4 DNRBuildQuery(void);
undefined * DNRGetAnswer(void);
void DNRSendQuery(void);
byte * dn_expand(byte *param_1,byte *param_2,byte *param_3,byte *param_4,int param_5);
byte * dn_comp(byte *param_1,byte *param_2,int param_3,int *param_4,int param_5);
int __dn_skipname(byte *param_1,byte *param_2);
int dn_find(byte *param_1,int param_2,byte **param_3,byte **param_4);
undefined2 _getshort(undefined2 *param_1);
void __putshort(undefined4 param_1,undefined *param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
bool tcp_InUse(int *param_1,short param_2,int param_3,short param_4,int param_5);
short tcp_NewPort(int *param_1,int param_2,short param_3,int param_4);
uint tcp_Checksum(byte *param_1);
void tcp_Reset(int param_1,byte *param_2,ushort *param_3);
void tcp_Transmit(int *param_1);
undefined4 tcp_SaveData(int param_1,uint *param_2,undefined4 *param_3,uint *param_4);
void tcp_DeliverData(int param_1);
void tcp_ProcessSegment(int *param_1,int param_2,int param_3);
uint * tcp_Alloc(uint param_1);
void tcp_Add(int *param_1,int param_2);
void tcp_Drop(int *param_1,int param_2);
void tcp_Free(int **param_1);
void tcp_SignalError(int *param_1,int param_2,undefined4 param_3);
void tcp_Timer(int *param_1);
uint * tcpInit(uint param_1,undefined2 param_2);
void tcpDown(int **param_1);
uint * tcpOpen(int *param_1,short param_2,uint param_3,short param_4,uint param_5,uint param_6,undefined2 param_7);
uint * tcpListen(int *param_1,undefined2 param_2,uint param_3,uint param_4,undefined2 param_5,uint param_6);
uint tcpSend(int *param_1,undefined4 *param_2,uint param_3);
void tcpCredit(int *param_1,int param_2);
void tcpClose(int **param_1);
void tcpAbort(int **param_1);
void tcpHandler(int *param_1,byte *param_2,undefined4 param_3,undefined4 param_4);
void tcpNotify(int *param_1,byte *param_2,byte *param_3);
void tcpPoll(int *param_1);
undefined4 tcpGetStats(int param_1,undefined4 *param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int lcsum(ushort *param_1,uint param_2);
uint eac(uint param_1);
uint cksum(ushort *param_1,uint param_2);
uint checksum(ushort *param_1,uint param_2);
ushort * fill_ip(ushort *param_1,ushort *param_2,short param_3,undefined4 param_4,undefined param_5);
ushort * chk_ip(int *param_1);
void icmp_Err(ushort *param_1,undefined param_2,undefined param_3,undefined4 *param_4);
void icmp_echo(undefined4 *param_1);
void icmp_in(int param_1,undefined4 *param_2,int param_3,undefined4 param_4);
void SetIpAddress(int param_1,undefined4 param_2);
undefined4 ipAddress(int param_1);
void ipIn(int param_1,int *param_2,undefined4 param_3,undefined4 param_4);
undefined4 ipSend(uint **param_1);
void ipMonitor(int param_1);
uint * ipInit(void);
void ipDown(void);
uint udp_Checksum(byte *param_1,int param_2,uint param_3);
void udp_Unthread(int *param_1,int param_2);
void FUN_8049298c(int *param_1,int param_2);
uint * udpInit(uint param_1);
void udpDown(int **param_1);
uint ** udpOpen(uint **param_1,short param_2,uint *param_3,undefined param_4);
void udpClose(int **param_1);
void udpHandler(int **param_1,undefined4 *param_2);
void udpNotify(int **param_1,undefined4 param_2,byte *param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void MoveBytes(undefined *param_1,undefined4 *param_2,undefined *param_3,int param_4);
void MoveBlanks(uint *param_1,undefined *param_2,ushort param_3,undefined param_4);
byte * SFormatString(byte *param_1,byte *param_2,char **param_3,int param_4);
void SI_setabort(int *param_1);
int allocate(int param_1);
void SI_Interpret(void);
undefined4 pfunction(undefined *param_1,undefined4 param_2);
void statements(undefined4 param_1);
void compound_statement(undefined4 param_1);
void statement(undefined4 param_1);
void skip_statements(void);
void rvalue(int param_1);
void store(int param_1,undefined4 param_2);
undefined4 expression(undefined4 param_1);
void assign(undefined4 *param_1);
void or(undefined4 *param_1);
void and(undefined4 *param_1);
void eq(undefined4 *param_1);
void le(undefined4 *param_1);
void plus(undefined4 *param_1);
void mult(undefined4 *param_1);
void unary(undefined4 *param_1);
void variable(undefined4 *param_1);
void primary(undefined4 *param_1);
void skippair(byte param_1,byte param_2);
void needtoken(byte param_1);
bool iftoken(char param_1);
char nexttoken(void);
char ** addsymbol(char **param_1,char *param_2,char *param_3,undefined param_4,undefined param_5);
void findsymbol(char **param_1,char *param_2,char **param_3);
char ** ifsymbol(char **param_1,char *param_2,char **param_3);
void error(int param_1);
undefined * token2str(int param_1);
int a2x(byte *param_1);
void friendly_delay(uint param_1,undefined4 param_2,char *param_3,uint param_4);
undefined4 SI_parsesystemtime(int *param_1);
void SI_gettimezone(void);
void SI_getdatetimelocal(void);
void SI_getpreregnumber(void);
void SI_getphonesettings(void);
void SI_new(uint *param_1);
undefined4 SI_free(undefined4 *param_1);
char * SI_strcat(char **param_1);
char * SI_strcpy(char **param_1);
char * SI_strncpy(char **param_1);
void SI_strlen(char **param_1);
void SI_strchr(char **param_1);
void SI_strncmp(char **param_1);
void SI_strstr(char **param_1);
void SI_atoi(byte **param_1);
undefined * SI_itoa(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 SI_display(byte **param_1,undefined4 param_2,undefined4 param_3,int param_4);
undefined4 SI_format(byte **param_1,undefined4 param_2,undefined4 param_3,int param_4);
void SI_ticks(void);
undefined4 SI_delay(uint *param_1,undefined4 param_2,char *param_3,uint param_4);
undefined4 SI_idle(undefined4 param_1,undefined4 param_2,char *param_3,uint param_4);
undefined4 SI_waitfor(int *param_1,char *param_2,char *param_3,uint param_4);
void SI_getbytes(undefined4 *param_1);
int SI_getline(int *param_1,char *param_2,char *param_3,uint param_4);
void SI_sendbyte(undefined4 *param_1);
void SI_sendstr(char **param_1);
undefined4 SI_flush(void);
void SI_countpending(void);
undefined4 SI_winkdtr(undefined4 param_1,undefined4 param_2,char *param_3,uint param_4);
int SI_setdtr(int *param_1);
bool SI_getdtr(void);
int SI_setbaud(void);
bool SI_getpapmode(void);
undefined4 SI_setpapmode(int *param_1);
void SI_getusername(void);
undefined4 SI_setusername(undefined4 *param_1);
void SI_getpassword(void);
undefined4 SI_setpassword(undefined4 *param_1);
void SI_getwindowsize(void);
undefined4 SI_setwindowsize(undefined4 *param_1);
undefined4 get_manufacturer(void);
void SI_getsecret(void);
undefined4 SI_system_getssn(undefined4 *param_1);
undefined * SI_getserialnumber(void);
uint SI_computefcs(byte **param_1);
undefined4 SI_setnameservice(undefined4 *param_1);
undefined4 SI_setworkingnumber(undefined4 *param_1);
void SI_getworkingnumber(void);
undefined4 SI_setfullpopnumber(undefined4 *param_1);
undefined4 SI_setconnectretrycount(undefined4 *param_1);
void SI_getconnectretrycount(void);
void SI_GetScriptProgressMode(void);
undefined4 SI_SetScriptProgressMode(undefined4 *param_1);
void SI_GetScriptProgressTextFromScript(void);
undefined4 SI_SetScriptProgressTextFromScript(undefined4 *param_1);
void SI_GetScriptProgressPercentageFromScript(void);
undefined SI_GetScriptProgressIsDirty(void);
undefined4 SI_SetScriptProgressIsDirty(int *param_1);
undefined4 SI_SetScriptProgressPercentageFromScript(undefined4 *param_1);
undefined4 SI_setinitialreadtimeout(int *param_1);
undefined4 SI_setani(undefined4 *param_1);
uint SI_ReadModemReg(undefined4 *param_1);
undefined4 SI_WriteModemReg(undefined4 *param_1);
undefined4 SI_GetFileSystemData(byte **param_1);
undefined4 SI_modem_blastdata(char **param_1);
undefined4 SI_modem_delayms(int *param_1);
undefined4 SI_debug_setleds(uint *param_1);
uint SI_system_coldboot(void);
undefined4 SI_system_getfeatureflags(void);
undefined4 SI_system_getmaxfeatureflag(void);
undefined4 SI_PrepModemForDownload(void);
undefined4 SI_DirectSend(undefined4 *param_1);
int SI_setflowcontrol(void);
bool SI_startppp(void);
undefined4 SI_enablemodem(void);
undefined4 SI_disablemodem(void);
undefined4 SI_dialerror(undefined4 *param_1);
undefined ** GetIntrinsics(void);
void global_constructors_keyed_to_GetIntrinsics(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void AddIntrinsics(char **param_1);
void SetupPointers(uint param_1,int param_2,int param_3);
void LinkFunctions(void);
int TellyGetDateTimeLocal(void);
undefined4 TellyGetTimeZoneOffset(void);
void TellyIdle(undefined4 param_1,undefined4 param_2,char *param_3,uint param_4);
void ErasePreregNumberInNVRAM(void);
void StorePreregNumberInNVRAM(byte *param_1);
undefined * GetPreregNumberFromNVRAM(void);
void SetScriptAborted(void);
undefined4 GetScriptProgress(void);
void SetANI(undefined4 *param_1);
undefined * GetANI(void);
void SetTellyScriptDirty(char param_1);
byte GetTellyScriptDirty(void);
void SetDisableBYOISP(char param_1);
byte GetDisableBYOISP(void);
undefined GetPAPMode(void);
void SetPAPMode(undefined param_1);
undefined * GetUserName(void);
void SetUserName(undefined4 *param_1);
undefined * GetPassword(void);
void SetPassword(undefined4 *param_1);
undefined GetScriptProgressIsDirty(void);
void SetScriptProgressIsDirty(undefined param_1);
undefined4 GetScriptProgressMode(void);
void SetScriptProgressMode(undefined4 param_1);
undefined * GetScriptProgressTextFromScript(void);
void SetScriptProgressTextFromScript(undefined4 *param_1);
undefined4 GetScriptProgressPercentageFromScript(void);
void SetScriptProgressPercentageFromScript(undefined4 param_1);
int GetScriptProgressPercentage(int param_1);
undefined * GetScriptProgressText(int param_1);
void SetScriptProgress(undefined4 param_1);
void SetScriptResult(undefined4 param_1);
undefined4 GetLastScriptResult(void);
void SetWorkingNumber(undefined4 *param_1);
undefined * GetWorkingNumber(void);
void SetFullPOPNumber(undefined4 *param_1);
undefined * GetFullPOPNumber(void);
void SetPhoneSettings(undefined4 *param_1);
void InitPhoneSettings(void);
void ResetPhoneSettings(void);
undefined * GetPhoneSettings(void);
int GetSecretWord(void);
undefined4 GetWindowSize(void);
void SetWindowSize(undefined4 param_1);
undefined4 GetConnectRetryCount(void);
void SetConnectRetryCount(undefined4 param_1);
undefined4 GetInitialReadTimeout(void);
void SetInitialReadTimeout(int param_1);
undefined * GetNameService(void);
void SetNameService(undefined4 param_1,undefined4 param_2);
undefined4 GetScriptResult(void);
undefined * GetConnectionStats(void);
int RunScript(int *param_1,uint param_2,char param_3);
void SI_Error(short param_1,char *param_2,short param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void StartHuff(int param_1);
uint GetBit(uint *param_1);
int Putcode(int param_1,int param_2,uint param_3,undefined *param_4);
void Reconstruct(int param_1);
void Update(int param_1,int param_2);
int EncodeChar(int param_1,int param_2,undefined *param_3);
bool EncodeEnd(int param_1,undefined *param_2);
uint DecodeChar(uint *param_1,undefined *param_2);
uint * AHuff_Init(uint param_1,uint param_2);
int AHuff_ExpandBuffer(uint *param_1,byte *param_2,int param_3,undefined *param_4);
int AHuff_FinishBuffer(int **param_1,undefined *param_2,char param_3);
int ExpandLzss(byte *param_1,byte *param_2,undefined4 param_3,uint param_4);
int ExpandLzss_16(byte *param_1,byte *param_2,undefined4 param_3,uint param_4);
undefined4 LZInitTree(void);
void LZFreeTrees(void);
void LZInsertNode(int param_1);
void LZDeleteNode(int param_1);
int CompressLzss(byte *param_1,byte *param_2,uint param_3);
undefined4 HuffDecodeLiteral(int param_1,undefined4 param_2,undefined *param_3);
undefined4 HuffDecodeLiteralNoFlags(int param_1,undefined4 param_2,undefined *param_3);
undefined4 ReadMatch(int param_1,undefined4 param_2,int *param_3);
void Lzpf_Init(undefined param_1,uint param_2,uint param_3);
undefined4 CheckPartialChecksum(int param_1,int *param_2,byte **param_3);
int Lzpf_Expand(int param_1,byte *param_2,int param_3,byte *param_4);
undefined4 Lzpf_Finish(int **param_1,undefined4 param_2,char param_3);
uint updcrc(char *param_1,int param_2);
void BeginInflation(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7);
undefined4 EndInflation(uint param_1);
undefined huft_build(int *param_1,uint param_2,uint param_3,int param_4,int param_5,uint **param_6,uint *param_7);
undefined4 huft_free(int param_1);
undefined4 inflate_codes(int param_1,int param_2,uint param_3,uint param_4);
undefined4 inflate_stored(void);
int inflate_fixed(void);
int inflate_dynamic(void);
int inflate_block(uint *param_1);
int inflate(void);
void flush_window(char param_1);
undefined4 fill_inbuf(void);
undefined4 ReadMisalignedLittleEndianWord(undefined *param_1);
int ExpandZip(int param_1,undefined4 param_2,int param_3,undefined4 param_4);
void SendFileLineLog(byte *param_1,undefined4 *param_2,uint param_3,byte *param_4,undefined4 param_5);
void LogActionToURL(char *param_1,byte *param_2,byte *param_3,int *param_4);
void LogAction(byte *param_1,byte *param_2,int *param_3);
void LogJellyScriptError(undefined4 param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void LogSecurity(char param_1,byte *param_2,int *param_3);
void LogSecuritySSL(undefined4 *param_1,undefined4 *param_2);
void LogSecuritySSLError(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void LogChat(byte *param_1,int *param_2);
void LogChatDisconnect(void);
void LogChatJoin(undefined4 *param_1,undefined4 param_2,undefined4 *param_3,undefined4 param_4,char param_5);
void LogChatList(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void LogAd(byte *param_1,undefined4 param_2,char param_3);
void LogError(undefined4 *param_1,byte *param_2,undefined4 param_3);
void LogWarning(void);
bool NormalizeCrashLogs(void);
void LogCrash(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int romanChars::LookupNextCharacter(byte param_1);
void romanChars::SetupText(int *param_1,int param_2,uint param_3,char param_4);
short * romanChars::PrepareChar(short **param_1,byte param_2,undefined4 param_3,int *param_4,uint *param_5,uint *param_6);
undefined2 romanChars::GetBitsOffset(int param_1,int *param_2);
undefined4 romanChars::SecondHalf(int param_1);
short * romanChars::CharBounds(short **param_1,byte param_2,undefined4 param_3,int param_4,int *param_5,int *param_6,int *param_7,int *param_8);
int romanChars::CharWidth(short **param_1,byte param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void SetHorizontalFilter(uint param_1);
void SetScreenBorderColor(int param_1);
void InitializeGraphics(void);
void DrawScreenBorder(void);
void InitScreenBorder(void);
void MakeBitMapDevice(undefined4 *param_1,undefined4 *param_2,undefined4 param_3,undefined2 param_4,uint param_5,undefined4 param_6,undefined4 param_7);
void DeleteColorTable(int **param_1);
uint * NewColorTable(undefined4 param_1,int param_2);
uint * CloneColorTable(undefined4 *param_1);
uint ** NewBitMapDevice(int *param_1,uint *param_2,uint *param_3,uint *param_4,uint param_5);
void DeleteBitMapDevice(int **param_1);
int BitMapPixelBufferSize(int param_1);
void ClearBitMapDevice(uint **param_1);
void DrawingComplete(undefined4 *param_1,int *param_2);
void UnionRectangle(int *param_1,int *param_2);
void IntersectRectangle(int *param_1,int *param_2);
void yuvtorgb(int param_1,int param_2,int param_3,undefined *param_4,undefined *param_5,undefined *param_6);
void rgbtoyuv(uint param_1,uint param_2,uint param_3,undefined2 *param_4,short *param_5,short *param_6);
void MapColor(int param_1,uint *param_2);
void LookUpRGB(byte param_1,ushort *param_2,byte *param_3,byte *param_4,byte *param_5);
void ScrollDown(ushort **param_1,ushort **param_2,int *param_3,int param_4);
void ScrollUp(ushort **param_1,ushort **param_2,int *param_3,int param_4);
void UpdateEdge(ushort **param_1,ushort **param_2,int *param_3,char param_4);
void DoScreenTransition(ushort **param_1,ushort **param_2,int *param_3,int *param_4,int param_5,int param_6,uint param_7,int *param_8);
void SetScreenFade(char param_1);
void SetScreenTransition(int param_1,undefined4 param_2,undefined4 *param_3,undefined4 *param_4);
void AlignUpdateRect(int *param_1,char param_2);
void UpdateScreenBits(void);
void DrawBorderPiece(int param_1,int *param_2,int *param_3,undefined4 *param_4);
void DrawBorderImage(ushort **param_1,undefined4 *param_2,uint *param_3,int *param_4,int param_5,ushort **param_6,byte param_7,byte param_8,char param_9,undefined param_10);
void DrawBorderImage(ushort **param_1,undefined4 *param_2,undefined4 *param_3,int *param_4,int param_5,ushort **param_6,undefined param_7,char param_8,char param_9);
int FixSqrt(uint param_1);
void PaintRectangle(undefined *param_1,undefined4 *param_2,uint param_3,int param_4,int *param_5);
void PaintLine(undefined *param_1,int param_2,int param_3,int param_4,int param_5,undefined4 param_6,uint param_7,int param_8,int *param_9);
void FrameRectangle(undefined *param_1,int *param_2,int param_3,uint param_4,int param_5,int *param_6);
void PaintAntiBevel(undefined *param_1,int *param_2,int *param_3,int param_4);
void PaintBevel(undefined *param_1,int *param_2,int *param_3,int param_4);
undefined * LookupBlitProc(int param_1,int param_2,char param_3,int param_4,char param_5);
void DoCopyImage(ushort **param_1,ushort **param_2,int *param_3,int *param_4,int param_5,int *param_6,char param_7,char param_8,undefined param_9);
void XPaintRect(undefined4 param_1,undefined4 *param_2,uint param_3,int param_4,int *param_5);
void PaintGradient(undefined *param_1,int *param_2,uint param_3,uint param_4,int param_5,uint param_6,int *param_7);
undefined4 BoundsSetup(int param_1);
void BlitSetup(uint *param_1);
void ResizeBlit(undefined4 *param_1,int param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int AverageImage(ushort **param_1,int param_2,undefined4 *param_3,char param_4,uint param_5);
void CopyBlitFast(int param_1);
undefined * GetCLUT24(int param_1);
undefined * GetCLUTYUV(int param_1);
void FilterBlitYUYVtoYUYV(int param_1,uint param_2);
void BiFilter1BlitYUYVtoYUYV(int param_1);
void BiFilter2BlitYUYVtoYUYV(int param_1,uint param_2);
void BiFilter3BlitYUYVtoYUYV(int param_1,uint param_2);
void BiFilter4BlitYUYVtoYUYV(int param_1,short *param_2);
void ScaleBlitYUYVtoYUYV(int param_1,uint param_2);
void ScaleBlitYUYVtoYUYVFlip(int param_1,uint param_2);
void ScaleBlit4toYUYV(int param_1,uint param_2);
void ScaleBlitVQtoYUYV(int param_1,uint param_2);
void ScaleBlit8toYUYV(int param_1,uint param_2);
void ScaleBlitAntiAlias8toYUYV(int param_1,int param_2);
void ScaleBlitAntiAlias4toYUYV(int param_1,int param_2);
void DoResize(int param_1,int param_2);
void ScaleBlitYUYVtoYUV(int param_1,uint param_2);
void ScaleBlit4toYUV(int param_1,uint param_2);
void ScaleBlit8toYUV(int param_1,uint param_2);
void ScaleBlitAlpha8toYUV(int param_1,uint param_2);
void ClearScanLine(undefined4 *param_1,int param_2,char param_3);
void AddScanLine(uint *param_1,uint *param_2,int param_3,char param_4,int param_5);
void BlendScanLine(uint *param_1,uint *param_2,int param_3,char param_4,int param_5);
void ScaleBlitYUVtoYUYV(int param_1,uint param_2);
void FastScaleBlitAlpha8toYUYV(int param_1,int param_2);
void FastScaleBlitAntiAlias4toYUYV(int param_1);
void FastScaleBlit4toYUYV(int param_1);
void DoStretchVertical(int param_1,int param_2);
void DoGrayShrink(int param_1,int param_2);
void ShrinkGrayScanLine(int param_1);
int CalcCLUE(ushort *param_1,byte param_2,ushort *param_3,byte param_4);
void BuildRemapTable(int param_1,int param_2,undefined *param_3);
void CopyBlitRemap8(int param_1);
void CopyBlitRemap4(int param_1);
void CopyBlitRemap4To8(int param_1);
void AddScanLineGray(uint *param_1,uint *param_2,int param_3,char param_4,int param_5);
void BlendScanLineGray(uint *param_1,uint *param_2,int param_3,char param_4,int param_5);
void FastScaleBlit4toYUV(int param_1);
void FastScaleBlit8toYUV(int param_1,int param_2);
void FastScaleBlitYUYVtoYUV(int param_1,int param_2);
void CopyScanLine(undefined4 *param_1,undefined4 *param_2,int param_3);
void ResizeScanLine(int param_1);
void ResizeScanLineCheap(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
ushort * GetGlyph(ushort *param_1,int param_2);
undefined4 AddCachedStrike(undefined4 param_1,undefined param_2,undefined4 param_3,undefined4 param_4);
undefined4 FontExists(uint param_1,char param_2);
void ReleaseStrike(void);
void MakeFontName(int param_1,int param_2,undefined4 param_3);
byte * FontToStrike(uint param_1,char param_2);
undefined4 GetFontFace(uint param_1,char param_2);
void TextBounds(undefined4 param_1,uint param_2,char param_3,byte *param_4,int param_5,int param_6,int param_7,int *param_8,undefined param_9);
void DecompressGlyph(byte *param_1,byte *param_2,int param_3,int param_4,int param_5);
uint PaintText(ushort **param_1,uint param_2,char param_3,byte *param_4,int param_5,uint param_6,int param_7,int param_8,uint param_9,undefined4 param_10,ushort **param_11,undefined param_12);
int TextMeasure(int param_1,uint param_2,char param_3,byte *param_4,int param_5);
int GetFontAscent(uint param_1,char param_2);
int GetFontDescent(uint param_1,char param_2);
int GetFontLeading(uint param_1,char param_2);
undefined4 IsTwoByte(char param_1,char param_2);
bool IsThreeByte(char param_1,char param_2);
undefined4 CheckNECorJISEncoding(char *param_1,int param_2);
undefined4 CheckSJISEncoding(byte *param_1,int param_2,undefined4 *param_3);
undefined4 CheckEUCEncoding(byte *param_1,int param_2);
uint GuessCharacterEncoding(byte *param_1,int param_2,int *param_3);
int CleanJISText(byte **param_1,int param_2,char param_3);
uint * ConvertToJISText(undefined4 *param_1,uint param_2);
int LookupNextCharacter(int param_1,byte **param_2,int *param_3);
uint GetStyledTextParameters(uint param_1,char param_2,undefined4 param_3,int param_4,undefined4 *param_5,undefined4 *param_6,int *param_7);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void ZeroVector(undefined4 *param_1);
void CopyVector(undefined4 *param_1,undefined4 *param_2);
undefined4 VectorQuantizer::VectorQuantizer(undefined4 param_1);
void VectorQuantizer::~VectorQuantizer(int **param_1,uint param_2);
void VectorQuantizer::Reset(undefined4 *param_1,char param_2);
int VectorQuantizer::Start(int *param_1,undefined4 *param_2,int *param_3,int param_4,ushort param_5,undefined2 param_6);
undefined4 VectorQuantizer::Continue(undefined4 *param_1,char param_2);
int VectorQuantizer::GetBitMap(int *param_1,char param_2);
void AccumulateVector(int *param_1,int *param_2);
int ClipByte(short param_1);
void CompactCode(short *param_1,uint *param_2);
void ExpandCode(undefined4 param_1,undefined4 param_2,ushort *param_3);
int VectorQuantizer::MatchVectorToCodeBook(int param_1,int *param_2);
undefined4 VectorQuantizer::InCodeBook(int param_1,short *param_2);
undefined4 VectorQuantizer::Iterate(int param_1);
int VectorQuantizer::ReduceCodebook(int param_1);
undefined4 CLUTSize(short param_1);
undefined4 * ImageData::ChangeSpare(undefined4 *param_1);
undefined4 GetImageData(int *param_1,int param_2);
void AddImageData(undefined4 param_1,undefined4 param_2);
void RemoveImageData(int param_1);
void ImageData::ImageData(undefined4 *param_1);
void ImageData::~ImageData(int **param_1,uint param_2);
void ImageData::DeleteStream(int param_1);
void ImageData::DeleteBitMap(int param_1);
void ImageData::SetBounds(int param_1,undefined4 *param_2);
void ImageData::Draw(int *param_1,undefined4 *param_2,undefined4 param_3,undefined param_4);
bool ImageData::DrawingIdle(int *param_1,int *param_2,int *param_3,int *param_4);
bool ImageData::DoDrawingIdle(int *param_1,int *param_2);
void ImageData::SetKeepBitMap(int *param_1,int param_2);
void ImageData::MapRectangle(int param_1,int *param_2);
void ImageData::DrawUpdate(int param_1,undefined4 *param_2);
void ImageData::SetFastScale(int param_1,uint param_2);
bool ImageData::GetBounds(int *param_1,int *param_2);
int ImageData::GetStatus(int param_1);
undefined4 ImageData::IsGIFImage(void);
undefined4 ValidateImageType(int *param_1,int *param_2);
int * ImageData::NewImageData(int *param_1);
int * ImageData::NewImageData(undefined4 *param_1);
undefined4 ImageData::PrepData(int *param_1);
void ImageData::SetIsBackground(int param_1,char param_2);
void ImageData::SetStream(int param_1,int param_2);
void ImageData::Reset(int *param_1,char param_2);
int ImageData::GetBitMap(int *param_1);
void ImageData::DrawTiled(int *param_1,int param_2,int param_3,int param_4,int param_5,int param_6,int param_7,int *param_8,int *param_9,char param_10,char param_11,int param_12);
undefined4 BitMapImage::PushData(int *param_1,char param_2,int *param_3);
void BitMapImage::Write(int param_1,int *param_2,undefined4 *param_3);
undefined4 * BorderImage::BorderImage(undefined4 *param_1);
void BorderImage::~BorderImage(int **param_1,uint param_2);
void BorderImage::SetKeepBitMap(int param_1,int param_2);
int * BorderImage::NewBorderImage(byte *param_1,undefined4 param_2,undefined4 param_3,undefined4 *param_4);
int ** BorderImage::ReadBIF(int param_1,byte *param_2,undefined4 param_3,undefined4 *param_4);
undefined4 BorderImage::AddImage(int param_1,undefined4 *param_2);
void BorderImage::AddImage(int param_1,int param_2);
undefined4 BorderImage::AverageColor(int param_1);
void BorderImage::Draw(int param_1,int *param_2,ushort **param_3,int param_4);
void BorderImage::Draw(int param_1,ushort **param_2,int *param_3,ushort **param_4,int param_5);
void BorderImage::Draw(int param_1,uint *param_2,undefined4 *param_3,int param_4);
void BorderImage::SetVisible(int param_1,uint param_2);
void BorderImage::ReDraw(int param_1);
undefined4 BorderImage::GetFrameCount(int param_1);
void BorderImage::GetInnerBounds(int param_1,int *param_2);
void BorderImage::GetOuterBounds(int param_1,int *param_2);
undefined4 * BorderImage::InnerBounds(undefined4 *param_1,int param_2);
undefined4 * BorderImage::PadBounds(undefined4 *param_1,int param_2);
void BorderImage::Idle(int param_1,char param_2);
void BorderImage::PrepDraw(int param_1);
void BorderImage::SetFrame(int param_1,int param_2);
void BorderImage::SetAnimationRange(int param_1,int param_2,int param_3);
void BorderImage::SetInnerBounds(int param_1,undefined4 *param_2);
void BorderImage::SetPadBounds(int param_1,undefined4 *param_2);
void BorderImage::SetHasInnerCorners(int param_1,uint param_2);
void BorderImage::SetDrawCenter(int param_1,uint param_2);
uint BorderImage::GetDrawCenter(int param_1);
void BorderImage::SetScaleEdges(int param_1,uint param_2);
void BorderImage::SetScaleCenter(int param_1,uint param_2);
void FWImage::~FWImage(int **param_1,uint param_2);
void FWImage::Draw(int *param_1,int *param_2,int *param_3,undefined param_4);
uint FWImage::DrawingIdle(int *param_1,int *param_2,int *param_3,int *param_4);
void FWImage::CreatePlayer(int param_1);
int FWImage::GetPlayer(int *param_1,undefined4 *param_2,undefined4 *param_3);
undefined4 FWImage::PushData(int *param_1,char param_2);
void FWImage::Reset(int *param_1,char param_2);
void GIFImage::~GIFImage(int **param_1,uint param_2);
bool GIFImage::IsLooping(int param_1);
void GIFImage::Reset(int *param_1,char param_2);
void GIFImage::SetFlip(int param_1,uint param_2,uint param_3);
bool GIFImage::DrawingIdle(int *param_1,int *param_2,int *param_3,int *param_4);
void GIFImage::Draw(int *param_1,int *param_2,int *param_3,undefined param_4);
void GIFImage::DrawUpdate(int param_1,undefined4 *param_2);
int GIFImage::GetBitMap(int *param_1);
bool GIFImage::PushData(int *param_1,byte param_2,int *param_3);
void GIFImage::DeleteBitMap(int param_1);
void GIFImage::SetBounds(int param_1,undefined4 *param_2);
void JPEGImage::~JPEGImage(int **param_1,uint param_2);
void JPEGImage::DeleteJPEGDecoder(int param_1);
bool JPEGImage::PushData(int *param_1,char param_2,int *param_3);
void JPEGImage::Reset(int *param_1,char param_2);
int XBitMapImage::ParseDimension(int param_1,byte *param_2,int param_3,char param_4);
int XBitMapImage::DecodeXBM(int param_1,byte *param_2,int param_3);
void XBitMapImage::Reset(int *param_1,char param_2);
bool XBitMapImage::PushData(int *param_1,char param_2,int *param_3);
void FidoImage::Reset(int *param_1,char param_2);
undefined4 FidoImage::PushData(int *param_1,char param_2,int *param_3);
void MirrorImage::~MirrorImage(int **param_1,uint param_2);
void MirrorImage::Draw(int param_1,int *param_2,undefined4 param_3,undefined4 param_4);
void MirrorImage::DrawTiled(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,undefined4 param_9,byte param_10,byte param_11,undefined4 param_12);
void MirrorImage::AverageColor(int param_1);
undefined MirrorImage::DrawingIdle(int param_1,int *param_2,int *param_3,undefined4 param_4);
undefined MirrorImage::PushData(int param_1,undefined param_2,undefined4 param_3);
undefined MirrorImage::IsDrawingComplete(int param_1);
undefined4 MirrorImage::GetBitMap(int param_1);
undefined MirrorImage::GetBounds(int param_1,undefined4 param_2);
void AddMirrorDraw(int param_1);
void RemoveMirrorDraw(int param_1);
undefined4 DrawMirrorImages(undefined4 param_1);
void ClearMirrorImages(void);
void CachedImageData::~CachedImageData(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void FidoImage::~FidoImage(int **param_1,uint param_2);
void XBitMapImage::~XBitMapImage(int **param_1,uint param_2);
void BitMapImage::~BitMapImage(int **param_1,uint param_2);
void ImageData::SetPriority(int param_1,uint param_2);
int CopyColors(char *param_1,char *param_2,int param_3);
undefined4 * GIF::GIF(undefined4 *param_1);
void GIF::~GIF(int **param_1,uint param_2);
void GIF::Rewind(int *param_1);
void GIF::Purge(int param_1);
void GIF::Reset(int *param_1,char param_2);
void GIF::ResetLZW(int param_1);
void GIF::ResetDrawing(int *param_1);
uint GIF::GetIsSafe(int param_1);
undefined4 GIF::GetIsBetweenFrames(int param_1);
void GIF::GetBounds(int param_1,undefined4 *param_2);
void GIF::SetBounds(int param_1,undefined4 *param_2);
void GIF::SetKeepBitMap(int param_1,int param_2);
void GIF::SetIsBackground(int param_1,uint param_2);
void GIF::SetIsTrusted(int param_1,uint param_2);
void GIF::SetFastScale(int param_1,uint param_2);
void GIF::SetDrawThrough(int param_1,uint param_2);
undefined4 GIF::GetBitMap(int param_1,undefined4 *param_2);
byte * GIF::Write(int *param_1,byte *param_2,byte *param_3,uint param_4,byte param_5,undefined4 *param_6);
int GIF::ReadGlobalHeader(int param_1,char *param_2,int param_3);
void SetColorTableEntry(ushort *param_1,int param_2,uint param_3);
int GIF::ReadComment(undefined4 param_1,int param_2,int param_3);
undefined4 GIF::ReadGraphicControl(int *param_1,int param_2,int param_3);
undefined4 GIF::GetLoopCount(int param_1);
int GIF::ReadExtension(int *param_1,byte *param_2,int param_3);
void GIF::MapRectangles(int param_1,int *param_2,int *param_3);
int GIF::ReadImageHeader(int *param_1,char *param_2,int param_3);
uint GIF::LoadBits(int param_1);
int GIF::FillBuffer(int param_1,byte *param_2,int param_3);
int GIF::InitLZW(int param_1,char *param_2,int param_3);
void GIF::StartLZW(int param_1,uint param_2);
undefined2 GIF::DoClearCode(int param_1);
uint GIF::DecodeLZW(int param_1);
void GIF::DecodeTrustedLZW(int param_1);
void GIF::DeletePreviousBuffers(int param_1);
void GIF::SetupPreviousBuffers(int param_1);
int GIF::SetupImageBody(int *param_1,char *param_2,int param_3);
undefined4 GIF::GetPageBackColor(void);
void GIF::SetupDrawRectangles(int param_1,int *param_2,int *param_3);
void GIF::DrawStrip(int *param_1);
void GIF::DisposeImage(int *param_1);
byte * GIF::SkipData(int *param_1,byte *param_2,int param_3);
uint GIF::DecodeScanline4(int param_1);
int GIF::ReadImageBody(int *param_1,byte *param_2,int param_3);
uint GIF::DecodeTrustedScanline4(int param_1);
undefined4 GIF::UpdateRow(int *param_1,int param_2,int *param_3);
uint GIF::ReadTrustedImageBody(int *param_1,byte *param_2,int param_3);
void GIF::DoDraw(int *param_1);
void GIF::Draw(int *param_1,int param_2,undefined4 *param_3);
void GIF::SetFlip(int param_1,uint param_2,uint param_3);
void GIF::SetDrawingInstance(int *param_1,int param_2,undefined4 param_3,undefined4 param_4,undefined param_5,undefined param_6,undefined param_7,undefined param_8,undefined param_9,undefined param_10,undefined4 param_11,undefined4 param_12);
void GIF::ClearDrawingInstances(int *param_1);
void GIF::GetDrawBounds(int *param_1,int *param_2);
void DrawingInstance::~DrawingInstance(int **param_1,uint param_2);
void ScreenSaver::ScreenSaver(undefined *param_1);
void ScreenSaver::~ScreenSaver(int **param_1,uint param_2);
void ScreenSaver::Start(char *param_1);
void ScreenSaver::Idle(char *param_1);
void ScreenSaver::Stop(char *param_1);
void StepObject(int *param_1);
int * CreateObject(int param_1,undefined4 param_2,int param_3,int param_4);
void NextFormat(void);
void ScreenSaverIdle(void);
void ScreenSaverStart(void);
void ScreenSaverStop(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void DumpJPEGDecode(void);
undefined4 InitJPEGDecoder(uint **param_1);
void ResetJPEGDecoder(int param_1);
void EndJPEGImage(int param_1);
uint ** NewJPEGDecoder(undefined4 *param_1,uint param_2,uint *param_3,undefined4 *param_4,uint *param_5,uint *param_6);
void PurgeJPEGDecoder(undefined4 *param_1);
void DisposeJPEGDecoder(int **param_1);
void ResetScan(int param_1);
void SetupScan(int param_1);
void BeginInterval(int param_1);
void SaveState(int param_1);
undefined4 RestoreState(int param_1);
undefined4 DecodeScan(int param_1,short param_2);
int SkipScan(int param_1,byte *param_2,int param_3);
byte * ScanWrite(byte **param_1,byte *param_2,byte *param_3);
int NextMarker(undefined2 *param_1,int param_2,byte *param_3,undefined2 *param_4);
byte * JPEGWrite(byte **param_1,undefined2 *param_2,byte *param_3,undefined4 *param_4);
undefined4 SetMaxScansToDisplay(uint **param_1,undefined2 param_2);
int HuffmanDecode(int param_1,int param_2,ushort *param_3);
undefined4 DecodeComponentPro(int param_1,int param_2,int param_3,undefined2 *param_4);
undefined4 DecodeComponent(int param_1,short param_2,int param_3,short *param_4);
undefined4 SetupDrawing(int param_1);
void DrawBlock(uint *param_1,int param_2,short *param_3);
void DrawMCU(int param_1,short *param_2,int param_3,int param_4);
void DrawMCUPiece(int param_1,short *param_2,int param_3,int param_4);
undefined4 MakeYUYVSlice(int param_1,int *param_2,int param_3,int param_4,int param_5,int param_6,uint param_7,int param_8);
undefined4 MakeYUVSlice(int param_1,int *param_2,int param_3,int param_4,int param_5,int param_6,int param_7,int param_8);
undefined4 DrawSingleJPEGRow(int param_1);
void ScaledIDCT(uint *param_1,undefined2 *param_2,uint param_3);
void TransformBlocks(int param_1,int param_2,int param_3,uint *param_4,uint *param_5);
void DoTransform(int param_1,int param_2,uint *param_3);
void ResetMultiPassState(int param_1);
undefined4 AllocateBlockBuffer(int param_1);
undefined4 InterpretSOF(int param_1,char *param_2);
undefined4 InterpretSOS(int param_1,byte *param_2,short param_3);
undefined4 InterpretDQT(int param_1,ushort *param_2,short param_3);
void MakeFastHuffmanTable(int param_1);
undefined4 SetupHuffmanTable(int param_1);
undefined4 InterpretDHT(int param_1,byte *param_2,int param_3);
undefined4 InterpretDRI(int param_1,undefined2 *param_2);
undefined4 InterpretAPP(void);
undefined4 InterpretCOM(void);
undefined4 JPEGBounds(int param_1,int param_2,undefined4 *param_3);
void AnchorExtension::~AnchorExtension(int **param_1,uint param_2);
void AnchorExtension::SetMappedImage(undefined4 *param_1,undefined4 param_2);
void AnchorExtension::SetName(int param_1,char *param_2);
void AnchorExtension::SetOnClick(int param_1,char *param_2);
void AnchorExtension::SetOnMouseOver(int param_1,char *param_2);
void AnchorExtension::SetOnMouseOut(int param_1,char *param_2);
void AnchorExtension::SetTarget(int param_1,char *param_2);
void AnchorExtension::SetTransition(int param_1,undefined4 param_2);
void AnchorExtension::SetTransitionSource(int param_1,char *param_2);
void AnchorEnd::~AnchorEnd(int **param_1,uint param_2);
undefined4 * AnchorEnd::AnchorEnd(undefined4 *param_1);
int * AnchorEnd::FindAnchorStart(int param_1);
uint AnchorEnd::HasProperty(undefined4 param_1,int param_2);
undefined4 AnchorEnd::IsSeparable(int param_1,undefined4 param_2);
void AnchorEnd::LayoutComplete(int param_1,int param_2);
void Anchor::Anchor(undefined4 *param_1);
void Anchor::~Anchor(int **param_1,uint param_2);
void Anchor::Select(int *param_1,int param_2);
void Anchor::Deselect(int *param_1,int param_2);
int * Anchor::FindAnchorEnd(int param_1);
void Anchor::GetBounds(int *param_1,int *param_2);
int Anchor::GetExtension(int param_1);
void Anchor::GetFirstRegionBounds(int *param_1,undefined4 *param_2);
void Anchor::GetSelectionRegion(int *param_1,int *param_2);
void Anchor::GetTransitionFromBounds(int *param_1,int param_2,undefined4 param_3);
void Anchor::NewURL(int param_1);
uint Anchor::HasProperty(undefined4 param_1,int param_2);
bool Anchor::IsLayoutComplete(int param_1);
bool Anchor::IsSelectable(int *param_1);
bool Anchor::IsSelectableSupported(int *param_1,int param_2);
undefined4 Anchor::IsSeparable(int param_1,undefined4 param_2);
void Anchor::ResetHREF(int param_1);
void Anchor::SetAttribute(int param_1,int param_2,undefined4 param_3);
void Anchor::SetAttributeStr(int param_1,int param_2,char *param_3);
void Anchor::SetMappedImage(int param_1,undefined4 param_2);
void Anchor::SetOnClick(int param_1,char *param_2);
void Anchor::SetOnMouseOver(int param_1,char *param_2);
void Anchor::SetOnMouseOut(int param_1,char *param_2);
void Anchor::SetTarget(int param_1,char *param_2);
void Anchor::SetVisited(int param_1);
void AnimationImage::~AnimationImage(int **param_1,uint param_2);
void Animation::Animation(undefined4 *param_1);
void Animation::~Animation(int **param_1,uint param_2);
void Animation::Draw(int *param_1,int param_2,int *param_3);
void Animation::GetLayoutHeight(int *param_1);
void Animation::GetLayoutWidth(int *param_1);
undefined4 Animation::SetCurrentFrame(int *param_1,uint param_2,int *param_3);
undefined4 Animation::AllSynchronized(int *param_1);
void Animation::SuspendAnimation(int *param_1);
void Animation::ResumeAnimation(int *param_1);
uint Animation::Idle(int *param_1,int *param_2,undefined4 param_3,int *param_4);
uint Animation::HasProperty(undefined4 param_1,int param_2);
undefined4 Animation::AnimationIdle(int *param_1,undefined *param_2,int *param_3,uint *param_4,uint *param_5);
void Animation::LayoutComplete(int *param_1,int param_2);
void Animation::Prepare(int *param_1);
void Animation::PushLoopFrame(int param_1,int *param_2,undefined4 param_3);
bool Animation::PopLoopFrame(int param_1,int *param_2);
void Animation::SetAnimationTarget(int *param_1,int param_2);
int Animation::ParseData(int *param_1,undefined4 param_2,undefined4 param_3,int *param_4);
void Animation::Reset(int param_1);
void Animation::ForceReload(int param_1);
void Animation::SetAttribute(int param_1,int param_2,int param_3,char param_4);
void Animation::SetAttributeStr(int param_1,int param_2,byte *param_3);
void Animation::SetShouldLoop(int param_1,uint param_2);
void Animation::SetTop(int param_1,undefined4 param_2);
void Animation::SetLeft(int param_1,undefined2 param_2);
void Animation::Start(int param_1);
void Animation::Stop(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void fft(int param_1,int param_2,int param_3);
void FreqResp(int param_1,int param_2);
void AudioScope::AudioScope(undefined4 *param_1);
void AudioScope::~AudioScope(int **param_1,uint param_2);
void AudioScope::SetColor(int param_1,int param_2,undefined4 param_3);
void AudioScope::Setup(int param_1);
void AudioScope::Draw(int *param_1,int param_2,int *param_3);
void AudioScope::DrawTrace(int param_1,short *param_2,char param_3);
void AudioScope::DrawHLine(int param_1,int param_2,int param_3);
void AudioScope::DrawMax(int param_1);
undefined4 AudioScope::Idle(int *param_1,int param_2);
void AudioScope::SetAttribute(int param_1,int param_2,int param_3,char param_4);
void AudioScope::SetAttributeStr(int param_1,int param_2,byte *param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Cell::Cell(undefined4 *param_1);
void Cell::~Cell(int **param_1,uint param_2);
void Cell::Draw(int *param_1,int param_2,int *param_3);
void Cell::DrawBackground(int *param_1,int param_2,int *param_3);
int Cell::GetColumn(int param_1);
int Cell::GetColumnSpan(int param_1);
int Cell::GetKnownHeight(int param_1);
int Cell::GetKnownWidth(int param_1);
int Cell::GetInheritedKnownHeight(int param_1);
int Cell::GetInheritedKnownWidth(int param_1);
int Cell::GetRow(int param_1);
int Cell::GetRowSpan(int param_1);
uint Cell::HasProperty(undefined4 param_1,int param_2);
void Cell::ReduceTextSize(int *param_1,int param_2);
void Cell::SetAttribute(int param_1,int param_2,int param_3,uint param_4);
void Cell::SetColumnSpan(int param_1,undefined2 param_2);
void Cell::SetRowSpan(int param_1,undefined2 param_2);
void Cell::SetRowAndCol(int param_1,undefined2 param_2,undefined2 param_3);
void Cell::VAlignCell(int *param_1,int param_2);
uint * GetArgString(int param_1,char param_2);
bool ParseHex(byte *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
bool ParseDec(byte *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ActivateNetwork(void);
void AdjustActiveArea(int *param_1);
void AudioFastForward(void);
void AudioPause(void);
void AudioPlay(void);
void AudioRewind(void);
void AudioStop(void);
void BackgroundMusic(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void BeginDialing(void);
void BottomOfPage(void);
void ChangeGotoPanelText(int *param_1);
void ChatAddMessage(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatAddPrivateMessage(int *param_1);
void ChatJoinChannel(int *param_1);
void ClearFindPanelText(void);
void ClearSendPanelText(void);
void CloseAllPanels(void);
void CloseAddressPanel(void);
void CloseKeyboard(void);
void ClosePrintWindow(int *param_1);
void ConfirmPhoneSetup(int *param_1);
void ConfirmAdvancedSetup(int *param_1);
void ConfirmBYOISPSetup(int *param_1);
void DoTourist(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void DoPrinterFunction(int *param_1);
void EditAddresses(void);
void Find(int *param_1);
void ForceRestart(void);
void GoBack(void);
void GoHome(void);
void GoToAboutPage(void);
void GoToFavoritePage(void);
void GoToPhoneSetup(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void GoToAdvancedSetup(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void GoToInfoPage(void);
void GoToBYOISPIntro(void);
void GoToConfigureBYOISP(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void HangupPhone(int *param_1,uint *param_2,char *param_3,uint param_4);
void HogHeap(int *param_1);
void HogCache(int *param_1);
void InsertAddress(int *param_1);
void InsertChar(int *param_1);
void JellyScript(int *param_1);
void JellyScriptCancelButton(void);
void JellyScriptPromptCancelButton(void);
void JellyScriptPromptOKButton(int *param_1);
void Karaoke(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void KillProtocols(void);
void ListChannelUsers(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void LogIntoPage(int *param_1);
void LogoShown(void);
void OpenAddressPanel(void);
void OpenChatNewChannelPanel(void);
void OpenChatPrivateChannelPanel(void);
void OpenChatWhisperPanel(void);
void OpenFindPanel(void);
void OpenGoPanel(void);
void OpenInfoPanel(void);
void OpenKeyboard(void);
void OpenLoginPanel(void);
void OpenSavePanel(void);
void OpenSendPanel(void);
void OpenPrintPanel(void);
void PowerOff(int *param_1);
void ReconnectChat(void);
void RedialPhone(void);
void ReloadPage(void);
void Relogin(void);
void ResetNVAndPowerOff(void);
void RebootNow(void);
void RestartNow(void);
void SaveToFavorite(int *param_1);
void ScreenOptions(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void SendPage(int *param_1);
void SetAdvancedOptions(int *param_1);
void SetDefaultColors(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void SetFontFromString(byte *param_1,char param_2);
void SetFont(int *param_1);
void SetScreenBorder(int *param_1,undefined4 param_2,uint param_3,short *param_4);
void SetSetupValue(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void SetSpatialNavigation(int *param_1);
void ShowAlert(int *param_1);
void ShowPrintWindow(int *param_1);
void ShowSplash(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ShowSecurityInfo(int *param_1);
void SubmitForm(int *param_1);
void TextCommand(int *param_1,undefined4 param_2,undefined4 param_3,uint param_4);
void TopOfPage(void);
void UnpluggedAndMoved(void);
void Unplugged(void);
void UpdateFlash(int *param_1);
void UseEnglishUserInterface(int *param_1);
void SaveToSmartCard(int *param_1);
bool IsClientFunction(byte *param_1);
int FindClientFunctionNameIndex(byte *param_1);
undefined4 ExecuteClientFunction(byte *param_1,char *param_2,undefined4 param_3,undefined4 param_4);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Code::~Code(int **param_1,uint param_2);
void Code::NewCode(int *param_1,int *param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * HasHTMLAttributes::HasHTMLAttributes(undefined4 *param_1);
void HasHTMLAttributes::~HasHTMLAttributes(int **param_1,uint param_2);
void HasHTMLAttributes::SetAttribute(void);
void HasHTMLAttributes::SetAttributeStr(void);
void Displayable::Displayable(undefined4 *param_1);
void Displayable::~Displayable(int **param_1,uint param_2);
void Displayable::AddChild(undefined4 param_1,int *param_2);
void Displayable::AddChildAfter(undefined4 param_1,int *param_2);
undefined4 Displayable::AlignScrollPoint(undefined4 param_1,undefined4 param_2);
undefined4 Displayable::DispatchInputType(void);
void Displayable::ExecuteScript(int *param_1,int param_2,char *param_3,uint **param_4,uint param_5,char *param_6,char param_7,char param_8);
void Displayable::GetBounds(int *param_1,int *param_2);
void Displayable::GetBoundsTight(int *param_1);
void Displayable::GetCursorSelectableRectangle(int *param_1,undefined4 param_2);
void Displayable::GetFirstRegionBounds(int *param_1);
int * Displayable::GetFrameDocument(int *param_1);
undefined4 Displayable::GetImageMap(int *param_1);
undefined4 Displayable::GetJSObjectName(void);
void Displayable::GetSelectionRegion(int *param_1,int *param_2);
void Displayable::GetTransitionFromBounds(int *param_1,undefined4 param_2,undefined4 param_3);
void Displayable::GetLayoutHeight(int *param_1);
void Displayable::GetLayoutWidth(int *param_1);
void Displayable::GetMinUsedWidth(int *param_1);
undefined4 Displayable::HasProperty(void);
uint Displayable::IsCancellable(int param_1);
bool Displayable::IsCursorSelectable(int *param_1);
undefined4 Displayable::IsExplicitLineBreak(int param_1);
uint Displayable::IsFloatingLayoutComplete(int param_1);
bool Displayable::IsHighlightable(int *param_1);
bool Displayable::IsLineBreak(int param_1);
undefined Displayable::IsSelectableSupported(int *param_1);
uint Displayable::IsSelectionInset(int param_1);
void Displayable::Layout(void);
void Displayable::LayoutComplete(int param_1);
void Displayable::FloatingLayoutComplete(int param_1);
void Displayable::RemoveChild(undefined4 param_1,int *param_2);
void Displayable::ResetLayout(int param_1);
void Displayable::SelectFirst(void);
void Displayable::SetParent(void);
undefined4 * SpatialDisplayable::SpatialDisplayable(undefined4 *param_1);
void SpatialDisplayable::~SpatialDisplayable(int **param_1,uint param_2);
uint SpatialDisplayable::HasProperty(undefined4 param_1,int param_2);
void SpatialDisplayable::SetLeft(int param_1,undefined2 param_2);
void SpatialDisplayable::SetTop(int param_1,undefined4 param_2);
void CompositeDisplayable::CompositeDisplayable(undefined4 *param_1);
void CompositeDisplayable::~CompositeDisplayable(int **param_1,uint param_2);
void CompositeDisplayable::AddChild(int param_1,int *param_2);
void CompositeDisplayable::AddChildAfter(int param_1,int *param_2,uint param_3);
void CompositeDisplayable::Draw(int *param_1,int param_2,int *param_3);
void CompositeDisplayable::GetFirstChild(int param_1);
void CompositeDisplayable::GetLastChild(int param_1);
char CompositeDisplayable::ReadyForLayout(int *param_1,undefined4 param_2);
void CompositeDisplayable::Layout(int *param_1,undefined4 param_2,undefined4 param_3);
void CompositeDisplayable::LayoutComplete(int *param_1,undefined4 param_2,undefined4 param_3);
void CompositeDisplayable::RemoveChild(int param_1,int *param_2);
void CompositeDisplayable::ResetLayout(int *param_1,undefined4 param_2);
void CompositeDisplayable::SetLeft(int *param_1,int param_2);
void CompositeDisplayable::SetTop(int *param_1,int param_2);
undefined4 * DynamicDisplayable::DynamicDisplayable(undefined4 *param_1);
void DynamicDisplayable::~DynamicDisplayable(int **param_1,uint param_2);
uint DynamicDisplayable::HasProperty(undefined4 param_1,int param_2);
void DynamicDisplayable::InvalidateBounds(int *param_1,int *param_2);
undefined Displayable::IsUpgradeBlock(int *param_1);
undefined Displayable::IsTextField(int *param_1);
undefined Displayable::IsText(int *param_1);
undefined Displayable::IsTable(int *param_1);
undefined Displayable::IsRootFrameDocument(int *param_1);
undefined Displayable::IsSpatial(int *param_1);
undefined Displayable::IsScrollingList(int *param_1);
undefined Displayable::IsRadio(int *param_1);
undefined Displayable::IsInputImage(int *param_1);
undefined Displayable::IsImageMapSelectable(int *param_1);
undefined Displayable::IsImage(int *param_1);
undefined Displayable::IsFutureSplashSelectable(int *param_1);
undefined Displayable::IsFrameDocument(int *param_1);
undefined Displayable::IsEmbedded(int *param_1);
undefined Displayable::IsDynamic(int *param_1);
undefined Displayable::IsDivider(int *param_1);
undefined Displayable::IsCell(int *param_1);
undefined Displayable::IsBullet(int *param_1);
undefined Displayable::IsAnimation(int *param_1);
undefined Displayable::IsAnchorEnd(int *param_1);
undefined Displayable::IsAnchor(int *param_1);
bool SelectionsEqual(undefined4 param_1,undefined4 param_2);
undefined4 * Document::Document(undefined4 *param_1);
void Document::~Document(int **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
int * Document::AddAudio(int param_1,int param_2,int *param_3,int param_4,byte param_5);
void Document::AddFrame(int param_1,int param_2);
void Document::AddPrefetcher(int param_1,int *param_2);
void Document::AddScript(int param_1,int param_2,char *param_3,char *param_4,char *param_5,uint param_6,char *param_7,int param_8,uint param_9);
void Document::AddSelectable(int param_1,int *param_2);
void Document::AddSideBar(int param_1,int param_2);
void Document::AddTitleText(int param_1,char *param_2);
uint * Document::CopyURL(int param_1);
void Document::Draw(int param_1,undefined4 param_2);
void Document::DrawBackground(int param_1,int *param_2);
void Document::Finalize(int param_1);
void Document::FindFragment(int param_1,char *param_2);
undefined4 * Document::FindSelectable(undefined4 *param_1,int param_2,int param_3);
int * Document::FindString(int param_1,byte *param_2);
int * Document::FindStringBackwards(int param_1,byte *param_2);
void Document::ForceReload(int param_1);
int Document::GetAnimationsDone(int param_1);
undefined4 Document::GetAddressText(int param_1);
void Document::GetBaseResource(int param_1);
undefined4 Document::GetBackgroundColor(int param_1);
undefined4 Document::GetBackgroundStatus(int param_1);
int Document::GetHeight(int param_1);
undefined4 Document::GetNoScrollWidth(int param_1,char param_2);
uint Document::GetPercentComplete(int param_1);
int Document::GetResource(int param_1);
undefined4 Document::GetRootDisplayable(int param_1);
undefined4 Document::GetSelectable(int param_1,int param_2);
undefined4 Document::GetSelectableCount(int param_1,int param_2);
undefined4 Document::GetStatus(int param_1);
uint Document::GetSkipBack(int param_1);
undefined4 Document::GetTitle(int param_1);
undefined4 Document::GetView(int param_1);
int Document::GetViewContentHeight(int param_1);
undefined4 Document::GetVisibleImageStatus(int param_1,int *param_2);
bool Document::HasBackgroundImage(int param_1);
byte Document::Idle(int param_1,int **param_2,char *param_3,uint **param_4);
void Document::IdleBackground(int param_1,int param_2);
undefined4 Document::IdleScript(int param_1,int **param_2,char param_3,uint **param_4);
undefined4 Document::IsLayoutCurrent(int param_1);
void Document::Layout(int param_1);
undefined4 Document::MapTransitionAttribute(undefined4 param_1);
void Document::Relayout(int param_1);
undefined4 Document::RemoveAudio(int param_1);
void Document::RemoveFrame(int param_1,int *param_2);
void Document::RemoveFrameSelectables(int param_1,int *param_2);
void Document::SetAttribute(int param_1,undefined4 param_2,uint param_3,undefined param_4);
void Document::SetAttributeStr(int param_1,int param_2,undefined4 *param_3);
void Document::SetLogoImage(int param_1,undefined4 param_2);
void Document::SetMargins(int param_1,uint param_2,undefined param_3);
void Document::SetOnError(int param_1,char *param_2);
void Document::SetPriority(int param_1,uint param_2);
void Document::SetResource(int param_1,int *param_2);
void Document::SetSaveAction(int param_1,char *param_2);
void Document::SetSaveLabel(int param_1,char *param_2);
void Document::SetSaveMessage(int param_1,char *param_2);
void Document::SetSendAction(int param_1,char *param_2);
void Document::SetSendLabel(int param_1,char *param_2);
void Document::SetSendMessage(int param_1,char *param_2);
void Document::SetSideBar(int param_1,undefined4 param_2);
void Document::SetTextCacheReserveSize(int param_1,undefined2 param_2);
void Document::SetTitle(int param_1,char *param_2);
void Document::SetView(int param_1,undefined4 param_2);
void Document::StartAnimations(int param_1);
void Document::StartReloadTiming(int param_1);
void Document::StopReloadTiming(int param_1);
void ScaleThumbnail(uint **param_1,short **param_2);
void Document::ThumbnailStart(int param_1);
undefined4 Document::ThumbnailIdle(int param_1);
int Document::ThumbnailTake(int param_1);
void Document::UpdatePriorities(int param_1);
undefined Document::GetCharacterEncoding(int param_1);
void Document::SetCharacterEncoding(int param_1,char param_2,int param_3);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 Document::GetFrame(int param_1,int param_2);
void Builder::Builder(undefined4 *param_1);
void Builder::~Builder(int **param_1,uint param_2);
void Builder::Finalize(int *param_1);
void Builder::SetDisplayableAttributes(undefined4 param_1,int *param_2,int *param_3);
undefined4 * DocumentBuilder::DocumentBuilder(undefined4 *param_1);
void DocumentBuilder::~DocumentBuilder(int **param_1,uint param_2);
void DocumentBuilder::AbortAndFinalize(int *param_1);
void DocumentBuilder::AddArea(int param_1,int *param_2);
void DocumentBuilder::AddAudioScope(int param_1,int *param_2);
void DocumentBuilder::AddChat(int param_1,int *param_2,undefined4 param_3,int param_4);
void DocumentBuilder::AddChatChannelList(int param_1,int *param_2);
void DocumentBuilder::AddChatTranscript(int param_1,int *param_2);
void DocumentBuilder::AddBackgroundSound(int param_1,int *param_2);
void DocumentBuilder::AddBase(int param_1,int *param_2);
void DocumentBuilder::AddBody(int param_1,int *param_2);
void DocumentBuilder::AddBullet(int param_1,int *param_2,undefined4 param_3,undefined4 param_4);
void DocumentBuilder::AddClock(int param_1,int *param_2);
void DocumentBuilder::AddDisplayable(int param_1,int *param_2);
void DocumentBuilder::AddDivider(int param_1,int *param_2);
void DocumentBuilder::AddEmbedded(int param_1,int *param_2);
void DocumentBuilder::AddFrame(int param_1,int *param_2);
void DocumentBuilder::AddImage(int param_1,int *param_2);
void DocumentBuilder::AddIndex(int param_1);
void DocumentBuilder::AddInput(int param_1,int *param_2);
void DocumentBuilder::AddLimitText(int param_1,int *param_2);
void DocumentBuilder::AddLink(int param_1,int *param_2);
void DocumentBuilder::AddMeta(int param_1,int *param_2,undefined4 param_3,undefined4 param_4);
void DocumentBuilder::AddNewLine(int param_1,int *param_2);
void DocumentBuilder::AddSpacer(int param_1,int *param_2);
void DocumentBuilder::AddTag(int *param_1,int param_2,int *param_3,int param_4);
void DocumentBuilder::AddText(int *param_1,int **param_2,short param_3);
void DocumentBuilder::AddTuner(void);
void DocumentBuilder::AddUpgradeBlock(int param_1,int *param_2);
char * FindCharacterN(char *param_1,int param_2,char param_3,char param_4);
undefined4 DocumentBuilder::AddTextDisplayable(int param_1,int **param_2,int param_3);
void DocumentBuilder::Align(int param_1,int param_2,uint param_3);
void DocumentBuilder::BaseFont(int param_1,int *param_2);
void DocumentBuilder::Big(int param_1);
void DocumentBuilder::BlankLine(int param_1);
void DocumentBuilder::CloseAnchor(int param_1);
void DocumentBuilder::CloseCaption(int param_1);
void DocumentBuilder::CloseCenter(int param_1);
void DocumentBuilder::CloseDivision(int param_1);
void DocumentBuilder::CloseForm(int param_1);
void DocumentBuilder::CloseFrameSet(int param_1);
void DocumentBuilder::CloseHeading(int param_1);
void DocumentBuilder::CloseImageMap(int param_1);
void DocumentBuilder::CloseMarquee(int param_1);
void DocumentBuilder::CloseParagraph(int param_1,char param_2);
void DocumentBuilder::CloseScript(int param_1);
void DocumentBuilder::CloseSelect(int param_1);
void DocumentBuilder::CloseSideBar(int param_1);
void DocumentBuilder::CloseStyle(int param_1);
void DocumentBuilder::CloseTable(int param_1);
void DocumentBuilder::CloseTableCell(int param_1);
void DocumentBuilder::CloseTableRow(int param_1);
void DocumentBuilder::CloseTextArea(int param_1);
void DocumentBuilder::CreateInput(undefined4 param_1,int param_2,int *param_3);
void DocumentBuilder::Display(int param_1,int *param_2);
void DocumentBuilder::ExecuteScript(int param_1);
void DocumentBuilder::Finalize(int *param_1);
void DocumentBuilder::Font(int param_1,int *param_2);
undefined4 DocumentBuilder::GetDocument(int param_1);
bool DocumentBuilder::IsScriptPending(int param_1);
undefined4 DocumentBuilder::IsStyleTag(int param_1,int param_2,int *param_3,undefined4 param_4);
void DocumentBuilder::MoveMargin(int param_1,short param_2,char param_3);
void DocumentBuilder::NewStyle(int param_1,ushort param_2);
void DocumentBuilder::OpenAnchor(int param_1,int *param_2);
void DocumentBuilder::OpenCaption(int param_1,int *param_2);
void DocumentBuilder::OpenCenter(int param_1);
void DocumentBuilder::OpenDivision(int param_1,int *param_2);
void DocumentBuilder::OpenForm(int param_1,int *param_2);
void DocumentBuilder::OpenFrameSet(int param_1,int *param_2);
void DocumentBuilder::OpenHeading(int param_1,int *param_2);
void DocumentBuilder::OpenImageMap(int param_1,int *param_2);
void DocumentBuilder::OpenMarquee(int param_1,int *param_2);
void DocumentBuilder::OpenOption(int param_1,int *param_2);
void DocumentBuilder::OpenParagraph(int param_1,int *param_2);
void DocumentBuilder::OpenScript(int param_1,int *param_2);
void DocumentBuilder::OpenSelect(int param_1,int *param_2);
void DocumentBuilder::OpenSideBar(int param_1,int *param_2);
void DocumentBuilder::OpenStyle(int param_1);
void DocumentBuilder::OpenTable(int param_1,int *param_2);
void DocumentBuilder::OpenTableRow(int param_1,int *param_2);
void DocumentBuilder::OpenTableCell(int param_1,int *param_2,char param_3);
void DocumentBuilder::OpenTextArea(int param_1,int *param_2);
void DocumentBuilder::Panel(int param_1,int *param_2);
void DocumentBuilder::Print(int param_1,int *param_2);
void DocumentBuilder::SavePanel(int param_1,int *param_2);
void DocumentBuilder::SendPanel(int param_1,int *param_2);
void DocumentBuilder::PopList(int param_1);
void DocumentBuilder::PopStyle(int param_1);
uint DocumentBuilder::PopAlignment(int param_1);
void DocumentBuilder::PushList(int param_1,short param_2,int *param_3);
void DocumentBuilder::PushStyle(int param_1);
void DocumentBuilder::PushAlignment(int param_1);
void DocumentBuilder::SetDocument(int param_1,undefined4 param_2,undefined4 param_3);
void DocumentBuilder::SetResource(int param_1,int *param_2);
void DocumentBuilder::SetTagStyle(int param_1,uint param_2,char param_3);
void DocumentBuilder::Small(int param_1);
undefined4 * ImageDocumentBuilder::ImageDocumentBuilder(undefined4 *param_1);
void ImageDocumentBuilder::~ImageDocumentBuilder(int **param_1,uint param_2);
void ImageDocumentBuilder::Initialize(int param_1,int *param_2,undefined4 param_3,undefined4 param_4);
undefined4 * AudioDocumentBuilder::AudioDocumentBuilder(undefined4 *param_1);
void AudioDocumentBuilder::~AudioDocumentBuilder(int **param_1,uint param_2);
void AudioDocumentBuilder::Initialize(int param_1,int *param_2);
undefined4 * ImageMapBuilder::ImageMapBuilder(undefined4 *param_1);
void ImageMapBuilder::~ImageMapBuilder(int **param_1,uint param_2);
void ImageMapBuilder::AddArea(int param_1,int *param_2);
void ImageMapBuilder::AddBase(int param_1,int *param_2);
void ImageMapBuilder::AddTag(int *param_1,short param_2,int *param_3);
void ImageMapBuilder::CloseImageMap(int param_1);
void ImageMapBuilder::Finalize(int *param_1);
undefined4 ImageMapBuilder::GetTargetMap(int param_1);
void ImageMapBuilder::OpenImageMap(int param_1,int *param_2);
void ImageMapBuilder::SetTargetMap(int param_1,undefined4 param_2);
undefined4 * PrefetchBuilder::PrefetchBuilder(undefined4 *param_1);
void PrefetchBuilder::~PrefetchBuilder(int **param_1,uint param_2);
void PrefetchBuilder::AddResource(int param_1,int *param_2,int param_3);
void PrefetchBuilder::AddTag(int *param_1,short param_2,int *param_3);
void PrefetchBuilder::SetResource(int param_1,int *param_2);
void DocumentPrefetcher::DocumentPrefetcher(undefined4 *param_1);
void DocumentPrefetcher::~DocumentPrefetcher(int **param_1,uint param_2);
void DocumentPrefetcher::Enable(int param_1);
undefined4 DocumentPrefetcher::GetStatus(int param_1);
void DocumentPrefetcher::Idle(int param_1);
void DocumentPrefetcher::Load(int param_1,undefined4 *param_2,int *param_3);
void DocumentPrefetcher::Reset(int param_1);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Embedded::Embedded(undefined4 *param_1);
void Embedded::~Embedded(int **param_1,uint param_2);
undefined4 Embedded::CreateEmbedded(int param_1,int param_2);
void Embedded::DeleteEmbedded(int param_1);
void Embedded::Draw(int *param_1,int param_2,int *param_3);
void Embedded::FloatingLayoutComplete(int param_1,undefined4 param_2,undefined4 param_3);
void Embedded::ForceReload(int param_1);
int Embedded::GetMinUsedWidth(int *param_1);
uint Embedded::GetPercentComplete(int param_1,uint param_2);
uint Embedded::HasProperty(undefined4 param_1,int param_2);
undefined4 Embedded::Idle(int param_1);
undefined Embedded::IsFloating(int param_1);
void Embedded::Layout(int param_1,undefined4 param_2,int *param_3);
void Embedded::LayoutComplete(int param_1,undefined4 param_2,undefined4 param_3);
void Embedded::Load(int param_1,int **param_2,int *param_3);
void Embedded::Play(int param_1,int param_2);
undefined Embedded::ReadyForLayout(int param_1);
void Embedded::Reload(int param_1);
void Embedded::ResetLayout(int param_1,undefined4 param_2);
void Embedded::SetAttribute(int param_1,int param_2,uint param_3,uint param_4);
void Embedded::SetAttributeStr(int param_1,int param_2,char *param_3);
void Embedded::SetLeft(int param_1,undefined4 param_2);
void Embedded::SetParent(int param_1,undefined4 param_2);
void Embedded::SetSRC(int param_1,char *param_2);
void Embedded::SetSRC(int param_1,int *param_2);
void Embedded::SetTop(int param_1,undefined4 param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Form::Form(undefined4 *param_1);
void Form::~Form(int **param_1,uint param_2);
void Form::AddControl(int param_1,int *param_2);
undefined4 Form::AddText(int param_1,char *param_2);
void Form::CloseSelect(int param_1);
int HTTPAndAlphanumericURL(byte *param_1,short *param_2,char *param_3);
undefined4 FillFormDataFromSubmission(int *param_1,int param_2);
undefined4 Form::CreateSubmission(uint **param_1,int *param_2);
undefined4 Form::CreateSubmission(uint **param_1,byte *param_2,byte *param_3);
int * Form::FindControl(int param_1,char *param_2,int param_3,int param_4);
void Form::EnterDocument(uint **param_1);
void Form::ExecuteScript(uint **param_1,char *param_2);
void Form::Submit(int param_1,undefined4 param_2,char *param_3,uint param_4);
void Form::AutoSubmit(int param_1);
undefined4 Form::GetControl(int param_1,int param_2);
int Form::GetControlIndex(int param_1,int param_2);
undefined4 Form::GetDocument(int param_1);
undefined4 Form::GetFormData(int param_1);
undefined4 Form::GetParent(int param_1);
undefined4 Form::GetSelect(int param_1);
int Form::GetTextFieldCount(int param_1);
void Form::Idle(int param_1,undefined4 param_2);
uint Form::IsSelectable(int param_1);
void Form::LeaveDocument(uint **param_1);
int * Form::NextControl(int param_1,int *param_2);
int * Form::NextTextFieldOrSubmit(int param_1,int *param_2);
void Form::OpenSelect(int param_1,int *param_2);
void Form::Option(int param_1);
int * Form::PreviousControl(int param_1,int *param_2);
void Form::RadioGroup(int param_1,int *param_2);
void Form::Reset(uint **param_1);
void Form::SetAction(int param_1,char *param_2);
void Form::SetAttributeStr(int param_1,int param_2,char *param_3);
void Form::SetName(int param_1,char *param_2);
void Form::SetOnReset(int param_1,char *param_2);
void Form::SetOnSubmit(int param_1,char *param_2);
void Form::SetParent(int param_1,undefined4 param_2);
void Form::SetTarget(int param_1,char *param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * Frame::Frame(undefined4 *param_1);
void Frame::~Frame(int **param_1,uint param_2);
undefined4 Frame::BuildDocument(int param_1);
void Frame::ClearJSThis(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int Frame::FindFrame(int param_1,byte *param_2);
void Frame::FrameAtSourceOrder(int param_1,int param_2);
int Frame::FrameAtSourceOrderRecursive(int param_1,int param_2,int *param_3);
int Frame::GetBaseResource(int param_1);
int Frame::GetFrameCapacity(int param_1);
int Frame::GetFrameCountSourceOrder(int param_1);
undefined4 * Frame::GetHeight(undefined4 *param_1,int param_2,int param_3);
int Frame::GetParentWithDocument(int param_1);
undefined4 Frame::GetStatus(int param_1);
int Frame::GetView(int param_1);
undefined4 * Frame::GetWidth(undefined4 *param_1,int param_2,int param_3);
uint Frame::Idle(int param_1,undefined4 param_2);
void Frame::Load(int param_1);
void Frame::ParseDimensions(undefined4 param_1,byte *param_2,int param_3,short *param_4);
void Frame::Reset(int param_1);
void Frame::SetAttributeStr(int param_1,int param_2,byte *param_3);
void Frame::SetDocument(int param_1,int *param_2);
void Frame::SetJSThis(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void Frame::SetName(int param_1,char *param_2);
void Frame::SetParent(int param_1,int param_2);
void FrameDocument::FrameDocument(undefined4 *param_1);
void FrameDocument::~FrameDocument(int **param_1,uint param_2);
void FrameDocument::AddAnchor(int param_1,int *param_2);
void FrameDocument::AddControl(int param_1,int *param_2);
void FrameDocument::AddDynamicDisplayable(int param_1,int *param_2);
void FrameDocument::AddForm(int param_1,int param_2);
void FrameDocument::AddImage(int param_1,int *param_2);
void FrameDocument::AddTable(int param_1,int *param_2);
int FrameDocument::AddText(int param_1,byte *param_2,int param_3);
undefined4 FrameDocument::CheckReload(int param_1);
void FrameDocument::CloseForWriting(int param_1);
void FrameDocument::DrawBackground(int *param_1,undefined4 param_2,int *param_3);
void FrameDocument::Draw(int *param_1,undefined4 param_2,int *param_3);
void FrameDocument::ExecuteFrameScript(int param_1,char *param_2);
void FrameDocument::Finalize(int param_1);
undefined4 FrameDocument::FindApplet(void);
int * FrameDocument::FindByName(int param_1,char *param_2,int param_3,int param_4);
int * FrameDocument::FindDisplayableAtTextOffset(undefined4 param_1,int *param_2,int param_3);
int * FrameDocument::FindEmbedded(int param_1,char *param_2,int param_3,int param_4);
void FrameDocument::FindForm(int param_1,char *param_2,int param_3,int param_4);
void FrameDocument::FindFragment(int param_1,char *param_2);
void FrameDocument::FindImage(int param_1,char *param_2,int param_3,int param_4);
int * FrameDocument::FindLink(int param_1,char *param_2,int param_3,int param_4);
undefined4 * FrameDocument::FindOrAddImageMap(int param_1,char *param_2,int param_3);
undefined4 *FrameDocument::FindOrAddImageMap(int param_1,int *param_2,char *param_3,undefined4 param_4);
int * FrameDocument::FindString(int param_1,byte *param_2);
int * FrameDocument::FindStringBackwards(int param_1,byte *param_2);
void FrameDocument::ForceReload(int param_1);
undefined4 FrameDocument::GetApplet(void);
undefined4 FrameDocument::GetAppletCount(void);
int * FrameDocument::GetAnchor(int param_1,int param_2);
int FrameDocument::GetBaseResource(int param_1);
undefined4 FrameDocument::GetColor(int param_1,uint param_2);
int * FrameDocument::GetEmbedded(int param_1,int param_2);
uint FrameDocument::GetFont(int param_1,uint param_2);
int * FrameDocument::GetLink(int *param_1,int param_2);
int * FrameDocument::GetLinkRecursive(undefined4 param_1,int *param_2,int param_3,int *param_4);
void FrameDocument::GetMinUsedTextWidth(int *param_1,undefined4 param_2,short *param_3,short *param_4);
int FrameDocument::GetStreamForWriting(int param_1);
int FrameDocument::GetText(int param_1,int param_2);
void FrameDocument::GetTextHighlightRange(int param_1,undefined4 *param_2,undefined4 *param_3);
undefined4 FrameDocument::GetTextLength(int param_1);
byte FrameDocument::Idle(int param_1,undefined4 param_2);
void FrameDocument::InvalidateView(int param_1);
uint FrameDocument::HasProperty(undefined4 param_1,int param_2);
void FrameDocument::Layout(int *param_1);
void FrameDocument::OpenForWriting(int param_1,byte *param_2,undefined4 param_3,undefined4 param_4);
bool FrameDocument::ReadyForLayout(int *param_1);
void FrameDocument::RemoveImage(int param_1,int param_2);
void FrameDocument::SetAttribute(int param_1,int param_2,int param_3,uint param_4);
void FrameDocument::SetAttributeStr(int param_1,int param_2,byte *param_3);
void FrameDocument::SetBackgroundColor(int param_1,undefined4 param_2);
void FrameDocument::SetLinkColor(int param_1,undefined4 param_2);
void FrameDocument::SetOnLoad(int param_1,char *param_2);
void FrameDocument::SetOnUnload(int param_1,char *param_2);
void FrameDocument::SetPriority(int param_1,uint param_2);
void FrameDocument::SetReloadTime(int param_1,undefined4 param_2);
void FrameDocument::SetReloadURL(int param_1,char *param_2);
void FrameDocument::SetResource(int param_1,int *param_2);
void FrameDocument::SetTextCacheReserveSize(int param_1,undefined2 param_2);
void FrameDocument::SetTextColor(int param_1,undefined4 param_2);
void FrameDocument::SetVisitedLinkColor(int param_1,undefined4 param_2);
void FrameDocument::StartAnimations(int param_1);
void FrameDocument::StartReloadTiming(int param_1);
void FrameDocument::StopReloadTiming(int param_1);
void FrameDocument::UnLoad(int param_1);
undefined4 FrameDocument::Write(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 * RootFrameDocument::RootFrameDocument(undefined4 *param_1);
void RootFrameDocument::~RootFrameDocument(int **param_1,uint param_2);
void RootFrameDocument::SetTopDisplayable(int param_1,undefined4 param_2);
undefined4 RootFrameDocument::GetTopDisplayable(int param_1);
uint RootFrameDocument::HasProperty(undefined4 param_1,int param_2);
int RootFrameDocument::IsLayoutCurrent(int *param_1);
void RootFrameDocument::Layout(int *param_1);
void RootFrameDocument::LayoutCompleteFor(undefined4 param_1,int *param_2,undefined4 param_3);
void RootFrameDocument::ResetLayout(int *param_1,undefined4 param_2);
void RootFrameDocument::Draw(int *param_1,undefined4 param_2,undefined4 *param_3);
void SideBar::SideBar(undefined4 *param_1);
void SideBar::~SideBar(int **param_1,uint param_2);
void SideBar::SetAttribute(int param_1,int param_2,int param_3,byte param_4);
void FrameDocument::GetView(int param_1);
undefined4 FrameDocument::GetImage(int param_1,int param_2);
undefined4 FrameDocument::GetFragment(int param_1,int param_2);
undefined4 FrameDocument::GetForm(int param_1,int param_2);
undefined4 FrameDocument::GetDynamicDisplayable(int param_1,int param_2);
undefined FrameDocument::GetCharacterEncoding(int param_1);
void Frame::SetResource(int param_1,int *param_2);
void Frame::SetBaseResource(int param_1,int *param_2);
undefined4 Frame::FrameAt(int param_1,int param_2);
void Frame::FindFrameIndex(int param_1,int param_2);
void Frame::DeleteFrameAt(int param_1,int param_2);
void Frame::DeleteAllFrames(int param_1);
void Frame::AddFrameAt(int param_1,int param_2,int param_3);
void Frame::AddFrame(int param_1,int param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 Document::FutureSplashControl(int param_1);
void ImageScriptEvents::~ImageScriptEvents(int **param_1,uint param_2);
void ImageScriptEvents::SetOnAbort(undefined4 *param_1,char *param_2);
void ImageScriptEvents::SetOnError(int param_1,char *param_2);
void ImageScriptEvents::SetOnLoad(int param_1,char *param_2);
void Image::Image(undefined4 *param_1);
void Image::~Image(int **param_1,uint param_2);
undefined4 Image::AverageColor(int param_1);
void Image::ConstrainSize(int *param_1,int param_2,int param_3);
void Image::DrawBorder(int *param_1,int param_2,int *param_3);
void Image::DrawOutline(int *param_1,int param_2,int *param_3);
void Image::DrawTiled(int *param_1,int param_2,int param_3,int param_4,int param_5,int param_6,int param_7,int param_8,undefined4 param_9,byte param_10,byte param_11,undefined4 param_12);
void Image::Draw(int *param_1,int param_2,int *param_3);
void Image::GetBoundsTight(int *param_1,int *param_2);
undefined4 * Image::GetImageMapCursorPosition(undefined4 *param_1,int param_2);
undefined4 Image::GetMinUsedWidth(int *param_1);
uint Image::GetPercentComplete(int param_1,uint param_2);
int Image::GetStatus(int param_1);
void Image::GetUnscaledBoundsTight(int *param_1,int *param_2);
undefined4 Image::GetUseMap(int param_1);
uint Image::Idle(int *param_1,int *param_2);
void Image::InvalidateBounds(int *param_1,int *param_2);
uint Image::HasProperty(undefined4 param_1,int param_2);
uint Image::IsMap(int param_1);
byte Image::IsSeparable(int param_1);
void Image::Load(int *param_1,int *param_2,int *param_3);
bool Image::KnowSize(int param_1);
undefined4 Image::ReadyForLayout(int param_1);
void Image::ResetLayout(int param_1);
void Image::ForceReload(int param_1);
void Image::Layout(int *param_1,int param_2,int param_3);
void Image::LayoutComplete(int *param_1,int param_2);
void Image::SuspendAnimation(int param_1);
void Image::ResumeAnimation(int param_1);
void Image::Show(int param_1);
void Image::SetAttribute(int param_1,int param_2,int param_3,char param_4);
void Image::SetAttributeStr(int param_1,int param_2,byte *param_3);
undefined4 Image::SetError(int *param_1,int param_2);
void Image::SetIsBackground(int param_1,uint param_2);
void Image::SetIsRootBackground(int param_1,uint param_2);
void Image::SetOnAbort(int param_1,char *param_2);
void Image::SetOnError(int param_1,char *param_2);
void Image::SetOnLoad(int param_1,char *param_2);
void Image::SetSource(int *param_1,char *param_2);
undefined4 * FutureSplashSelectable::FutureSplashSelectable(undefined4 *param_1);
void FutureSplashSelectable::~FutureSplashSelectable(int **param_1,uint param_2);
void FutureSplashSelectable::CursorMoved(int param_1);
void FutureSplashSelectable::Deselect(int param_1);
uint FutureSplashSelectable::DispatchInputType(int *param_1,int param_2);
uint FutureSplashSelectable::HasProperty(undefined4 param_1,int param_2);
void FutureSplashSelectable::Select(int param_1);
void FutureSplashSelectable::Set(int param_1,int *param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
int FutureSplashSelectable::SetButtonState(int param_1,uint param_2,char param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Image::SetPriority(int param_1,uint param_2);
void AreaExtension::~AreaExtension(int **param_1,uint param_2);
void AreaExtension::SetName(undefined4 *param_1,char *param_2);
void AreaExtension::SetOnMouseOver(int param_1,char *param_2);
void AreaExtension::SetOnMouseOut(int param_1,char *param_2);
void AreaExtension::SetPoly(int param_1,undefined4 param_2);
void AreaExtension::SetTarget(int param_1,char *param_2);
void Area::Area(undefined4 *param_1);
void Area::~Area(int **param_1,uint param_2);
int Area::GetExtension(int param_1);
void Area::ResetHREF(int param_1);
void Area::SetAttributeStr(int param_1,int param_2,byte *param_3);
void Area::SetName(int param_1,char *param_2);
void Area::SetOnMouseOver(int param_1,char *param_2);
void Area::SetOnMouseOut(int param_1,char *param_2);
void Area::SetPoly(int param_1,undefined4 param_2);
void Area::SetTarget(int param_1,char *param_2);
void ImageMap::ImageMap(undefined4 *param_1);
void ImageMap::~ImageMap(int **param_1,uint param_2);
void ImageMap::AddArea(int param_1,int *param_2);
int ImageMap::AreaAtPoint(int param_1,int param_2,int param_3);
void ImageMap::CleanupStream(int param_1);
void ImageMap::DetermineNavigability(int param_1);
int ImageMap::GetBaseResource(int param_1);
void ImageMap::HandleRedirect(int param_1);
bool ImageMap::Idle(int param_1);
uint ImageMap::IsNavigable(int param_1);
void ImageMap::Load(int param_1);
void ImageMap::Reset(int param_1);
void ImageMap::SetBaseResource(int param_1,int *param_2);
void ImageMap::SetBaseURL(int param_1,byte *param_2);
void ImageMap::SetComplete(int param_1);
void ImageMap::SetResourceAndName(int param_1,int *param_2,char *param_3);
undefined4 * ImageMapSelectable::ImageMapSelectable(undefined4 *param_1);
void ImageMapSelectable::~ImageMapSelectable(int **param_1,uint param_2);
void ImageMapSelectable::Deselect(int *param_1,int param_2);
uint ImageMapSelectable::DispatchInputType(int param_1,int param_2,undefined4 param_3);
void ImageMapSelectable::GetBounds(int param_1,int *param_2);
undefined4 ImageMapSelectable::GetMappedImage(int param_1);
undefined4 ImageMapSelectable::GetParent(int param_1);
undefined4 ImageMapSelectable::GetTarget(int param_1,undefined4 param_2,undefined4 param_3);
undefined4 *ImageMapSelectable::GetTargetPoint(undefined4 *param_1,int param_2,undefined4 param_3,undefined4 param_4);
undefined ImageMapSelectable::HasURL(int *param_1);
uint ImageMapSelectable::HasProperty(undefined4 param_1,int param_2);
undefined4 ImageMapSelectable::IsInitiallySelected(int param_1);
undefined ImageMapSelectable::IsSubmit(int param_1);
int ** ImageMapSelectable::NewURL(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ImageMapSelectable::Select(int *param_1,int param_2);
undefined4 * ImageMapCursor::NewImageMapCursor(byte *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void ImageMap::SetPriority(int param_1,uint param_2);
void ImageMap::SetDocumentResource(int param_1,int *param_2);
undefined4 ImageMap::AreaAt(int param_1,int param_2);
void ImageMapCursor::~ImageMapCursor(int **param_1,uint param_2);
void Marquee::Marquee(undefined4 *param_1);
void Marquee::~Marquee(int **param_1,uint param_2);
void Marquee::AddText(int param_1,char *param_2);
void Marquee::Close(int param_1);
void Marquee::Draw(int *param_1,int param_2,int *param_3);
void Marquee::GetBoundsTight(int *param_1,int *param_2);
uint Marquee::GetColor(int param_1,int param_2);
undefined4 Marquee::GetMinUsedWidth(int *param_1);
int Marquee::GetScrollWidth(int param_1);
undefined4 Marquee::Idle(int *param_1,int *param_2);
void Marquee::Layout(int param_1,int param_2,int param_3);
void Marquee::SetAttribute(int param_1,undefined4 param_2,int param_3,uint param_4);
void Marquee::SetStyle(int param_1,undefined4 param_2,undefined4 param_3);
void Page::Page(undefined4 *param_1);
void Page::~Page(int **param_1,uint param_2);
void Page::AddChild(int param_1,int *param_2);
void Page::AddChildAfter(int param_1,int *param_2,uint param_3);
int Page::BreakLine(int param_1,int param_2,short param_3);
void Page::Close(int param_1);
void Page::Draw(int *param_1,int param_2,int *param_3);
void Page::DrawBackground(int *param_1,int param_2,int *param_3);
void Page::GetMargins(int *param_1,int param_2,short *param_3,short *param_4);
int Page::GetDefaultMarginWidth(int param_1);
int Page::GetMarginWidth(int param_1);
int Page::GetMaxUsedWidth(int param_1);
int Page::GetMinUsedWidth(int *param_1,undefined4 param_2);
void Page::GetMinUsedTextWidth(int *param_1,undefined4 param_2,short *param_3,short *param_4);
void Page::Layout(int *param_1,int param_2);
void Page::ResetLayout(int *param_1,undefined4 param_2);
void Page::LayoutFloatingDisplayable(int *param_1,int param_2,int *param_3);
void Page::DeferFloatingLayout(int param_1,undefined4 param_2);
void Page::LayoutDeferedFloating(int *param_1,int param_2);
int Page::LayoutLineV(int *param_1,int param_2,int param_3,ushort param_4,short param_5,int *param_6,int *param_7);
void Page::Open(int param_1);
bool Page::PREProcess(int param_1,int param_2,int **param_3,int *param_4,int param_5);
int Page::PREPostProcess(int param_1,int param_2,int **param_3,int *param_4);
int * Page::PutDisplayable(int *param_1,int param_2,int *param_3);
void Page::PutLine(int *param_1,undefined4 param_2,undefined4 param_3);
void Page::RemoveSoftBreaks(int *param_1);
undefined4 * Page::GetLineBounds(undefined4 *param_1,undefined4 param_2,int *param_3);
int * Page::ScaleImagesOnLine(int *param_1,int param_2,int *param_3,int *param_4);
void Page::SetAttribute(int param_1,int param_2,int param_3,char param_4);
void Page::SetAttributeStr(int param_1,int param_2,undefined4 param_3);
void Page::SetLeftMarginDefault(int *param_1,short param_2);
void Margin::Margin(undefined4 *param_1);
void Margin::Layout(int param_1,undefined4 param_2,int *param_3);
void Margin::SetMargin(int param_1,undefined2 param_2);
void Divider::Divider(undefined4 *param_1);
void Divider::Draw(int *param_1,int param_2,ushort **param_3);
undefined4 Divider::GetHAlign(int param_1);
uint Divider::HasProperty(undefined4 param_1,int param_2);
void Divider::Layout(int param_1,undefined4 param_2,int param_3);
void Divider::SetAttribute(int param_1,int param_2,int param_3,char param_4);
void LineBreak::LineBreak(undefined4 *param_1);
void Alignment::Alignment(undefined4 *param_1);
void Alignment::Layout(int param_1,undefined4 param_2,int *param_3);
void Spacer::Spacer(undefined4 *param_1);
void Spacer::Layout(int param_1,undefined4 param_2,int param_3);
void Spacer::~Spacer(int **param_1,uint param_2);
void Alignment::~Alignment(int **param_1,uint param_2);
void LineBreak::~LineBreak(int **param_1,uint param_2);
void Divider::~Divider(int **param_1,uint param_2);
void Margin::~Margin(int **param_1,uint param_2);
undefined * LastModifiedFunction(void);
undefined * PageURLFunction(void);
void PageTitleFunction(void);
undefined * PageThumbnailURLFunction(void);
void DateFunction(void);
void VersionFunction(void);
undefined * BYOISPAccessNumberString(void);
undefined * BYOISPAccessNumber2String(void);
undefined * BYOISPPasswordString(void);
undefined * BYOISPFunction(void);
undefined * BYOISPLoginNameString(void);
undefined * BYOISPProviderString(void);
undefined * CPUSpeedFunction(void);
void FontSizesFunction(void);
void KeyboardNameFunction(void);
undefined * ModemSpeedFunction(void);
void PhoneNumberFunction(void);
undefined * PulseDialingFunction(void);
undefined * WaitForDialToneFunction(void);
undefined * AudibleDialingFunction(void);
undefined * DisableCallWaitingFunction(void);
void DisableCallWaitingString(void);
undefined * DialOutsideLineFunction(void);
undefined * HasCallWaitingFunction(void);
undefined * CallWaitingThresholdMost(void);
undefined * CallWaitingThresholdMore(void);
undefined * CallWaitingThresholdLess(void);
undefined * CallWaitingThresholdLeast(void);
undefined * LongDistancePrefixFunction(void);
undefined * TollFreeAccessFunction(void);
undefined * BrokenPBXFunction(void);
undefined * UseCallWaitingHack(void);
undefined * DialOutsideLineString(void);
undefined * DialSpeedSlow(void);
undefined * DialSpeedMedium(void);
undefined * DialSpeedFast(void);
void BGMTempo(void);
void BGMVolume(void);
undefined * AccessNumberString(void);
undefined * BootROMVersion(void);
undefined * AppROMVersion(void);
void SiliconSerialNumber(void);
undefined * ScriptResult(void);
undefined * ChipVersion(void);
undefined * SysConfig(void);
char ** LookupToken(byte *param_1,int param_2,int param_3);
void Parser::Parser(int param_1);
void Parser::~Parser(int **param_1,uint param_2);
void Parser::SetBuilder(undefined4 *param_1,undefined4 param_2);
int HTMLParser::HTMLParser(int param_1);
void HTMLParser::~HTMLParser(int **param_1,uint param_2);
void HTMLParser::BuildTagList(int param_1,short param_2);
void HTMLParser::CheckTag(int param_1,ushort param_2);
undefined4 HTMLParser::DispatchTag(int *param_1);
void HTMLParser::DispatchTagAsText(int *param_1);
void HTMLParser::DispatchText(int *param_1);
uint HTMLParser::GetTagID(int param_1);
undefined *HTMLParser::InterpretEntityString(undefined *param_1,int param_2,byte *param_3,undefined *param_4);
byte * HTMLParser::NextAttributeStrings(undefined4 param_1,byte *param_2,byte **param_3,byte **param_4);
void HTMLParser::Parse(int **param_1,int *param_2);
byte * HTMLParser::ParseColorComponent(byte *param_1,uint *param_2,undefined4 param_3,undefined4 param_4);
int HTMLParser::ParseColorValue(byte *param_1,undefined4 param_2,int param_3,undefined4 param_4);
int NullParser::NullParser(int param_1);
void NullParser::~NullParser(int **param_1,uint param_2);
void NullParser::Parse(undefined4 param_1,int *param_2);
int PlainTextParser::PlainTextParser(int param_1);
void PlainTextParser::~PlainTextParser(int **param_1,uint param_2);
void PlainTextParser::DispatchText(int *param_1);
void PlainTextParser::Parse(int **param_1,int *param_2,undefined4 param_3,undefined4 param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void PhoneAnimation::PhoneAnimation(undefined4 *param_1);
void PhoneAnimation::~PhoneAnimation(int **param_1,uint param_2);
void PhoneAnimation::SetTraceColor(int param_1,uint param_2);
void PhoneAnimation::Setup(int param_1);
void PhoneAnimation::Draw(int *param_1,int param_2,int *param_3);
void PhoneAnimation::DimScope(int param_1);
void PhoneAnimation::UpdateScope(int param_1);
void PhoneAnimation::DrawFlatlinedScope(int param_1);
void PhoneAnimation::PutPixel(int param_1,byte *param_2);
bool PhoneAnimation::Idle(int param_1);
void PhoneAnimation::SetState(int param_1,undefined4 param_2);
void PhoneAnimation::SetAttribute(int param_1,int param_2,int param_3,char param_4);
void PhoneAnimation::SetAttributeStr(int param_1,int param_2,byte *param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Playable::Playable(undefined4 *param_1);
void Playable::~Playable(int **param_1,uint param_2);
undefined Playable::GetState(int *param_1);
bool Playable::IsStopped(int *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Song::Song(undefined4 *param_1);
void Song::~Song(int **param_1,uint param_2);
void Song::AttachPreviousSong(int param_1,undefined4 param_2);
void Song::GetTitle(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void Song::Fadeout(int param_1);
bool Song::Idle(int *param_1);
void Song::PlaySoon(int param_1);
undefined4 Song::IsPlaying(int param_1);
void Song::SetVolume(int param_1,uint param_2);
void Song::SetTempo(int param_1,undefined4 param_2);
void Song::Stop(int param_1);
void Song::Replay(int param_1);
void Song::Pause(int param_1);
void Song::Resume(int param_1);
undefined4 Song::GetTimePlayed(int *param_1);
undefined4 Song::GetTimeRemaining(int *param_1);
void Song::Play(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Table::Table(undefined4 *param_1);
void Table::~Table(int **param_1,uint param_2);
void Table::AddChild(int param_1,int *param_2);
void Table::AlignScrollPoint(int *param_1,int param_2,int param_3);
void Table::Close(int param_1);
void Table::CloseCaption(void);
void Table::CloseCell(int param_1);
void Table::CloseRow(int param_1);
void Table::Deselect(int *param_1,int param_2);
void Table::Draw(int *param_1,int param_2,int *param_3);
void Table::DrawBackground(int *param_1,int param_2,int *param_3);
int Table::GetExtension(int param_1);
int Table::GetInheritedKnownHeight(int param_1);
int Table::GetInheritedKnownWidth(int param_1);
int Table::GetMinUsedTextWidth(int param_1);
undefined4 Table::GetParentTable(int param_1);
undefined4 Table::IsSelectable(int *param_1);
undefined4 Table::IsSelectableSupported(int *param_1,int param_2);
uint Table::HasProperty(undefined4 param_1,int param_2);
bool Table::ReadyForLayout(int *param_1,undefined4 param_2);
void Table::Layout(int *param_1,int *param_2,int param_3);
void Table::LayoutCaption(int *param_1,undefined4 param_2,undefined4 param_3);
void Table::LayoutColumns(int *param_1,int *param_2,int param_3);
void Table::LayoutComplete(int *param_1,int param_2,undefined4 param_3);
void Table::LayoutRows(int *param_1,int param_2);
void Table::NewURL(int param_1);
void Table::NewCell(int param_1,char param_2);
void Table::Open(int param_1);
void Table::OpenCaption(int *param_1,int *param_2);
void Table::OpenCell(int *param_1,int param_2);
void Table::OpenRow(int param_1);
void Table::Select(int *param_1,int param_2);
void Table::SetAttributeStr(int param_1,int param_2,char *param_3);
void Table::SetParentTable(int param_1,undefined4 param_2);
void Table::SetLeft(int *param_1,int param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 Tag::Tag(undefined4 param_1);
void Tag::~Tag(int **param_1,uint param_2);
void Tag::SetAttributeStr(undefined4 *param_1,undefined4 param_2,undefined4 param_3);
void Tag::SetAttribute(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined param_4);
int * TagList::TagList(int *param_1);
void TagList::~TagList(int **param_1,uint param_2);
void TagList::Add(int *param_1,int param_2,undefined4 param_3,undefined param_4);
void TagList::Add(int *param_1,int param_2,undefined4 param_3);
int * TagList::Find(int *param_1,int param_2);
void MakeAlphaStr(char *param_1,int param_2);
undefined4 IsPunctuationBreak(undefined param_1,uint param_2);
undefined4 IsVowel(uint param_1);
void MakeRomanStr(undefined *param_1,int param_2);
void Bullet::Bullet(undefined4 *param_1);
void Bullet::~Bullet(int **param_1,uint param_2);
void Bullet::SetKind(int param_1,undefined param_2,undefined2 param_3);
void Bullet::GetBounds(int *param_1,int *param_2);
uint Bullet::HasProperty(undefined4 param_1,int param_2);
void Bullet::Draw(int *param_1,int param_2,ushort **param_3);
void Bullet::DrawGraphicBullet(int *param_1,int param_2,int param_3,int param_4,int *param_5);
void Bullet::DrawTextBullet(int *param_1,int param_2,byte *param_3,char param_4,char param_5,ushort **param_6);
void Bullet::Layout(int *param_1,int param_2);
void Bullet::SetStyle(int param_1,undefined4 param_2);
undefined4 * ColorBullet::ColorBullet(undefined4 *param_1);
void ColorBullet::~ColorBullet(int **param_1,uint param_2);
uint ColorBullet::GetColor(int param_1,int param_2);
void Text::Text(undefined4 *param_1);
void Text::~Text(int **param_1,uint param_2);
int Text::AddQuote(int *param_1,int *param_2,int param_3,undefined2 param_4);
int Text::AdjustMailQuote(int *param_1,int param_2,int *param_3);
int Text::BreakText(int param_1,int param_2,uint param_3,int param_4);
void Text::Delete(int param_1,int param_2,int param_3,short param_4);
void Text::Draw(int *param_1,int param_2,ushort **param_3);
void Text::GetBoundsTight(int *param_1,int param_2);
int Text::GetColumns(int *param_1,int param_2,int param_3,char *param_4,undefined *param_5);
undefined * Text::GetEllipsis(void);
uint Text::GetMinUsedWidth(int param_1,int param_2);
int Text::GetLeadingWhiteSpace(int param_1,int param_2,undefined2 *param_3);
void Text::GetSpaceWidth(int param_1,int param_2);
uint Text::HasProperty(undefined4 param_1,int param_2);
int Text::HyphenateText(int param_1,int param_2,uint param_3,char param_4,byte *param_5,uint param_6);
int Text::TruncateText(int param_1,int param_2,uint param_3,char param_4,byte *param_5,uint param_6);
int * Text::InsertSoftBreak(int *param_1,int param_2,int *param_3,int *param_4,int param_5);
int Text::IsMailQuote(int *param_1,int param_2);
int Text::IsNumberedItem(byte **param_1,byte *param_2);
int Text::IsRomanNumeral(byte **param_1,byte *param_2);
undefined4 Text::IsSeparable(int param_1,int param_2);
void Text::Layout(int *param_1,int param_2,int param_3);
void Text::NewText(void);
bool Text::ReadyForLayout(int *param_1,undefined4 param_2,int param_3);
void Text::RemoveSoftBreak(int param_1,int param_2);
bool Text::RestartLine(int *param_1,int param_2,int *param_3);
void Text::SetColumns(int param_1,int param_2,int param_3,byte *param_4,byte *param_5,byte *param_6);
void Text::SetText(int param_1,undefined4 param_2,undefined2 param_3,undefined4 param_4);
undefined4 * ColorText::ColorText(undefined4 *param_1);
void ColorText::~ColorText(int **param_1,uint param_2);
uint ColorText::GetColor(int param_1,int param_2);
void ColorText::NewText(int param_1);
undefined GetLyricFontSize(char param_1);
char * jstrchr(char *param_1,char param_2,byte param_3);
uint ReadVariableLengthMidi(byte **param_1,int *param_2);
int ParseMIDITrack(byte *param_1,int param_2,undefined *param_3,undefined4 param_4);
int IsKaraoke(int *param_1);
undefined4 IsKaraoke(byte *param_1,uint param_2);
void KaraokeLine::KaraokeLine(undefined4 *param_1);
void KaraokeLine::~KaraokeLine(int **param_1,uint param_2);
void KaraokeLine::AddSyllable(int param_1,undefined4 *param_2,uint param_3,int param_4,int param_5);
int KaraokeLine::GetOffset(int param_1,int param_2);
void KaraokeLine::RemoveLastSyllable(int param_1,char param_2);
int ** KaraokeData::KaraokeData(int **param_1);
void KaraokeData::~KaraokeData(int **param_1,uint param_2);
void KaraokeData::DeleteEvents(undefined4 *param_1);
void KaraokeData::GetEvent(int **param_1,int param_2);
undefined4 ParseKAREvent(int **param_1,int param_2,int param_3,char *param_4,int param_5);
undefined4 ParseMayumiEvent(int **param_1,int param_2,int param_3,char *param_4,undefined4 param_5,undefined param_6);
void KaraokeData::AddEvent(int **param_1,undefined4 param_2,undefined param_3,undefined4 param_4,undefined4 param_5,undefined param_6);
void KaraokeData::AddCredit(int param_1,undefined4 *param_2,uint param_3);
void KaraokeData::SetTitle(int param_1,undefined4 *param_2,uint param_3);
undefined4 KaraokeData::ReadData(uint **param_1,uint *param_2,uint param_3);
undefined4 *KaraokePlayer::KaraokePlayer(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 *param_4);
void KaraokePlayer::~KaraokePlayer(int **param_1,uint param_2);
void KaraokePlayer::ChangeTempo(int param_1,int param_2);
void KaraokePlayer::ChangePitch(int param_1,int param_2);
void KaraokePlayer::CreatePage(int *param_1);
void KaraokePlayer::GetInnerBounds(int *param_1,int param_2,int *param_3);
void KaraokePlayer::Draw(int *param_1,int param_2,ushort **param_3);
undefined4 KaraokePlayer::FindString(int param_1,byte *param_2);
undefined4 KaraokePlayer::FindKaraokeEvent(int param_1,short *param_2,int param_3);
undefined4 KaraokePlayer::Idle(int *param_1,int *param_2);
void KaraokePlayer::PaintLyricText(int param_1,int param_2,int param_3,int param_4,int param_5,int *param_6,int *param_7,uint param_8,ushort **param_9);
undefined KaraokePlayer::PaintCredits(int param_1,int *param_2,ushort **param_3);
void KaraokePlayer::PaintBorder(int *param_1,int param_2,ushort **param_3);
void KaraokePlayer::PaintBackground(int *param_1,int param_2,int *param_3);
void KaraokePlayer::Reset(int param_1);
void KaraokeLine::GetSyllable(int param_1,int param_2);
int KaraokeLine::GetLength(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
char * FindCRorLF(char *param_1,int param_2);
char * SkipSpace(char *param_1);
void CleanControlChars(undefined4 *param_1);
void GetSlashParameters(char *param_1,uint **param_2,uint **param_3);
undefined4 GetMsgParameters(int param_1,uint **param_2,uint **param_3);
void ChatHandler::ChatHandler(int param_1);
void ChatHandler::AddChannelMessage(int param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::AddPrivateMessage(int param_1,char *param_2,undefined4 *param_3);
void ChatHandler::AddToTranscript(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
char * ChatHandler::CleanCTCPMessage(undefined4 param_1,char *param_2);
void ChatHandler::ClearTranscript(int param_1);
void ChatHandler::ClearTranscript(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::Connect(int param_1);
void ChatHandler::Disconnect(int param_1);
undefined4 ChatHandler::GetCTCPType(undefined4 param_1,char *param_2);
undefined4 ChatHandler::GetTraditionalIRCCommand(undefined4 param_1,byte *param_2);
void ChatHandler::HandleBADCHANNELKEY(int param_1);
void ChatHandler::HandleBANNEDFROMCHAN(int param_1);
void ChatHandler::HandleCHANNELISFULL(int param_1);
void ChatHandler::HandleENDOFNAMES(int param_1,undefined4 param_2,int param_3,int param_4);
void ChatHandler::HandleERRONEUSNICKNAME(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::HandleERROR(int param_1,int param_2);
void ChatHandler::HandleINVITEONLYCHAN(int param_1);
void ChatHandler::HandleKICK(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::HandleJOIN(int param_1,char **param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::HandleLIST(int param_1,int param_2);
void ChatHandler::HandleLISTEND(int param_1,undefined4 param_2,int param_3,undefined4 param_4);
void ChatHandler::HandleMODE(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::HandleNAMREPLY(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::HandleNEWTOPIC(int param_1,byte **param_2);
void ChatHandler::HandleNICKNAMEINUSE(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::HandleNOSUCHCHANNEL(int param_1);
void ChatHandler::HandleNOSUCHNICK(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::HandleNOTICE(int param_1,int param_2);
void ChatHandler::HandlePARTorQUIT(int param_1,byte **param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::HandlePING(int param_1,int param_2);
void ChatHandler::HandlePRIVMSG(int param_1,char **param_2,undefined4 param_3,int *param_4);
void ChatHandler::HandleTOPIC(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::HandleWELCOME(int param_1,int param_2,undefined4 param_3,int param_4);
void ChatHandler::HandleWHOISUSER(int param_1,int param_2);
void ChatHandler::Idle(uint *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::IdleConnect(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::IdleConnected(int param_1);
void ChatHandler::Initialize(void);
void ChatHandler::JoinChannel(undefined4 param_1,char *param_2,byte *param_3,byte *param_4,byte param_5);
void ChatHandler::ListChannelUsers(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::Login(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::NetworkConnected(int param_1,char param_2);
void ChatHandler::ProcessMessage(undefined4 param_1,char *param_2);
void ChatHandler::ResetChannelState(int param_1);
void ChatHandler::ResetNick(int param_1,char param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::SendJOINorLIST(int param_1,undefined4 param_2,undefined4 param_3,int param_4);
void ChatHandler::SendNICK(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::SendPART(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatHandler::SendPRIVMSG(int param_1,undefined4 *param_2,char *param_3,char param_4);
void ChatHandler::SetConnection(int param_1,int *param_2,char param_3,int param_4);
void ChatHandler::SetTranscript(int param_1,undefined4 param_2);
void ChatHandler::SetUpChannelListResource(int param_1);
void ChatHandler::SetUpTranscriptResource(int param_1);
undefined4 * ChatPanel::ChatPanel(undefined4 *param_1);
void ChatPanel::~ChatPanel(int **param_1,uint param_2);
void ChatPanel::Close(int *param_1,char param_2);
void ChatPanel::WritePage(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void ChatPanel::OpenWhisperPanel(int *param_1);
void ChatPanel::OpenPrivateChannelPanel(int *param_1);
void ChatPanel::OpenNewChannelPanel(int *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * ChatTranscript::ChatTranscript(undefined4 *param_1);
void ChatTranscript::~ChatTranscript(int **param_1,uint param_2,undefined4 param_3,undefined4 param_4);
void ChatTranscript::Relayout(int param_1);
bool NextInput(undefined4 *param_1);
void PostInput(undefined4 *param_1);
undefined4 InputPendingCount(void);
void FlushInput(void);
undefined GetGlobalModifiers(void);
void UpdateGlobalModifiers(char param_1,byte param_2);
byte CapsLockKeyDown(void);
byte CommandKeyDown(void);
byte ControlKeyDown(void);
void Cylon(void);
void SecretCode_BootIntoDiagnostics(void);
void SecretCode_DeleteTellyScript(void);
void SecretCode_ErasePreregNumber(void);
void SecretCode_ResetDisableBYOISP(void);
void SecretCode_InvalRAMnReboot(void);
void SecretCode_BootIntoMiniBrowser(void);
void SecretCode_ForceRegistration(void);
void SecretCode_ResetFlash(void);
void SecretCode_StartAtTouristPage(void);
void SecretCode_QATestScript(void);
void HandlesInput::DoSecretCode(int param_1);
undefined HandlesInput::DispatchInput(int *param_1,byte *param_2);
undefined HandlesInput::DispatchInputType(int *param_1,undefined4 param_2,int param_3);
undefined4 HandlesInput::GetTimeout(void);
bool HandlesInput::IsTimedOut(void);
void HandlesInput::ResetTimeout(void);
void HandlesInput::SetTimeout(undefined4 param_1);
bool HandlesInput::WillTimeOutIn(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void MD5(undefined4 *param_1,uint param_2,undefined *param_3);
void SSLmalloc(uint param_1);
void SSLfree(int **param_1);
void SSLrealloc(int **param_1,uint param_2);
void SSLcalloc(int param_1,int param_2);
void SSLstrdup(char *param_1);
void tsw_time32(void);
undefined4 SSLstdio(void);
void SSLNewCacheBuffer(void);
bool SSLSetCacheBufferDataLen(int *param_1,int param_2);
int SSLGetCacheBufferData(int *param_1);
void SSLGetCacheBufferDataLen(int *param_1);
void SSLFreeCacheBuffer(int **param_1);
void tsw_gmtime(int *param_1);
void tsw_mktime(int *param_1);
int tsw_timegm(int *param_1);
undefined4 tsw_S_GetPeerAddr(undefined4 *param_1,undefined4 *param_2,uint *param_3,uint *param_4);
undefined4 tsw_S_Shutdown(void);
int tsw_S_Read(int *param_1,int param_2,int param_3,int param_4);
uint tsw_S_Write(int param_1,undefined4 *param_2,uint param_3);
int _tsw_get_random_long(char param_1);
void _tsw_get_16_random_bytes(undefined4 *param_1);
void _tsw_update_random_byte_pool(int param_1,uint param_2,int *param_3,int param_4);
void _tsw_initialize_random_byte_pool(int param_1,uint param_2);
undefined4 tsw_create_random_obj(undefined4 *param_1);
undefined4 tsw_destroy_random_obj(void);
undefined4 tsw_dup_seed_random_obj(void);
undefined4 tsw_generate_random_bytes(undefined4 param_1,undefined *param_2,int param_3);
void SSLFindSessionID(undefined4 param_1,undefined4 param_2,int *param_3,uint *param_4);
void SSLSaveSessionID(undefined4 param_1,undefined4 param_2,undefined4 *param_3,uint param_4);
int SSLReadHook(undefined4 param_1,int param_2,int *param_3);
undefined4 SSLAuthenticationHook(int param_1,undefined4 *param_2,byte *param_3,int param_4);
byte * GetSignificantDomainName(byte *param_1,undefined *param_2);
int SSLSaveCacheData(int param_1,undefined4 *param_2,uint param_3,int param_4);
void SSLInfoHandler::~SSLInfoHandler(int **param_1,uint param_2);
undefined4 * SSLInfoHandler::SSLInfoHandler(undefined4 *param_1);
void SSLInfoHandler::Initialize(int *param_1,char *param_2);
void SSLInfoHandler::Initialize(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 *param_4,byte *param_5,int param_6);
char SSLInfoHandler::ComputeOffsets(int *param_1);
int SSLInfoHandler::GetSubjectName(int *param_1);
int SSLInfoHandler::GetIssuerName(int *param_1);
int SSLInfoHandler::GetCipher(int *param_1);
undefined4 SSLInfoHandler::GetSecurityQuality(int *param_1);
undefined4 SSLInfoHandler::GetCacheEntry(undefined4 *param_1);
void SSLInfoHandler::MakeEntryName(int param_1,undefined4 param_2);
void SSLInfoHandler::SetCacheEntry(int *param_1,undefined4 *param_2,uint param_3);
byte * SSLInfoHandler::GetCertAttributes(undefined4 param_1,undefined4 *param_2,byte *param_3,char param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void SongData::SongData(undefined4 *param_1);
void SongData::~SongData(int **param_1,uint param_2);
void SongData::Reset(int *param_1);
undefined4 * SongData::NewSongData(int *param_1);
void SongData::Idle(void);
void SongData::StopAllSongs(void);
void SongData::Play(int *param_1,undefined4 param_2);
undefined4 SongData::Validate(int *param_1);
void SongData::EndPlay(int param_1);
void SongData::SetResource(int param_1,int *param_2);
void SongData::SetVolume(int param_1,undefined4 param_2);
void SongData::SetTempo(int param_1,undefined4 param_2);
void SongData::Fadeout(int *param_1);
void SongData::Stop(int *param_1);
undefined4 SongData::IsSongListEmpty(void);
undefined4 SongData::IsPlayListEmpty(void);
void SongData::Pause(int param_1);
void SongData::Resume(int param_1);
void SongData::DisableAllLooping(void);
void SongData::Setup(void);
void SongData::Cleanup(void);
void SongData::FadeStep(int *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Muzac::Muzac(undefined4 *param_1);
void Muzac::~Muzac(int **param_1,uint param_2);
void Muzac::Idle(int *param_1);
void Muzac::Stop(int *param_1);
undefined4 Muzac::Start(int *param_1);
void Muzac::Skip(int *param_1);
void Muzac::Mute(int *param_1);
void Muzac::Add(int param_1,undefined4 *param_2);
undefined4 Muzac::GetVolume(int param_1);
undefined4 Muzac::GetTempo(int param_1);
void Muzac::SetVolume(int param_1,uint param_2);
void Muzac::SetTempo(int param_1,undefined4 param_2);
void Muzac::SetMaxPlayTime(int param_1,int param_2);
void Muzac::Delete(int param_1,byte *param_2);
void Muzac::DeleteAll(int param_1);
void Muzac::SetEnabled(int *param_1,uint param_2);
void Muzac::LoadPlayList(int param_1,byte *param_2);
void Muzac::CheckPlayListLoaded(int param_1);
void InitializeMuzac(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined * PV_AudioStreamGetFromReference(int param_1);
int PV_GetEmptyAudioStream(void);
void PV_FillBufferEndWithSilence(int param_1,int param_2);
void PV_CopyLastSamplesToFirst(int param_1,undefined4 *param_2,int param_3);
void PV_StartThisBufferPlaying(int param_1,int param_2);
void ASMP_Callback(int param_1,undefined4 *param_2,undefined4 *param_3);
uint AudioStreamOpen(int param_1);
undefined4 AudioStreamClose(void);
void AudioStreamPauseOne(int param_1);
void AudioStreamResumeOne(int param_1);
int AudioStreamStart(int param_1,undefined *param_2,int param_3,undefined4 param_4,int param_5,int param_6,undefined2 param_7);
void AudioStreamStopAll(void);
undefined4 AudioStreamStop(int param_1);
void AudioStreamSetVolume(int param_1,short param_2,int param_3);
int IsAudioStreamPlaying(int param_1);
void AudioStreamService(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int ** NewSongPtr(undefined4 param_1,undefined param_2,undefined4 param_3,undefined param_4,undefined4 param_5,undefined param_6);
void DisposeSongPtr(uint param_1);
void GetKeySplitFromPtr(int param_1,int param_2,uint *param_3);
void FinisSoundManager(void);
undefined4 InitSoundManager(void);
void CreateAudioTask(void);
void musicBufferHandler(undefined4 param_1);
void musicBufferHandlerTask(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void PV_Generate16outputStereo(short *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 ConvertADSRFlags(uint param_1);
int ** PV_GetSoundResource(uint param_1,int *param_2);
int ** PV_GetSampleData(uint param_1,int **param_2,undefined4 *param_3);
void PV_FreeCacheEntry(int **param_1);
undefined4 PV_FindSoundFromID(int param_1);
int PV_FindCacheFromID(int param_1);
int PV_FindCacheIndexFromPtr(int param_1);
void PV_FreeCacheEntryFromPtr(int *param_1);
void PV_SetSampleIntoCache(uint param_1,int **param_2);
int ** PV_GetSampleFromID(uint param_1,undefined4 *param_2);
void PV_ProcessSampleWithSMOD(byte *param_1,int param_2,short param_3,int param_4,int param_5,int param_6);
undefined4 DecodeCurveType(uint param_1);
undefined4 PV_GetEnvelopeData(int param_1,int param_2,int param_3);
uint * PV_CreateInstrumentFromResource(int param_1,uint param_2);
uint InitInstrument(undefined2 *param_1,int param_2,int param_3);
void DisposeInstrument(int **param_1);
int ** PV_GetInstrument(uint param_1,undefined2 *param_2,int param_3);
undefined4 GM_RemapInstrument(uint param_1,uint param_2);
undefined4 PV_AnyStereoInstrumentsLoaded(void);
undefined4 GM_LoadInstrument(uint param_1);
undefined4 GM_UnloadInstrument(uint param_1);
void GM_FlushInstrumentCache(char param_1);
int GM_LoadSongInstruments(short *param_1,short *param_2,int param_3);
undefined4 GM_UnloadSongInstruments(int param_1);
void GM_SetUsedInstrument(int param_1,short param_2,char param_3);
uint GM_IsInstrumentUsed(int param_1,short param_2);
void GM_GetInstrumentUsedRange(int param_1,int param_2);
void GM_SetInstrumentUsedRange(short param_1,char *param_2);
int GM_IsInstrumentRangeUsed(short param_1,short param_2,short param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void PV_ProcessReverbStereo(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int GM_ConvertPatchBank(int param_1,int param_2,short param_3);
void PV_ScaleDivision(int param_1,int param_2);
void PV_ResetControlers(int param_1,short param_2);
void PV_ConfigureInstruments(int param_1);
undefined4 PV_ConfigureMusic(int param_1);
int GM_BeginSong(int param_1,undefined4 param_2);
undefined4 GM_PauseSequencer(void);
bool GM_IsSongDone(int param_1);
void PV_CallSongCallback(short *param_1,char param_2);
void GM_EndSong(short *param_1);
void GM_SetSongLoopFlag(int param_1,uint param_2);
void GM_SetSongVolume(int param_1,ushort param_2);
undefined4 GM_SetMasterSongTempo(int param_1,int param_2);
void GM_SetSongPitchShift(int param_1,short param_2);
void GM_SetSongTime(short *param_1,uint param_2);
undefined4 GM_SongTicks(int param_1);
undefined4 GM_SongMicroseconds(int param_1);
void PV_SetChannelReverb(short param_1,short param_2);
void PV_ProcessProgramChange(int param_1,int param_2,int param_3,int param_4);
void PV_ProcessNoteOff(int param_1,int param_2,int param_3,short param_4);
void PV_ProcessNoteOn(int param_1,int param_2,int param_3,int param_4,uint param_5);
void PV_ProcessPitchBend(int param_1,int param_2,int param_3,uint param_4,byte param_5);
void PV_ProcessControler(int param_1,int param_2,int param_3,int param_4,ushort param_5);
int ** DecompressSampleFormatPtr(byte *param_1,int param_2);
void PV_ProcessIgorResource(undefined2 *param_1,int param_2,int **param_3,uint param_4,int param_5);
undefined4 PV_ValidateType(int param_1);
undefined4 PV_ValidateTypeCommands(int param_1);
void PV_ProcessIgorMeta(undefined2 *param_1,byte *param_2);
undefined4 PV_ProcessMetaEvents(int param_1,char *param_2,int param_3);
uint PV_ReadVariableLengthMidi(byte **param_1);
undefined4 ProcessMIDIEvent(undefined2 *param_1,byte **param_2,undefined4 *param_3,int param_4);
undefined4 PV_MusicIRQ(short *param_1);
void PV_ProcessSequencerEvents(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 GM_ChangeSystemVoices(short param_1,ushort param_2,short param_3);
char GM_InitGeneralSound(undefined4 param_1,int param_2,undefined4 param_3,short param_4,short param_5,short param_6);
void GM_FinisGeneralSound(void);
uint PV_ScaleVolumeFromChannelAndSong(short param_1,uint param_2);
void PV_CalculateStereoVolume(int param_1,uint *param_2,uint *param_3);
void SetChannelVolume(short param_1,uint param_2);
void PV_ChangeSustainedNotes(short param_1,short param_2);
int SetChannelStereoPosition(short param_1,uint param_2);
void SetChannelModWheel(short param_1,undefined param_2);
int SetChannelPitchBend(short param_1,uint param_2,uint param_3,uint param_4);
int GM_BeginDoubleBuffer(int param_1,undefined4 param_2,int param_3,uint param_4,undefined param_5,int param_6,int param_7,short param_8,undefined4 param_9,undefined4 param_10);
void GM_EndSample(int param_1);
uint GM_IsSoundDone(int param_1);
void GM_ChangeSampleVolume(int param_1,short param_2);
void GM_SetReverbType(char param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int PV_GetMidiData(uint param_1,undefined4 *param_2);
int ** PV_CreateSongFromMidi(uint param_1,int *param_2,undefined4 param_3);
void PV_SetTempo(int param_1,int param_2);
void GM_MergeExternalSong(int param_1,undefined2 param_2,undefined2 *param_3);
int ** PV_CreateSongFromExternalSong(undefined2 param_1,undefined2 *param_2,int *param_3,undefined4 param_4);
int ** GM_LoadSong(undefined2 param_1,undefined2 *param_2,int *param_3,undefined4 param_4,short *param_5,int param_6,undefined2 *param_7,int *param_8);
void GM_FreeSong(short *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void PV_DoCallBack(int param_1);
void PV_CleanNoteEntry(int param_1);
void PV_CalcScaleBack(void);
int PV_DoubleBufferCallbackAndSwap(undefined *param_1,undefined2 *param_2);
uint PV_GetWavePitch(uint param_1);
void PV_ADSRModule(int *param_1,int param_2);
uint GetWaveShape(int param_1,undefined param_2);
void PV_ServeInstrumentCurves(int param_1);
void PV_ServeThisInstrument(int *param_1);
void ProcessSampleFrame(uint *param_1);
void ServeMIDINote(ushort param_1,short param_2,uint param_3,uint param_4);
void StopMIDINote(undefined4 param_1,short param_2,ushort param_3);
void GM_EndAllNotes(int param_1);
undefined4 GM_GetAudioSampleFrame(short *param_1,short *param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void PV_ServeStereoInterp2FilterPartialBuffer(undefined2 *param_1,char param_2);
void PV_ServeStereoInterp2FilterFullBuffer(undefined2 *param_1);
void PV_ServeStereoInterp2FilterFullBuffer16(undefined2 *param_1);
void PV_ServeStereoInterp2FilterPartialBuffer16(undefined2 *param_1,char param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void PV_ServeStereoInterp2FullBuffer(int param_1);
void PV_ServeStereoInterp2PartialBuffer(undefined2 *param_1,char param_2);
void PV_ServeStereoInterp2FullBuffer16(int param_1);
void PV_ServeStereoInterp2PartialBuffer16(undefined2 *param_1,char param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void LZSSDeltaUncompress(ushort *param_1,int param_2,byte *param_3,int *param_4);
void doLZSSDecode(ushort *param_1,int param_2,byte *param_3,int param_4);
int ** DecompressSampleFormatPtr(byte *param_1,int param_2);
void UnDeltaSample(char *param_1,int param_2);
undefined2 * PV_GetSoundHeaderPtr(undefined2 *param_1,uint *param_2);
int ** XGetSamplePtrFromSnd(undefined2 *param_1,uint *param_2);
void VolumeAmpScaler(byte *param_1,int param_2,int param_3,int param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int XIsOurMemoryPtr(uint param_1);
int ** XNewPtr(int *param_1,char param_2);
void XDisposePtr(uint param_1);
void XSetBit(int param_1,uint param_2);
void XClearBit(int param_1,uint param_2);
bool XTestBit(int param_1,uint param_2);
int XGetAndDetachResource(uint param_1,uint param_2,undefined4 *param_3);
uint XGetLong(byte *param_1);
undefined2 XGetShort(undefined2 *param_1);
void XExpandMace1to3(undefined4 param_1,uint *param_2,int param_3,undefined4 param_4,undefined4 param_5,int param_6);
void XExpandMace1to6(undefined4 param_1,uint *param_2,int param_3,undefined4 param_4,undefined4 param_5,int param_6);
void XPutShort(undefined *param_1,undefined4 param_2);
undefined4 * MIDI::MIDI(undefined4 *param_1);
void MIDI::~MIDI(int **param_1,uint param_2);
void MIDI::Reset(int *param_1);
void MIDI::EndPlay(int param_1);
uint MIDI::GetTitle(int param_1);
void MIDI::SetSongTitle(int *param_1,undefined4 *param_2,uint param_3);
undefined4 MIDI::IsDone(int param_1);
undefined4 MIDI::ValidateData(int param_1,byte *param_2,uint param_3);
void MIDI::SetVolume(int param_1,undefined4 param_2);
void MIDI::SetTempo(int param_1,undefined4 param_2);
void MIDI::SetPitchShift(int param_1,short param_2);
int MIDI::GetPitchShift(int param_1);
void MIDI::Pause(int *param_1);
void MIDI::Resume(int *param_1);
undefined4 MIDI::GetSongTicksPlayed(int param_1);
void MIDI::SetSongTime(int param_1,uint param_2);
uint MIDI::TimePlayed(int param_1);
void MIDI::SetLooping(int param_1,char param_2);
undefined4 * SoundEffect::NewSoundEffect(byte *param_1);
int * SoundEffect::NewSoundEffect(byte *param_1,undefined4 param_2,uint param_3);
void AudioSetup(void);
void PV_AudioTask(void);
void SoundEffect::~SoundEffect(int **param_1,uint param_2);
void MIDISong::~MIDISong(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void __builtin_new(uint param_1);
void __builtin_delete(int **param_1);
void InitializeMemoryManagement(void);
void SwapMemory(undefined4 *param_1,uint param_2,uint param_3);
uint * AllocateMemory(uint param_1,uint param_2,short param_3);
int MemorySize(int param_1);
int NewHeap(undefined4 param_1,undefined4 param_2,undefined4 param_3);
void FreeMemory(int **param_1,short param_2);
void FreeMemoryLocked(int **param_1,short param_2);
int ** ReallocateMemory(int **param_1,uint param_2,uint param_3,short param_4);
void DumpFreeBlocks(short param_1);
void MemContents(undefined4 *param_1,int param_2,byte *param_3);
int HeapCheck(int param_1,short param_2);
void DumpHeapBlocks(char param_1,short param_2,int param_3,int param_4);
int GetFreeListMemorySize(short param_1);
void CheckTempMemInit(void);
void CheckTempMemUnInit(void);
void InitOffscreenMem(void);
void AddOffscreenMemBlk(int param_1,int param_2);
int AllocOffscreenMem(int param_1);
bool FreeOffscreenMem(uint param_1);
void DeleteOffscreenMem(void);
void AllocateTempMemory(uint param_1);
void FreeTempMemory(int **param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void InitializeFilesystems(void);
undefined4 * ResolveAtNode(undefined4 *param_1,byte *param_2,char param_3);
undefined4 * FSResolve(char *param_1,char param_2);
int Checksum(byte *param_1,uint param_2);
void FileHasChanged(byte *param_1);
undefined4 PtrIsValid(uint param_1);
undefined4 FileIsConsistent(uint param_1);
bool FilesystemIsConsistent(uint param_1);
undefined4 DirectoryIsConsistent(uint *param_1);
uint GetFileLength(int param_1);
void GetCompressedFileCacheEntry(int param_1);
byte * GetFileData(int param_1,char param_2);
void ReleaseFileData(int param_1);
bool NVInitialized(void);
undefined4 NVMemInit(char param_1);
void NVMemUninit(void);
bool NVInit(int param_1);
void NVCommit(void);
void NVRelease(void);
int NVChecksum(int param_1,int param_2);
bool NVWrite(undefined4 *param_1,uint param_2,uint param_3);
int * NVRead(int param_1,int *param_2);
void NVErase(void);
undefined4 NVDump(void);
undefined4 NVGetFlags(void);
void NVSetFlags(undefined4 param_1);
void NVJustSetFlags(undefined4 param_1);
undefined4 * StoreStream::StoreStream(undefined4 *param_1);
void StoreStream::~StoreStream(int **param_1,uint param_2);
int StoreStream::GetData(int param_1);
void StoreStream::GetDataExpected(int param_1);
void StoreStream::GetDataLength(int param_1);
int StoreStream::GetName(int param_1);
byte * StoreStream::DetermineURL(undefined4 param_1,int *param_2);
undefined4 StoreStream::Initialize(int param_1,int *param_2);
int * StoreStream::NewStream(int *param_1);
void StoreStream::SetDataType(int param_1,int param_2);
void StoreStream::GetDataAsString(int *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void WriteAlternate800(byte *param_1,undefined2 param_2);
void ReadAlternate800(undefined *param_1,undefined *param_2);
void WriteSharedSecret(byte *param_1,undefined2 param_2);
void ReadSharedSecret(undefined *param_1,undefined *param_2);
void WriteSecNVMagic(undefined4 param_1);
undefined4 ReadSecNVMagic(void);
void WriteSecNVFlags(byte param_1);
undefined ReadSecNVFlags(void);
void SetNVFlag(char param_1,byte param_2);
byte GetNVFlag(byte param_1);
void WriteCrashCount(byte param_1);
undefined ReadCrashCount(void);
void WriteMfgData(byte *param_1);
void ReadMfgData(undefined *param_1);
void AlarmClock::SetAlarm(int param_1,uint param_2);
void AlarmClock::ClearAlarm(int param_1);
undefined4 AlarmClock::Snooze(int param_1);
void AlarmClock::ClearSnooze(int param_1);
void AlarmClock::UpdateAlarms(void);
void AlarmClock::CheckAlarm(void);
undefined * GetCapabilityFlags(void);
int Clock::GetTimeZoneName(int param_1);
undefined4 Clock::GetTimeZoneOffset(void);
int Clock::GetDateTimeGMT(void);
int Clock::GetDateTimeGMT(undefined4 param_1,uint *param_2);
void Clock::SetDateTime(undefined4 param_1,undefined4 param_2);
void Clock::GetDateTimeLocal(void);
void Clock::GetDateString(int *param_1,char param_2);
void Clock::GetTimeString(int *param_1,char param_2);
void Clock::GetDateTimeString(int *param_1,char param_2);
undefined4 Clock::SetHeader(int param_1,byte *param_2,byte *param_3);
void Clock::SetTimeZone(int param_1,byte *param_2);
void Clock::SetTimeZone(int param_1,undefined4 param_2,undefined4 param_3);
void global_constructors_keyed_to_gClock(void);
void CheckIfTimerExpired(void);
void StartTimer(undefined4 *param_1);
void CancelTimer(int **param_1);
void Card::Card(undefined4 *param_1);
void SmartCard::SmartCard(int param_1);
void SmartCard::~SmartCard(int **param_1,uint param_2);
void SmartCard::Initialize(int *param_1);
void SmartCard::Idle(int **param_1);
int SmartCard::Read(int **param_1,undefined4 param_2,int param_3);
int SmartCard::Write(int **param_1,undefined4 param_2,int param_3);
undefined4 SmartCard::Format(int param_1);
undefined4 SmartCard::Seek(int param_1,int param_2);
int SmartCard::GetCardSize(int param_1);
undefined4 SmartCard::GetCardType(int param_1);
bool SmartCard::CardStateChanged(int **param_1);
void SmartCard::PostSmartCardEvent(ushort param_1,undefined param_2);
void SmartCard::Make(int **param_1,char *param_2);
void HandleSmartCardError(int param_1);
void UserTaskMain(undefined4 param_1,undefined4 param_2,char *param_3,byte *param_4);
undefined4 * System::System(undefined4 *param_1);
void System::~System(int **param_1,uint param_2);
void System::CheckSettingsLoaded(void);
void System::ClosePrinting(void);
undefined4 System::DispatchInputPower(undefined4 param_1,int param_2,char *param_3,byte *param_4);
undefined4 System::DispatchInputSmartCardInserted(undefined4 param_1);
undefined4 System::DispatchInputSmartCardRemoved(undefined4 param_1);
void System::ExecuteSmartCardURL(undefined4 param_1,byte *param_2,int param_3);
uint System::DispatchInputType(int *param_1,int param_2,int param_3,byte *param_4);
undefined4 System::GetCardNumber(void);
undefined * System::GetClientSerialNumber(void);
uint System::GetDefaultTitleText(void);
uint System::GetFavoriteIndexURL(void);
uint System::GetFavoriteURL(void);
int System::GetFontSizeRecord(int param_1);
undefined4 System::GetForceRegistration(void);
uint System::GetIRCNick(void);
uint System::GetLogURL(void);
uint System::GetSSLLogURL(void);
uint System::GetMailURL(void);
undefined4 System::GetManufacturer(void);
uint System::GetMessageWatchFailed(void);
uint System::GetPrinterSetupInfo(void);
uint System::GetPrinterModelInfo(void);
int System::GetPrintSystem(void);
uint System::GetSearchURL(void);
uint System::GetServerName1(void);
uint System::GetServerName2(void);
uint System::GetSmartCardInsertedMessage(void);
uint System::GetSmartCardInsertedURL(void);
uint System::GetSmartCardRemovedURL(void);
uint System::GetUserAgent(void);
void System::SetMessageWatchFailed(char param_1);
void System::HangupPhone(undefined4 param_1,undefined4 param_2,char *param_3,uint param_4);
void System::Initialize(void);
void System::InitSmartCard(void);
void System::LoadSettings(void);
int System::OpenPrinting(void);
void System::PowerOff(uint param_1);
void System::PowerOffLoop(void);
void System::PowerOn(int param_1,undefined4 param_2,char *param_3,byte *param_4);
void System::PowerOnLoop(undefined4 param_1,undefined4 param_2,char *param_3,uint param_4);
void System::RestoreState(void);
void System::SaveState(uint param_1);
undefined4 System::SetHeader(byte *param_1,undefined4 *param_2);
void System::SetDefaultTitleText(undefined4 param_1);
void System::SetDisplayMode(undefined4 param_1);
void System::SetFavoriteIndexURL(undefined4 param_1);
void System::SetFavoriteURL(undefined4 param_1);
void System::SetFontSizes(int param_1);
void System::SetGotoURL(undefined4 param_1);
void System::SetLogURL(undefined4 param_1);
void System::SetSSLLogURL(undefined4 param_1);
void System::SetMailCount(ushort param_1);
void System::SetMailURL(undefined4 param_1);
void System::SetNameServer(int param_1);
void System::SetScreenBorder(int param_1);
void System::SetSearchURL(undefined4 param_1);
void System::SetServerName1(undefined4 param_1);
void System::SetServerName2(undefined4 param_1);
void System::SetUserAgent(undefined4 param_1);
void System::ShowStartupScreen(void);
void System::SetSmartCardInsertedMessage(undefined4 param_1);
void System::SetSmartCardInsertedURL(undefined4 param_1);
void System::SetSmartCardRemovedURL(undefined4 param_1);
void System::UserLoopIteration(undefined4 param_1,undefined4 param_2,char *param_3,uint param_4);
void System::WriteHeaders(int *param_1);
void global_destructors_keyed_to_System::sPowerOffResource(void);
void global_constructors_keyed_to_System::sPowerOffResource(void);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined * System::GetVersion(void);
undefined4 System::GetVersionNumber(void);
undefined4 TestScript::StartPlaying(void);
undefined4 TestScript::StartPlaying(void);
void TestScript::Idle(void);
undefined4 HaveToDismissAlertWindow(void);
bool InitSiteList(void);
undefined4 GetSiteListCurrIndex(void);
void AddDocumentToSiteList(int param_1,undefined2 param_2,undefined4 param_3);
undefined4 AddSiteToSiteList(char *param_1,undefined2 param_2,undefined2 param_3);
void AdvanceCurrSite(void);
int FindSiteInSiteList(int param_1);
undefined4 EqualURLNoFragment(char *param_1,char *param_2);
int FindURLInSiteList(char *param_1);
bool GetCurrSiteFromSiteList(int *param_1,undefined2 *param_2,undefined2 *param_3);
uint GetSiteSize(int param_1);
bool GetSiteFromSiteList(int param_1,undefined4 *param_2,undefined2 *param_3,undefined2 *param_4);
void RemoveSiteFromSiteList(int param_1);
void RecopySiteOnSiteList(int param_1);
void PassCurrSite(void);
void FailCurrSite(void);
void SkipCurrSite(void);
void SetTouristState(int param_1);
void SaveTouristState(void);
void RestoreTouristState(void);
void InitializeTourist(void);
void ExecuteTourist(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void FinalizeTourist(void);
void IdleTourist(void);
undefined4 IsTouristActive(void);
bool IsTouristPaused(void);
undefined4 DoTouristInput(int param_1);
void DoTouristStateInitialize(void);
void DoTouristStateAboutToPause(void);
void DoTouristStateAboutToLoad(void);
void DoTouristStateWaitingForPage(void);
void DoTouristStateGotNewPage(void);
void DoTouristStatePrintPage(void);
void DoTouristStatePlaySound(void);
void DoTouristStateScrollThrough(void);
void DoTouristStateSelectThrough(void);
void DoTouristStateMonkeyMode(void);
void DoTouristStateMonkeyCleanup(void);
void DoTouristStateShowPage(void);
void DoTouristStateSkip(void);
void DoTouristStateFail(void);
void DoTouristStateFinalize(void);
undefined GetTouristEnabled(void);
void SetTouristEnabled(char param_1);
void SetStartAtTouristPage(undefined param_1);
undefined4 SetTouristHeaders(byte *param_1,byte *param_2,undefined4 param_3,undefined4 param_4);
void WriteTouristHeaders(int *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * AddressPanel::AddressPanel(undefined4 *param_1);
void AddressPanel::~AddressPanel(int **param_1,uint param_2);
void AddressPanel::ChangeIdleState(int *param_1,int param_2,int param_3);
void AddressPanel::CheckmarkAddresses(int *param_1);
void AddressPanel::Draw(int param_1,ushort **param_2);
int * AddressPanel::GetEditorTarget(int param_1);
uint AddressPanel::GetScrollingList(int param_1);
void AddressPanel::InsertAddress(int *param_1,uint param_2);
void AddressPanel::Open(int *param_1);
void AddressPanel::RemoveAddress(int *param_1,uint param_2);
void AddressPanel::WritePage(int param_1,undefined4 param_2,undefined4 param_3,char *param_4);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * AlertWindow::AlertWindow(undefined4 *param_1);
void AlertWindow::~AlertWindow(int **param_1,uint param_2);
void AlertWindow::ChangeIdleState(int param_1,int param_2,int param_3);
uint AlertWindow::DispatchInputType(uint **param_1,int param_2,int param_3);
void AlertWindow::Draw(int param_1,ushort **param_2);
void AlertWindow::ExecuteURL(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint AlertWindow::GetBackDisabled(int param_1);
undefined4 AlertWindow::GetError(int param_1);
void AlertWindow::GetLargeBounds(undefined4 param_1,int *param_2);
void AlertWindow::GetReconnectBounds(undefined4 param_1,int *param_2);
void AlertWindow::GetSmallBounds(undefined4 param_1,int *param_2);
void AlertWindow::Hide(int param_1);
void AlertWindow::WriteInactiveHTML(int param_1,int *param_2,undefined4 param_3,undefined4 param_4);
void AlertWindow::UpdateExplanation(int param_1);
void AlertWindow::WritePage(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void AlertWindow::Reset(int param_1);
void AlertWindow::SetAction(int param_1,char *param_2);
void AlertWindow::SetBackAction(int param_1,char *param_2);
void AlertWindow::SetBackDisabled(int param_1,int param_2);
void AlertWindow::SetButtonLabels(int param_1,char *param_2,char *param_3,char *param_4);
void AlertWindow::SetButtonActions(int param_1,char *param_2,int **param_3,int **param_4);
void AlertWindow::SetError(int param_1,int param_2,char *param_3,uint param_4);
void AlertWindow::SetErrorAndShow(int *param_1,int param_2);
void AlertWindow::SetErrorResource(int param_1,int *param_2);
void AlertWindow::SetExplanationURL(int param_1,byte *param_2);
void AlertWindow::SetImage(int param_1,char *param_2);
void AlertWindow::SetMessage(int param_1,char *param_2);
void AlertWindow::SetServerMessage(int param_1,char *param_2);
void AlertWindow::SetTargetFragment(int param_1,char *param_2);
void AlertWindow::Show(int *param_1);
void AlertWindow::ShowUnknownServiceError(int *param_1,int *param_2,undefined4 *param_3,uint param_4);
bool AlertWindow::WillPowerOff(int param_1);
undefined4 * SplashWindow::SplashWindow(undefined4 *param_1);
void SplashWindow::~SplashWindow(int **param_1,uint param_2);
uint SplashWindow::AnimationsDone(int param_1);
void SplashWindow::ChangeIdleState(int param_1,int param_2,int param_3);
undefined4 SplashWindow::DispatchInput(int *param_1,int param_2);
void SplashWindow::HandleRedirect(int *param_1,int *param_2);
void SplashWindow::Hide(int param_1);
void SplashWindow::Idle(int **param_1,int **param_2,int **param_3,uint **param_4);
void SplashWindow::WritePage(int param_1);
void SplashWindow::Reset(int param_1);
void SplashWindow::SetAnimation(int param_1,char *param_2);
void SplashWindow::SetHandleRedirect(int param_1,undefined param_2);
void SplashWindow::SetImage(int param_1,char *param_2);
void SplashWindow::SetSendResource(int param_1,int *param_2);
void SplashWindow::SetMessage(int param_1,char *param_2);
void SplashWindow::SetShowPage(int param_1,undefined param_2);
void SplashWindow::Show(int *param_1);
void Window::Window(undefined4 *param_1);
void Window::~Window(int **param_1,uint param_2);
void Window::Draw(int param_1,ushort **param_2);
void Window::Hide(int param_1);
uint Window::DispatchInputType(int *param_1,int param_2,int param_3);
void Window::SetURL(int param_1,byte *param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Button::Button(undefined4 *param_1);
void Button::~Button(int **param_1,uint param_2);
void Button::DeleteBorderImage(int param_1);
void Button::Paint(int param_1,ushort **param_2,ushort **param_3);
undefined4 * Button::GetMinimumSize(undefined4 *param_1,int param_2,int param_3);
void Button::SetBorderImage(int param_1,byte *param_2,undefined4 param_3,undefined4 *param_4);
void Button::SetLabel(int param_1,char *param_2);
undefined4 * ButtonControl::ButtonControl(undefined4 *param_1);
void ButtonControl::~ButtonControl(int **param_1,uint param_2);
void ButtonControl::Draw(int *param_1,int param_2,ushort **param_3);
void ButtonControl::Layout(int *param_1,int param_2,int *param_3);
void ButtonControl::SetAttribute(int param_1,int param_2,int param_3,uint param_4);
void ButtonControl::SetAttributeStr(int *param_1,int param_2,byte *param_3,undefined4 *param_4);
undefined4 * SubmitButton::SubmitButton(undefined4 *param_1);
void SubmitButton::~SubmitButton(int **param_1,uint param_2);
uint SubmitButton::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
undefined4 SubmitButton::IsSelectableSupported(int param_1,int param_2);
void SubmitButton::SetAttributeStr(int *param_1,int param_2,byte *param_3,undefined4 *param_4);
undefined4 * ResetButton::ResetButton(undefined4 *param_1);
uint ResetButton::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
void ResetButton::~ResetButton(int **param_1,uint param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void CheckBox::CheckBox(undefined4 *param_1);
void CheckBox::~CheckBox(int **param_1,uint param_2);
int * CheckBox::GetMinimumSize(int *param_1);
void CheckBox::Paint(int param_1,ushort **param_2,int *param_3);
undefined4 * CheckBoxControl::CheckBoxControl(undefined4 *param_1);
void CheckBoxControl::Commit(int *param_1);
uint CheckBoxControl::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
void CheckBoxControl::Draw(int *param_1,int param_2,int *param_3);
void CheckBoxControl::GetBoundsTight(int *param_1,undefined4 *param_2);
void CheckBoxControl::Layout(int *param_1);
void CheckBoxControl::RestoreFillinData(int param_1,char *param_2);
char * CheckBoxControl::SaveFillinData(int param_1,undefined *param_2);
void CheckBoxControl::AddSubmission(int param_1,int *param_2,char param_3);
void CheckBoxControl::~CheckBoxControl(int **param_1,uint param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void ClockField::ClockField(undefined4 *param_1);
void ClockField::~ClockField(int **param_1,uint param_2);
void ClockField::IClockField(int param_1,int param_2);
void ClockField::GetCurrentTime(int param_1);
void ClockField::Draw(int *param_1,int param_2,ushort **param_3);
uint ClockField::GetColor(int param_1,int param_2);
undefined4 ClockField::Idle(int *param_1,int *param_2);
void ClockField::Layout(int *param_1,int param_2);
void ClockField::SetStyle(int param_1,undefined4 param_2,undefined4 param_3);
undefined4 * ContentView::ContentView(undefined4 *param_1);
void ContentView::~ContentView(int **param_1,uint param_2);
undefined4 ContentView::BumpCursorPosition(int *param_1,int *param_2,int *param_3,char param_4);
bool ContentView::CanScrollDown(int param_1);
bool ContentView::CanScrollDownSoon(int param_1);
bool ContentView::CanScrollUp(int param_1);
bool ContentView::Completed(int param_1);
void ContentView::BackgroundToScreen(int param_1,int *param_2);
void ContentView::ContentToScreen(int param_1,int *param_2);
void ContentView::ContentToScreen(int param_1,int *param_2);
void ContentView::ScreenToContent(int param_1,int *param_2);
void ContentView::CreateParserBuilder(int param_1,int param_2);
void ContentView::DeleteAudio(int param_1,char param_2);
void ContentView::DeleteDocument(int param_1);
void ContentView::DeleteStream(int param_1);
undefined4 ContentView::DetermineTypeFromContent(int *param_1);
void ContentView::DocumentHeightChanged(int *param_1);
void ContentView::Draw(int param_1,undefined4 *param_2);
undefined ContentView::DispatchInput(int param_1,byte *param_2);
uint ContentView::DispatchInputType(int *param_1,int param_2,int param_3);
undefined4 ContentView::ExecuteLocalFunction(uint **param_1,byte *param_2,char *param_3,byte *param_4);
undefined4 ContentView::ExecuteSelectable(int *param_1,int *param_2);
void ContentView::ExecuteSafeURL(int *param_1,undefined4 *param_2,undefined4 *param_3,uint param_4);
void ContentView::ExecuteURL(uint **param_1,undefined4 *param_2,undefined4 *param_3,byte *param_4);
undefined4 * ContentView::GetCursorBounds(undefined4 *param_1,int param_2,int *param_3);
uint ContentView::GetPercentComplete(int param_1);
int ContentView::GetResource(int param_1);
void ContentView::GetScrollBounds(int param_1,undefined4 *param_2,char param_3);
int ContentView::HandleNonShowableResource(int param_1,int param_2);
undefined4 ContentView::HandleTabKey(int *param_1,char param_2);
int ContentView::GetAudio(int param_1);
bool ContentView::HasUserSelectedAudio(int param_1);
void ContentView::Idle(int **param_1,int **param_2,int **param_3,uint **param_4);
void ContentView::IdleCheckRelayout(int *param_1);
void ContentView::IdleCheckStatus(int *param_1,undefined4 param_2,int *param_3,uint param_4);
int ContentView::IdleWaitForDataType(int *param_1,undefined4 param_2,char *param_3,uint param_4);
undefined4 ContentView::IdleWaitForData(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 ContentView::IdleBeginDocument(int *param_1);
undefined4 ContentView::IdleWaitForDocumentTitle(int param_1);
int ContentView::IdleDocumentTitleComplete(int param_1);
int ContentView::IdleDocumentContentComplete(int param_1,char param_2);
undefined4 ContentView::IdleDocumentLayoutComplete(int param_1);
void ContentView::ChangeIdleState(int param_1,int param_2,int param_3);
bool ContentView::IsFinishedBuilding(int param_1);
bool ContentView::IsScrollable(int param_1);
uint ContentView::DoKeyboardInput(int *param_1,int param_2);
void ContentView::LockAudio(int param_1);
void ContentView::ParseDocument(int param_1,int *param_2);
void ContentView::PlayAudioSoon(int param_1);
void ContentView::PostTargetFragment(int param_1,char *param_2);
void ContentView::FirstScreenDrawingCompleted(void);
void ContentView::InitialScreenLayoutCompleted(int *param_1);
void ContentView::ReLayout(int *param_1);
void ContentView::Reload(int *param_1);
void ContentView::RequestLayout(int param_1,undefined4 param_2,int param_3,int param_4);
void ContentView::ScreenLayoutCompleted(void);
void ContentView::SetBounds(int param_1,undefined4 *param_2);
void ContentView::SetBounds(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
void ContentView::SetName(int param_1,char *param_2);
void ContentView::SetPriority(int param_1,uint param_2);
void ContentView::SetShouldPaintBackground(int param_1,uint param_2);
void ContentView::SetTopMargin(int param_1,undefined2 param_2);
uint ContentView::ShouldPaintBackground(int param_1);
uint ContentView::ShowFragment(int *param_1,byte *param_2);
void ContentView::ShowResource(int *param_1,int *param_2,char *param_3);
void ContentView::UnlockAudio(int param_1);
void ContentView::VisibleBackgroundBounds(int param_1,int *param_2);
void ContentView::VisibleContentBounds(int param_1,int *param_2);
bool ContentView::IsSelected(int param_1,int param_2);
undefined4 *ContentView::NextAnchorWithScroll(undefined4 *param_1,int *param_2,int param_3,char param_4,char param_5);
undefined4 *ContentView::NextVisibleAnchor(undefined4 *param_1,int param_2,undefined4 param_3,char param_4);
undefined4 *ContentView::NextVisibleAnchorBelow(undefined4 *param_1,int param_2,int param_3,char param_4,char param_5);
undefined4 * ContentView::NextVisibleAnchorRight(undefined4 *param_1);
undefined4 *ContentView::PreviousAnchorWithScroll(undefined4 *param_1,int *param_2,undefined4 param_3,char param_4,char param_5);
undefined4 *ContentView::PreviousVisibleAnchor(undefined4 *param_1,int param_2,undefined4 param_3,char param_4);
undefined4 *ContentView::PreviousVisibleAnchorAbove(undefined4 *param_1,int param_2,int param_3,char param_4,char param_5);
undefined4 * ContentView::PreviousVisibleAnchorLeft(undefined4 *param_1);
void ContentView::RefreshSelection(int param_1,undefined4 param_2,char param_3);
void ContentView::RefreshSelection(int param_1);
void ContentView::SaveSelectionPosition(int param_1);
void ContentView::SaveSelectionHPosition(int param_1);
void ContentView::SaveSelectionVPosition(int param_1);
int * ContentView::ScrollToFragment(int *param_1,byte *param_2);
undefined4 ContentView::ScrollToSelection(int *param_1,int param_2);
void ContentView::SelectFirstAnchor(int param_1);
undefined4 *ContentView::VisibleAnchorInNewPage(undefined4 *param_1,int param_2,undefined4 param_3,int param_4);
void ContentView::SelectNextAnchor(int *param_1,byte param_2,char param_3);
void ContentView::SelectPreviousAnchor(int *param_1,byte param_2,char param_3);
void ContentView::SelectTopAnchor(int param_1,undefined4 param_2);
void ContentView::SetCurrentSelectableWithScroll(int *param_1,int *param_2);
void ContentView::SetCurrentSelection(int param_1,undefined4 param_2,char param_3);
void ContentView::SetJSThis(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void ContentView::SetScrollPosition(int param_1,int param_2);
bool ContentView::ShouldEnterSideBar(int param_1,undefined4 param_2);
bool ContentView::ShouldLeaveSideBar(int param_1,undefined4 param_2);
void SelectionLayer::SelectionLayer(undefined4 *param_1);
void SelectionLayer::~SelectionLayer(int **param_1,uint param_2);
void SelectionLayer::DeleteBackBuffer(int param_1);
void SelectionLayer::Initialize(int param_1,undefined4 param_2);
void SelectionLayer::Draw(int param_1,undefined4 *param_2);
void SelectionLayer::DrawActiveNow(int param_1);
void SelectionLayer::DrawSelectionBorder(int param_1,undefined4 param_2,ushort **param_3);
void SelectionLayer::DrawCursor(int param_1,undefined4 param_2,int *param_3);
void SelectionLayer::RestoreBehind(int param_1,int *param_2);
void SelectionLayer::RestoreSavedBits(int param_1,int *param_2);
void SelectionLayer::SaveBehind(int param_1,undefined4 *param_2,int *param_3);
void SelectionLayer::UpdateSavedBits(int param_1,int *param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 ContentView::GetCurrentSelectable(int param_1);
void ContentView::GetBaseResource(int param_1);
undefined4 * ContentView::GetCursorPosition(undefined4 *param_1,int param_2);
undefined4 ContentView::GetCurrentInputTime(int param_1);
undefined4 * ContentView::GetCurrentSelection(undefined4 *param_1,int param_2);
void ControlScriptEvents::~ControlScriptEvents(int **param_1,uint param_2);
void ControlScriptEvents::SetOnBlur(undefined4 *param_1,char *param_2);
void ControlScriptEvents::SetOnChange(int param_1,char *param_2);
void ControlScriptEvents::SetOnClick(int param_1,char *param_2);
void ControlScriptEvents::SetOnFocus(int param_1,char *param_2);
void Control::Control(undefined4 *param_1);
void Control::~Control(int **param_1,uint param_2);
void Control::AddSubmission(int param_1,int *param_2);
void Control::Deselect(int *param_1,int param_2);
uint Control::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
void Control::ExecuteControlScript(int *param_1,int param_2,char *param_3,char param_4,char param_5);
undefined4 Control::GetDocument(int param_1);
undefined4 Control::GetFrameDocument(int param_1);
undefined4 Control::GetView(int param_1);
void Control::InvalidateBounds(int *param_1);
void Control::LayoutComplete(int *param_1,int param_2);
void Control::MoveToNextControl(int *param_1);
void Control::MoveToPreviousControl(int *param_1);
void Control::Select(int *param_1,int param_2);
void Control::SetAttribute(int param_1,int param_2,int param_3,uint param_4);
void Control::SetAttributeStr(int *param_1,int param_2,char *param_3);
void Control::SetName(int param_1,char *param_2);
void Control::SetValue(int *param_1,char *param_2);
uint Control::IsSelectable(int param_1);
undefined4 Control::IsSelectableSupported(int param_1,int param_2);
void Control::SetForm(int param_1,undefined4 param_2);
void Control::SetOnClick(int param_1,char *param_2);
void Control::SetOnBlur(int param_1,char *param_2);
void Control::SetOnChange(int param_1,char *param_2);
void Control::SetOnFocus(int param_1,char *param_2);
void Control::SetParent(int param_1,undefined4 param_2);
void InputImage::InputImage(undefined4 *param_1);
void InputImage::~InputImage(int **param_1,uint param_2);
uint InputImage::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
void InputImage::Draw(int param_1);
void InputImage::GetAlign(int param_1);
void InputImage::GetBoundsTight(int param_1);
void InputImage::GetLeft(int param_1);
void InputImage::GetHeight(int param_1);
undefined4 InputImage::GetImageMap(int *param_1);
undefined4 InputImage::GetSelectable(int param_1);
void InputImage::GetTop(int param_1);
void InputImage::GetWidth(int param_1);
uint InputImage::HasProperty(undefined4 param_1,int param_2);
undefined4 InputImage::Idle(int *param_1);
undefined InputImage::IsFloating(int param_1);
void InputImage::Layout(int param_1,int *param_2);
void InputImage::LayoutComplete(int *param_1,int param_2);
void InputImage::FloatingLayoutComplete(int param_1);
undefined InputImage::ReadyForLayout(int param_1);
void InputImage::ResetLayout(int param_1);
void InputImage::SetAttribute(int param_1,int param_2,int param_3,byte param_4);
void InputImage::SetAttributeStr(int *param_1,int param_2,char *param_3);
void InputImage::SetLeft(int param_1);
void InputImage::SetParent(int param_1,undefined4 param_2);
void InputImage::SetTop(int param_1);
void InputImage::AddSubmission(int param_1,int *param_2);
undefined4 * InputHidden::InputHidden(undefined4 *param_1);
void InputHidden::~InputHidden(int **param_1,uint param_2);
void InputHidden::SetAttribute(int param_1,int param_2,int param_3,uint param_4);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Control::SetTextStyle(int param_1,undefined4 param_2,undefined4 param_3);
undefined4 * Control::GetTextStyle(undefined4 *param_1,int param_2);
undefined4 * DimLayer::DimLayer(undefined4 *param_1);
void DimLayer::Draw(undefined4 param_1,undefined4 *param_2);
void DimLayer::~DimLayer(int **param_1,uint param_2);
undefined4 * FindPanel::FindPanel(undefined4 *param_1);
void FindPanel::~FindPanel(int **param_1,uint param_2);
void FindPanel::Open(int *param_1);
void FindPanel::Close(int *param_1,char param_2);
uint FindPanel::DispatchInputType(int *param_1,int param_2,int param_3);
void FindPanel::Draw(int *param_1,ushort **param_2);
void FindPanel::GetMessageString(void);
void FindPanel::WritePage(int param_1);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * GotoPanel::GotoPanel(undefined4 *param_1);
void GotoPanel::~GotoPanel(int **param_1,uint param_2);
void GotoPanel::GetMessageString(void);
uint GotoPanel::DispatchInputType(int *param_1,int param_2,int param_3);
void GotoPanel::WritePage(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Editor::Editor(undefined4 *param_1);
void Editor::~Editor(int **param_1,uint param_2);
void Editor::ChangeIdleState(int *param_1,int param_2,int param_3);
void Editor::Close(int *param_1,char param_2);
uint Editor::DispatchInputType(int *param_1,int param_2,int param_3);
void Editor::GetEditorTarget(int *param_1);
undefined4 *Editor::PreviousVisibleAnchorAbove(undefined4 *param_1,int param_2,int param_3,char param_4,char param_5);
void Editor::SetPanelBounds(int param_1,short param_2,short param_3);
void Keyboard::Keyboard(undefined4 *param_1);
void Keyboard::~Keyboard(int **param_1,uint param_2);
undefined4 Keyboard::ContainsTypingCommand(undefined4 param_1,char *param_2);
uint Keyboard::DispatchInputType(int *param_1,int param_2,uint *param_3,uint param_4);
void Keyboard::Draw(int *param_1,undefined4 *param_2);
void Keyboard::InsertChar(int *param_1,byte param_2);
void Keyboard::InstallKeyboard(int param_1,undefined4 param_2);
ushort Keyboard::IsNumeric(int *param_1);
void Keyboard::Open(int *param_1);
void Keyboard::MoveCursor(int *param_1,int param_2);
void Keyboard::Show(int param_1);
void Keyboard::TextCommand(int *param_1,undefined4 param_2,undefined4 param_3,uint param_4);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * InfoPanel::InfoPanel(undefined4 *param_1);
void InfoPanel::~InfoPanel(int **param_1,uint param_2);
void InfoPanel::WritePage(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Layer::Layer(undefined4 *param_1);
void Layer::~Layer(int **param_1,uint param_2);
int * Layer::GetKeyboardTarget(int *param_1);
int Layer::GetTopLayer(int param_1);
void Layer::Hide(int param_1);
void Layer::InvalidateBounds(int param_1,undefined4 *param_2);
void Layer::DrawAllBut(int *param_1);
void Layer::InvalidateAbove(int param_1,undefined4 *param_2);
void Layer::InvalidateBehind(int param_1,undefined4 *param_2);
void Layer::AddChild(int param_1,int param_2);
void Layer::DrawLayerInBounds(int *param_1,int *param_2);
void Layer::DrawLayer(int *param_1);
void Layer::Show(int param_1);
void Layer::IdleLayer(int *param_1);
void Layer::DrawBehind(int *param_1);
undefined4 * LoginPanel::LoginPanel(undefined4 *param_1);
void LoginPanel::~LoginPanel(int **param_1,uint param_2);
void LoginPanel::Close(int *param_1,char param_2);
uint LoginPanel::DispatchInputType(int *param_1,int param_2,int param_3);
void LoginPanel::GetMessageString(void);
void LoginPanel::Login(int *param_1,char *param_2,char *param_3);
void LoginPanel::Open(int *param_1);
void LoginPanel::SetDestination(int param_1,int *param_2);
void LoginPanel::SetRealm(int param_1,char *param_2);
void LoginPanel::WritePage(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void MenuLayer::MenuLayer(undefined4 *param_1);
void MenuLayer::~MenuLayer(int **param_1,uint param_2);
int MenuLayer::GetLineHeight(int param_1);
char MenuLayer::GetCharacterEncoding(int param_1);
void MenuLayer::ComputeBounds(int param_1);
char MenuLayer::DispatchInput(int *param_1,byte *param_2);
undefined MenuLayer::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
undefined4 MenuLayer::GetCellBounds(int param_1,uint param_2,undefined4 *param_3);
bool MenuLayer::GetSelectedBounds(int param_1,int *param_2);
void MenuLayer::Draw(int param_1,int *param_2);
void MenuLayer::Hide(int param_1);
void MenuLayer::IncrementalSearch(int param_1,int param_2);
void MenuLayer::SetTarget(int param_1,undefined4 param_2,int param_3);
void MenuLayer::SetFont(int param_1,undefined4 param_2);
void MenuLayer::Show(int param_1);
undefined4 * MenuItem::MenuItem(undefined4 *param_1);
void MenuItem::~MenuItem(int **param_1,uint param_2);
void MenuItem::Set(int param_1,char *param_2,char *param_3,uint param_4);
void MenuItem::Set(int param_1,int param_2);
undefined4 * Menu::Menu(undefined4 *param_1);
void Menu::~Menu(int **param_1,uint param_2);
undefined4 * Menu::AddItem(int param_1,byte *param_2,char *param_3,uint param_4,int param_5);
void Menu::AddItem(int param_1,undefined4 param_2,int param_3);
int Menu::FindItem(int param_1,byte *param_2);
uint Menu::GetMaxTextWidth(int param_1,int param_2,uint param_3,char param_4);
int Menu::IncrementalSearch(int param_1,int param_2);
void Menu::RemoveAll(int param_1);
void Menu::RemoveItems(int param_1,int param_2,int param_3);
undefined4 * MenuControl::MenuControl(undefined4 *param_1);
void MenuControl::~MenuControl(int **param_1,uint param_2);
void MenuControl::AddItem(int param_1,byte *param_2,char *param_3,uint param_4);
void MenuControl::AddItem(int param_1,int param_2);
void MenuControl::Changed(int *param_1);
void MenuControl::GetMaxTextWidth(int param_1,uint param_2,char param_3);
undefined4 MenuControl::Reset(int param_1);
void MenuControl::SetAttribute(int param_1,int param_2,int param_3,uint param_4);
undefined4 * PopUpMenuControl::PopUpMenuControl(undefined4 *param_1);
void PopUpMenuControl::~PopUpMenuControl(int **param_1,uint param_2);
void PopUpMenuControl::AddSubmission(int param_1,int *param_2);
uint PopUpMenuControl::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
void PopUpMenuControl::Draw(int *param_1,int param_2,ushort **param_3);
int PopUpMenuControl::GetSelectedItem(int param_1);
void PopUpMenuControl::Layout(int *param_1,int param_2,int *param_3);
void PopUpMenuControl::RestoreFillinData(int param_1,byte *param_2);
undefined4 PopUpMenuControl::SaveFillinData(int param_1);
void ScrollingList::ScrollingList(undefined4 *param_1);
void ScrollingList::~ScrollingList(int **param_1,uint param_2);
void ScrollingList::AdjustSizeFromBounds(int param_1,undefined4 param_2,int *param_3);
undefined ScrollingList::DispatchInputType(int *param_1,int param_2,int param_3);
void ScrollingList::Paint(int param_1,ushort **param_2,ushort **param_3);
void ScrollingList::PaintImage(undefined4 param_1,ushort **param_2,int *param_3,int *param_4,int *param_5);
void ScrollingList::SelectAt(int param_1,int param_2);
void ScrollingList::DeselectAt(int param_1,int param_2);
uint ScrollingList::IsActive(int param_1);
undefined4 * ScrollingList::GetMinimumSize(undefined4 *param_1,int param_2,int param_3);
undefined4 * ScrollingList::GetPreferredSize(undefined4 *param_1,int *param_2);
void ScrollingList::MakeVisible(int param_1,int param_2);
void ScrollingList::Select(int param_1);
void ScrollingList::SetSize(int param_1,int param_2);
void ScrollingList::ShowFirstSelected(int param_1);
void ScrollingListHelper::Invalidate(int param_1);
void ScrollingListControl::ScrollingListControl(undefined4 *param_1);
void ScrollingListControl::~ScrollingListControl(int **param_1,uint param_2);
void ScrollingListControl::AddSubmission(int param_1,int *param_2);
void ScrollingListControl::Deselect(int *param_1,int param_2);
uint ScrollingListControl::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
void ScrollingListControl::Draw(int *param_1,int param_2,undefined4 param_3);
void ScrollingListControl::SelectAt(int param_1,int param_2);
uint ScrollingListControl::HasProperty(undefined4 param_1,int param_2);
void ScrollingListControl::InvalidateBounds(int param_1);
bool ScrollingListControl::IsHighlightable(int *param_1);
bool ScrollingListControl::IsSelectable(int param_1);
void ScrollingListControl::Layout(int *param_1,int param_2,int *param_3);
void ScrollingListControl::RestoreFillinData(int param_1,byte *param_2);
uint * ScrollingListControl::SaveFillinData(int param_1,undefined *param_2,undefined4 param_3,undefined4 param_4);
void ScrollingListControl::Select(int *param_1,int param_2);
void ScrollingListControl::SetAttribute(int param_1,int param_2,int param_3,uint param_4);
void MenuControl::IncrementalSearch(int param_1,int param_2);
undefined4 MenuControl::GetMenuItem(int param_1,int param_2);
void MenuControl::FindItem(int param_1,byte *param_2);
undefined4 Menu::GetMenuItem(int param_1,int param_2);
void ScrollingListHelper::~ScrollingListHelper(int **param_1,uint param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 *OptionsPanel::OptionsPanel(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void OptionsPanel::~OptionsPanel(int **param_1,uint param_2);
void OptionsPanel::AdjustForOpen(int param_1);
int OptionsPanel::AudioSelectableCount(void);
bool OptionsPanel::CanShowAudioPanel(void);
void OptionsPanel::ChangeIdleState(int *param_1,int param_2,int param_3);
void OptionsPanel::Close(int *param_1);
void OptionsPanel::ComputeDisplayConstants(int param_1);
void OptionsPanel::CreateAudioScope(int param_1);
void RomOptionsImage(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void RomImage(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void RomGIFImage(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void OptionsPanel::CreateImages(int param_1,undefined *param_2,undefined4 param_3,undefined4 param_4);
void OptionsPanel::CreatePhoneAnimation(int param_1);
uint OptionsPanel::DispatchInputType(int *param_1,int param_2,int param_3);
void OptionsPanel::DrawOdometer(int param_1,ushort **param_2);
void OptionsPanel::Draw(int param_1,ushort **param_2);
void OptionsPanel::DrawAdvancedLabels(int param_1,ushort **param_2);
void OptionsPanel::DrawAudioControls(int param_1,undefined4 param_2);
void OptionsPanel::DrawAudioTimer(int param_1,ushort **param_2,char param_3,undefined4 param_4);
void OptionsPanel::DrawAudioScope(int param_1,undefined4 param_2);
void OptionsPanel::DrawPhoneStatus(int param_1,undefined4 param_2);
void OptionsPanel::DrawScrollArrows(int param_1,undefined4 param_2);
void OptionsPanel::DrawTitle(int param_1,ushort **param_2);
int OptionsPanel::GetPlayable(void);
int OptionsPanel::GetTopLayer(int param_1);
void OptionsPanel::Idle(int **param_1,int **param_2,int **param_3,uint **param_4);
void OptionsPanel::IdlePhoneAnimation(int param_1,char param_2);
void OptionsPanel::InitialLayout(int *param_1);
uint OptionsPanel::IsShown(int param_1);
void OptionsPanel::Open(int *param_1);
void OptionsPanel::PhoneStatusChanged(int param_1,int param_2);
void OptionsPanel::ScrollStatusChanged(int param_1);
void OptionsPanel::SetCanShowAdvanced(int param_1,uint param_2);
void OptionsPanel::SetIsPhoneInProgress(int param_1,uint param_2);
void OptionsPanel::SetMessage(int param_1,char *param_2);
void OptionsPanel::SetShown(int param_1,uint param_2);
void OptionsPanel::StartPhoneProgress(int param_1);
void OptionsPanel::StopPhoneProgress(int param_1);
void OptionsPanel::TitleChanged(int param_1);
void OptionsPanel::WritePage(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int LastFindStringFunction(void);
void SetLastFindString(char *param_1);
int LastExecuteURLFunction(void);
void SetLastExecuteURL(char *param_1);
undefined4 * BackURL::BackURL(undefined4 *param_1);
void BackURL::~BackURL(int **param_1,uint param_2);
void BackURL::SetFormData(int param_1,undefined4 param_2);
void BackURL::SetTarget(int param_1,char *param_2);
undefined4 * PageViewer::PageViewer(undefined4 *param_1);
void PageViewer::~PageViewer(int **param_1,uint param_2);
void PageViewer::AddBack(int param_1,int *param_2,char *param_3);
void PageViewer::AddRecent(int param_1,int *param_2,char *param_3);
undefined4 PageViewer::AlignScrollPoint(undefined4 param_1,int *param_2,undefined4 param_3,undefined4 param_4);
undefined4 PageViewer::GoBack(int *param_1,char param_2,int param_3);
void PageViewer::ChangeIdleState(int param_1,int param_2,int param_3);
void PageViewer::ClearBackList(int param_1);
uint PageViewer::DispatchInputType(int *param_1,int param_2,int param_3);
uint PageViewer::ExecuteSelectable(int *param_1,int *param_2);
undefined4 PageViewer::FindText(int param_1,byte *param_2,char param_3);
int * PageViewer::GetThumbnail(int param_1);
void PageViewer::HandleNonShowableResource(int param_1,int param_2);
void PageViewer::HideStatusIndicatorNow(int *param_1,char param_2,char param_3);
void PageViewer::Idle(int **param_1,int **param_2,int **param_3,uint **param_4);
undefined4 * PageViewer::NewBackURL(int param_1,int *param_2,char *param_3);
uint * PageViewer::NewURL(int param_1);
void PageViewer::NoBackAll(int param_1,byte *param_2);
void PageViewer::RedrawSelectionBeforeScroll(int param_1,undefined4 param_2);
void PageViewer::RemoveBack(int param_1);
void PageViewer::Reset(int *param_1);
void PageViewer::ResetStatusIndicator(int param_1);
void PageViewer::RestoreFormData(int param_1);
int PageViewer::ScrollBy(int param_1,int param_2);
undefined4 PageViewer::ScrollDown(int param_1,int param_2,int param_3);
void PageViewer::ScrollToPosition(int param_1,int param_2);
undefined4 PageViewer::ScrollUp(int param_1,int param_2,int param_3);
undefined4 PageViewer::SetHeader(int param_1,byte *param_2,byte *param_3);
void PageViewer::FirstScreenDrawingCompleted(int *param_1);
undefined4 PageViewer::GetPageCount(void);
void PageViewer::InitialScreenLayoutCompleted(int *param_1);
void PageViewer::ScreenLayoutCompleted(void);
uint PageViewer::ShowFragment(int *param_1,byte *param_2);
void PageViewer::ShowResource(int *param_1,int *param_2,byte *param_3);
bool PageViewer::WasVisited(int param_1,int *param_2,undefined4 *param_3);
int * VisitedList::VisitedList(int *param_1);
void VisitedList::~VisitedList(int **param_1,uint param_2);
void VisitedList::Add(int *param_1,int *param_2,char *param_3);
void VisitedList::DeleteAll(undefined4 *param_1);
uint * VisitedList::Find(int *param_1,int *param_2,undefined4 *param_3);
int VisitedURL::VisitedURL(int param_1);
void VisitedURL::~VisitedURL(int **param_1,uint param_2);
void VisitedURL::SetURL(uint *param_1,int *param_2,char *param_3);
void VisitedURL::Touch(int param_1);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void BackURL::SetSelectionPosition(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void BackURL::SetSelection(int param_1,undefined4 param_2);
void BackURL::SetResource(int param_1,int *param_2);
void BackURL::SetCursorPosition(int param_1,undefined4 param_2,undefined4 param_3);
undefined4 * BackURL::GetSelectionPosition(undefined4 *param_1,int param_2);
undefined4 * BackURL::GetSelection(undefined4 *param_1,int param_2);
undefined4 * BackURL::GetCursorPosition(undefined4 *param_1,int param_2);
undefined4 PageViewer::BackURLAt(int param_1,int param_2);
void Panel::Panel(undefined4 *param_1);
void Panel::~Panel(int **param_1,uint param_2);
bool Panel::NoAutoClose(int param_1);
void Panel::ChangeIdleState(int *param_1,int param_2,int param_3);
void Panel::Close(int *param_1,char param_2);
undefined Panel::DispatchInput(int *param_1,byte *param_2);
uint Panel::DispatchInputType(int *param_1,int param_2,int param_3);
void Panel::Draw(int *param_1,ushort **param_2);
void Panel::ExecuteURL(uint **param_1,undefined4 *param_2,undefined4 *param_3,byte *param_4);
uint Panel::IsOpen(int param_1);
void Panel::Open(int *param_1);
void Panel::SetCurrentSelectableWithScroll(int *param_1,int *param_2);
void Panel::SetIsOpen(int param_1,uint param_2);
void Panel::SetPanelBounds(int param_1,short param_2,short param_3);
void Panel::SetShowMessage(int *param_1,uint param_2);
void Panel::SetURL(int param_1,byte *param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * PrintPanel::PrintPanel(undefined4 *param_1);
void PrintPanel::~PrintPanel(int **param_1,uint param_2);
void PrintPanel::WritePage(int param_1);
undefined4 * PrintWindow::PrintWindow(undefined4 *param_1);
void PrintWindow::~PrintWindow(int **param_1,uint param_2);
void PrintWindow::ChangeIdleState(int param_1,int param_2,int param_3,undefined4 param_4);
uint PrintWindow::DispatchInputType(int *param_1,int param_2,int param_3);
void PrintWindow::Draw(int param_1,ushort **param_2);
void PrintWindow::GetButtonBounds(int param_1,int *param_2);
void PrintWindow::GetPercentDoneBounds(int param_1,int *param_2);
void PrintWindow::GetMessageBounds(int param_1,int *param_2);
void PrintWindow::GetExplainBounds(int param_1,int *param_2);
void PrintWindow::GetPreviewBounds(int param_1,int *param_2);
void PrintWindow::GetMaxUsedBounds(int param_1,int *param_2);
void PrintWindow::Hide(int param_1);
void PrintWindow::Idle(int **param_1,int **param_2,int **param_3,uint **param_4);
void PrintWindow::Print(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void PrintWindow::Reset(int param_1);
void PrintWindow::RefreshMessage(int *param_1);
void PrintWindow::SetMessage(int *param_1,char *param_2,int param_3,int param_4);
void PrintWindow::SetPageCount(int *param_1,undefined4 param_2);
void PrintWindow::SetPercentDone(int param_1,int param_2);
void PrintWindow::Show(int *param_1);
void PrintWindow::WritePage(int param_1);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void ProgressElement::ProgressElement(undefined4 *param_1);
void ProgressElement::~ProgressElement(int **param_1,uint param_2);
void ProgressElement::Initialize(int param_1);
void ProgressElement::InitImages(int param_1,undefined4 param_2);
void ProgressElement::SetAnimationInfo(int param_1,undefined4 param_2);
void ProgressElement::SetBarImage(int param_1,undefined4 param_2);
void ProgressElement::Idle(int param_1);
void ProgressElement::Paint(int param_1,undefined *param_2,int *param_3);
void ProgressElement::SetPercentDone(int param_1,int param_2);
void ProgressElement::GetPercentDoneBounds(int param_1,int *param_2);
void ProgressBar::ProgressBar(undefined4 *param_1);
void ProgressBar::~ProgressBar(int **param_1,uint param_2);
void ProgressBar::LayoutComplete(int *param_1,int param_2);
void ProgressBar::Draw(int param_1,int param_2,int *param_3);
undefined4 ProgressBar::Idle(int *param_1,int *param_2);
void ProgressBar::SetTarget(int param_1,int *param_2);
void ProgressBar::SetBarImage(int param_1,undefined4 param_2);
void ProgressBar::SetPercentDone(int param_1,int param_2);
void ProgressBar::SetAttribute(int param_1,int param_2,int param_3);
void ProgressBar::SetAttributeStr(void);
void ProgressElementHelper::~ProgressElementHelper(int **param_1,uint param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void RadioButton::RadioButton(undefined4 *param_1);
void RadioButton::Commit(int *param_1,int param_2);
void RadioButton::AddSubmission(int param_1,int *param_2,char param_3);
uint RadioButton::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
uint RadioButton::HasProperty(undefined4 param_1,int param_2);
void RadioButton::~RadioButton(int **param_1,uint param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * RecentPanel::RecentPanel(undefined4 *param_1);
void RecentPanel::~RecentPanel(int **param_1,uint param_2);
void RecentPanel::AddPage(int param_1,int *param_2,char *param_3,int *param_4);
void RecentPanel::ClearPages(int param_1);
void RecentPanel::ExecuteURL(uint **param_1,undefined4 *param_2,undefined4 *param_3,byte *param_4);
int RecentPanel::FindPage(int param_1,int *param_2);
void RecentPanel::RemoveRecentURL(int param_1,int *param_2);
void RecentPanel::WritePage(int param_1);
undefined4 RecentPanel::RecentURLAt(int param_1,int param_2);
undefined4 * RecentURL::RecentURL(undefined4 *param_1);
void RecentURL::~RecentURL(int **param_1,uint param_2);
uint * RecentURL::CopyURL(int param_1);
undefined4 RecentURL::GetTitle(int param_1);
int RecentURL::GetThumbnail(int param_1);
void RecentURL::PurgeThumbnail(int param_1);
void RecentURL::SetTitle(int param_1,char *param_2);
void RecentURL::SetThumbnail(int param_1,int *param_2);
void RecentURL::SetResource(int param_1,int *param_2);
void RecentURL::Touch(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * SavePanel::SavePanel(undefined4 *param_1);
void SavePanel::~SavePanel(int **param_1,uint param_2);
undefined4 SavePanel::ExecuteSelectable(int *param_1,int *param_2);
void SavePanel::WriteSaveMessageHTML(undefined4 param_1,int *param_2,char *param_3,char *param_4,char *param_5);
void SavePanel::WritePage(int param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 *Screen::Screen(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 *param_4);
void Screen::~Screen(int **param_1,uint param_2);
void Screen::CloseAllPanels(int param_1);
void Screen::CreateBorders(undefined4 param_1,undefined *param_2,undefined4 param_3,undefined4 *param_4);
void Screen::CreateImages(void);
void Screen::CreateLayers(undefined4 param_1,undefined *param_2,undefined4 param_3,undefined4 param_4);
void Screen::CreateSoundEffects(void);
void Screen::DestroyBorders(void);
void Screen::DestroyImages(void);
void Screen::DestroyLayers(int param_1);
void Screen::DestroySoundEffects(void);
undefined4 Screen::DispatchInput(int *param_1,byte *param_2);
uint Screen::DispatchInputType(int *param_1,int param_2,int param_3);
void Screen::Draw(int param_1);
undefined4 Screen::GetCurrentPanel(int param_1);
int * Screen::GetKeyboardTarget(int param_1);
undefined4 Screen::GetTopLayer(int param_1);
undefined4 Screen::GoHome(int param_1,char param_2);
void Screen::Idle(int param_1);
void Screen::Initialize(undefined4 param_1,undefined *param_2,undefined4 param_3,undefined4 *param_4);
void Screen::Layout(int param_1);
void Screen::RedrawNow(int param_1);
void Screen::ReloadPage(int param_1);
void Screen::SetCurrentPanel(int param_1,int param_2);
void Screen::SlideAreaDown(undefined4 param_1,undefined4 *param_2,int param_3,int param_4);
void Screen::SlideAreaUp(undefined4 param_1,undefined4 *param_2,int param_3,int param_4,int param_5,ushort param_6);
void Screen::SlidePageAndAreaDown(undefined4 param_1,undefined4 *param_2,int *param_3,uint param_4,uint param_5);
void Screen::SlideViewAndAreaDown(undefined4 param_1,undefined4 *param_2,undefined4 *param_3,uint param_4,uint param_5);
void Screen::SlideViewAndAreaUp(undefined4 param_1,undefined4 *param_2,undefined4 *param_3,uint param_4,uint param_5);
void Screen::DisableOptionsPanel(int param_1);
void Screen::EnableOptionsPanel(int param_1);
void Screen::HideOptionsPanel(void);
void Screen::ShowOptionsPanel(void);
void Screen::ShowURL(int param_1,byte *param_2);
void TVScreen::TVScreen(undefined4 *param_1);
undefined4 TVScreen::DispatchInput(int param_1,uint *param_2);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 * SendPanel::SendPanel(undefined4 *param_1);
void SendPanel::~SendPanel(int **param_1,uint param_2);
void SendPanel::WriteDisabledHTML(undefined4 param_1,int *param_2);
undefined4 SendPanel::ExecuteSelectable(int *param_1,int *param_2);
void SendPanel::WriteMessageHTML(undefined4 param_1,int *param_2);
void SendPanel::WriteNoSendHTML(undefined4 param_1,int *param_2);
void SendPanel::WriteSendHTML(undefined4 param_1,int *param_2,undefined4 param_3,undefined4 param_4);
void SendPanel::WritePage(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void Indicator::Indicator(undefined4 *param_1);
void Indicator::~Indicator(int **param_1,uint param_2);
undefined4 Indicator::GetTopLayer(int param_1);
void Indicator::Hide(int param_1);
undefined Indicator::IsDisabled(int param_1);
void Indicator::SetDisabled(int param_1,undefined param_2);
void Indicator::SetMessage(int param_1,int **param_2,char param_3);
void Indicator::SetPercentDone(int *param_1,int param_2);
void Indicator::SetTarget(int *param_1,int *param_2,int param_3);
void Indicator::Show(int param_1);
void StatusIndicator::StatusIndicator(undefined4 *param_1);
void StatusIndicator::~StatusIndicator(int **param_1,uint param_2);
void StatusIndicator::Draw(int *param_1,int *param_2);
void StatusIndicator::Hide(int param_1);
void StatusIndicator::SetBounds(int param_1,int *param_2);
void StatusIndicator::Idle(int *param_1);
void StatusIndicator::Show(int param_1);
void ConnectIndicator::ConnectIndicator(undefined4 *param_1);
void ConnectIndicator::~ConnectIndicator(int **param_1,uint param_2);
void ConnectIndicator::Draw(int *param_1,ushort **param_2);
void ConnectIndicator::Show(int param_1);
int * Indicator::GetTarget(int *param_1,int param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void SystemLogo::SystemLogo(undefined4 *param_1);
void SystemLogo::~SystemLogo(int **param_1,uint param_2);
undefined4 SystemLogo::GetTopLayer(int param_1);
void SystemLogo::Draw(int param_1,undefined4 param_2);
void SystemLogo::Idle(int *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int CopyStringNoCRLF(char *param_1,char *param_2,int param_3);
int * TextFieldControl::TextFieldControl(int *param_1);
void TextFieldControl::~TextFieldControl(int **param_1,uint param_2);
void TextFieldControl::Activate(int param_1);
void TextFieldControl::AddDefaultText(int param_1,char *param_2);
void TextFieldControl::AddSubmission(int param_1,int *param_2);
int TextFieldControl::AddText(int param_1,byte *param_2,int param_3,uint param_4);
void TextFieldControl::Backspace(int *param_1);
void TextFieldControl::CalculateHorizPos(int *param_1);
void TextFieldControl::ClearText(int *param_1);
void TextFieldControl::Deactivate(int param_1);
void TextFieldControl::DeleteLine(int *param_1);
void TextFieldControl::Deselect(int *param_1,int param_2);
uint TextFieldControl::DispatchInputType(int *param_1,int param_2,int param_3,uint param_4);
void TextFieldControl::Draw(int *param_1,int param_2,ushort **param_3);
void TextFieldControl::DrawText(int *param_1,ushort **param_2,uint param_3,char param_4,byte *param_5,int param_6,int param_7,int param_8,ushort **param_9);
void TextFieldControl::DrawTextInBox(int *param_1,undefined4 param_2,undefined4 param_3,undefined param_4,char *param_5,int param_6,undefined4 param_7,int param_8,int param_9,undefined4 param_10);
void TextFieldControl::EndOfField(int *param_1);
void TextFieldControl::EndOfLine(int *param_1);
void TextFieldControl::BeginningOfLine(int *param_1);
undefined TextFieldControl::GetCharacterEncoding(int param_1);
uint TextFieldControl::GetExecuteURL(int param_1);
int TextFieldControl::GetLeftSpace(int param_1);
undefined4 TextFieldControl::GetTopSpace(int param_1);
int TextFieldControl::GetRightSpace(int param_1);
undefined4 TextFieldControl::GetBottomSpace(int param_1);
void TextFieldControl::GetFont(int param_1,int param_2);
int TextFieldControl::GetLineHeight(int param_1);
int TextFieldControl::GetLineStartPosition(int param_1);
int TextFieldControl::GetLineEndPosition(int param_1);
undefined4 TextFieldControl::GetText(int param_1);
int TextFieldControl::GetTextWidthLimit(int *param_1);
int TextFieldControl::GetRowCount(int param_1);
void TextFieldControl::GetView(int param_1);
int TextFieldControl::GetVisibleText(int param_1);
void TextFieldControl::GetCursorBounds(int *param_1,int *param_2);
void TextFieldControl::GetTextBounds(int *param_1,int *param_2);
void TextFieldControl::HandleRowCountChanged(int *param_1);
void TextFieldControl::HandleWordWrap(int *param_1);
uint TextFieldControl::HasProperty(undefined4 param_1,int param_2);
ushort TextFieldControl::HasNumbersFirst(int param_1);
undefined4 TextFieldControl::Idle(int *param_1,int param_2);
void TextFieldControl::SetCursorPosition(int *param_1,int param_2);
void TextFieldControl::InputCharacter(int *param_1,byte param_2);
void TextFieldControl::ProcessInputCharacter(int *param_1,byte param_2);
void TextFieldControl::InsertChar(int *param_1,byte param_2);
void TextFieldControl::InsertText(int *param_1,byte *param_2);
void TextFieldControl::InvalidateBounds(int *param_1,char param_2);
uint TextFieldControl::IsLocked(int param_1);
undefined4 TextFieldControl::IsSelectable(int param_1);
uint TextFieldControl::IsShifted(int param_1);
void TextFieldControl::SetKeyboardEncoding(int param_1,undefined param_2);
void TextFieldControl::Layout(int *param_1,int param_2,int *param_3);
undefined4 TextFieldControl::MoveCursorDown(int *param_1);
undefined4 TextFieldControl::MoveCursorLeft(int *param_1);
undefined4 TextFieldControl::MoveCursorRight(int *param_1);
undefined4 TextFieldControl::MoveCursorUp(int *param_1);
void TextFieldControl::MoveCursorToTop(int *param_1);
void TextFieldControl::MakeActive(int param_1);
void TextFieldControl::MakeSpaceAvailable(int param_1,int param_2);
void TextFieldControl::MoveToNextField(int *param_1);
void TextFieldControl::RefreshAfterInput(int *param_1);
void TextFieldControl::RefreshCapsIndicator(int param_1,char param_2);
undefined4 TextFieldControl::ReplaceTextWith(int *param_1,byte *param_2,undefined4 param_3,char param_4);
bool TextFieldControl::Reset(int *param_1);
void TextFieldControl::RestoreFillinData(int *param_1,byte *param_2);
void TextFieldControl::ReplaceText(int *param_1,byte *param_2);
void TextFieldControl::Return(int *param_1,undefined4 param_2,undefined4 param_3,uint param_4);
char * TextFieldControl::SaveFillinData(int param_1);
void TextFieldControl::Select(int *param_1,int param_2,int *param_3);
void TextFieldControl::CalculateInitialPosition(int *param_1,int *param_2);
void TextFieldControl::SelectFirst(int param_1);
void TextFieldControl::SetLocked(int param_1,uint param_2);
void TextFieldControl::SetShifted(int param_1,uint param_2);
void TextFieldControl::SetAttribute(int param_1,int param_2,int param_3,uint param_4);
void TextFieldControl::SetAttributeStr(int *param_1,int param_2,byte *param_3,undefined4 *param_4);
void TextFieldControl::UpdateFirstPosition(int *param_1);
void InputPassword::InputPassword(int *param_1);
void InputPassword::~InputPassword(int **param_1,uint param_2);
void InputPassword::DrawText(int *param_1,ushort **param_2,uint param_3,char param_4,undefined4 param_5,uint param_6,int param_7,int param_8,ushort **param_9);
void InputPassword::Layout(int *param_1,int param_2,int *param_3);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void UIElement::UIElement(undefined4 *param_1);
void UIElement::~UIElement(int **param_1,uint param_2);
void UIElement::Dispose(int param_1);
undefined4 UIElement::GetPreferredSize(undefined4 param_1,int *param_2);
void UIElement::Print(int *param_1);
void UIElement::SetBackground(int param_1,undefined4 param_2);
void UIElement::SetFont(int param_1,undefined4 param_2,undefined param_3);
void UIElement::SetForeground(int param_1,undefined4 param_2);
void UIElement::SetIdleWanted(int param_1,undefined param_2);
void UIElement::Invalidate(int param_1);
undefined UIElement::Action(int param_1);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 GetUIString(uint param_1,undefined4 param_2);
void UpgradeBlock::UpgradeBlock(undefined4 *param_1);
void UpgradeBlock::~UpgradeBlock(int **param_1,uint param_2);
uint UpgradeBlock::HasProperty(undefined4 param_1,int param_2);
uint UpgradeBlock::Idle(int *param_1,int *param_2,undefined4 param_3,undefined4 param_4);
void UpgradeBlock::Load(int param_1,int *param_2);
void UpgradeBlock::SetAttribute(int param_1,int param_2,int param_3);
void UpgradeBlock::SetAttributeStr(int param_1,int param_2,char *param_3);
void UIElementHelper::~UIElementHelper(int **param_1,uint param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
uint * UncommentedAddress(byte *param_1);
char * AddressCommaIndex(char *param_1);
void ParseAddressList(byte *param_1,int *param_2);
undefined4 CheckRFC822Syntax(byte *param_1);
bool IsRFC822SpecialChar(char param_1);
bool IsPrefix(byte *param_1,byte *param_2);
void Cache::~Cache(int **param_1,uint param_2);
void Cache::Add(int param_1,byte *param_2,int param_3,int param_4);
int Cache::Add(int param_1,byte *param_2,undefined4 *param_3,uint param_4,int param_5,int param_6);
int Cache::CompareForPurge(undefined4 param_1,int *param_2,int *param_3);
int Cache::CompareForRemove(undefined4 param_1,int *param_2,int *param_3);
void Cache::Delete(int param_1,char *param_2);
void Cache::Delete(int param_1,char *param_2,byte *param_3,int param_4);
void Cache::DisableLoadingAll(int param_1);
void Cache::CleanupForRelogin(int param_1);
void Cache::Find(int param_1,char *param_2);
int Cache::Find(int param_1,char *param_2,byte *param_3,int param_4);
int Cache::FindFreeEntry(int param_1,int param_2);
undefined4 Cache::FindPending(int param_1,int *param_2);
int Cache::GetUsedCount(int param_1);
void Cache::Initialize(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,int param_5);
void Cache::Initialize(void);
void Cache::LoadIfFileBased(undefined4 param_1,int param_2);
int Cache::LockData(int param_1,int param_2);
bool Cache::MakeAvailable(int param_1,int param_2,int param_3);
void Cache::Purge(undefined4 param_1,int param_2);
void Cache::Remove(int param_1,int param_2);
void Cache::RemoveAll(int param_1);
undefined4 Cache::Resize(int param_1,int param_2,uint param_3,uint param_4);
uint Cache::ResizeData(int param_1,int param_2,int param_3,uint param_4);
undefined4 Cache::SetHeader(int param_1,byte *param_2,byte *param_3);
void Cache::Unauthorize(int param_1,byte *param_2);
void Cache::SortForPending(int param_1);
void Cache::SortForPurge(int param_1);
void Cache::SortForRemove(int param_1);
void Cache::UnlockData(int param_1,int param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int Cache::GetFreeCount(int param_1);
int * CacheBuffer::CacheBuffer(int *param_1);
void CacheBuffer::~CacheBuffer(int **param_1,uint param_2);
int CacheBuffer::GetData(int *param_1);
void CacheBuffer::GetLength(int *param_1);
bool CacheBuffer::SetLength(int *param_1,int param_2);
void CacheEntry::BeginUse(int param_1);
void CacheEntry::BeginUseData(int param_1);
void CacheEntry::EndUse(int param_1);
void CacheEntry::EndUseData(int param_1);
int CacheEntry::GetAuthorization(int param_1);
int CacheEntry::GetDataCapacity(int param_1);
uint CacheEntry::GetDataLength(int param_1);
int CacheEntry::GetCacheEntryItemOffset(int param_1,int param_2);
uint CacheEntry::GetReferer(int param_1);
undefined4 CacheEntry::GetLastUsed(int param_1);
uint CacheEntry::GetPercentComplete(int param_1,uint param_2);
int CacheEntry::GetPostData(int param_1);
bool CacheEntry::HasExpired(int param_1);
undefined4 CacheEntry::IsNamed(int param_1,char *param_2,byte *param_3,int param_4);
bool CacheEntry::IsPurgable(int param_1);
uint CacheEntry::IsPurgableNow(int param_1);
uint CacheEntry::IsRemovable(int param_1);
void CacheEntry::Move(int param_1,int param_2);
undefined4 CacheEntry::Purge(int param_1);
void CacheEntry::Reset(int param_1);
void CacheEntry::ResetAuthorization(int param_1,int param_2);
void CacheEntry::SetAuthorization(int param_1,char *param_2,int param_3);
void CacheEntry::SetBase(int param_1,undefined4 param_2);
void CacheEntry::SetDataExpected(int param_1,int param_2,uint param_3);
void CacheEntry::SetDataLength(int param_1,int param_2);
void CacheEntry::SetDataType(int param_1,int param_2);
void CacheEntry::SetExpires(int param_1,undefined4 param_2,char param_3);
void CacheEntry::SetForceReload(int param_1,uint param_2);
void CacheEntry::SetIsConstant(int param_1,uint param_2);
void CacheEntry::SetIsCompressed(int param_1,uint param_2);
void CacheEntry::SetIsDataSafe(int param_1,uint param_2);
void CacheEntry::SetIsDataTrusted(int param_1,uint param_2);
void CacheEntry::SetIsPrimary(int param_1,uint param_2);
void CacheEntry::SetIsSecure(int param_1,uint param_2);
void CacheEntry::SetSecurityInfo(int param_1,int param_2);
void CacheEntry::SetIsFileBased(int param_1,uint param_2);
void CacheEntry::SetIsLocal(int param_1,uint param_2);
void CacheEntry::SetIsLocked(int param_1,uint param_2);
void CacheEntry::SetIsPostDataBinary(int param_1,uint param_2);
void CacheEntry::SetLastModified(int param_1,undefined4 param_2);
void CacheEntry::SetLength(int param_1,int param_2);
void CacheEntry::SetName(int param_1,byte *param_2,int param_3);
void CacheEntry::SetPostData(int param_1,undefined4 *param_2,uint param_3,int param_4);
void CacheEntry::SetPriority(int param_1,uint param_2);
void CacheEntry::SetReferer(int param_1,int param_2);
void CacheEntry::SetRequestType(int param_1,uint param_2);
void CacheEntry::SetRequestTime(int param_1,undefined4 param_2);
void CacheEntry::SetStatus(int param_1,int param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void CacheStream::CacheStream(undefined4 *param_1);
void CacheStream::~CacheStream(int **param_1,uint param_2);
int CacheStream::GetData(int param_1);
int CacheStream::GetDataAsString(int *param_1);
uint CacheStream::GetDataLength(int param_1);
int CacheStream::GetPending(int *param_1);
int CacheStream::GetName(int param_1);
uint CacheStream::GetPercentComplete(int param_1,uint param_2);
void CacheStream::Initialize(int param_1,int param_2,int param_3);
undefined CacheStream::MakeAvailable(int *param_1,int param_2);
undefined4 * CacheStream::NewStream(int param_1,uint param_2);
void CacheStream::Rewind(int param_1);
char * ParseBoundary(byte *param_1);
uint CacheStream::SetHeader(int *param_1,byte *param_2,byte *param_3);
void CacheStream::SetCacheReserveSize(int param_1,undefined2 param_2);
void CacheStream::SetBoundary(int param_1,char *param_2);
void CacheStream::SetDataType(int param_1,int param_2);
void CacheStream::SetDataExpected(int *param_1,int param_2,uint param_3);
void CacheStream::SetExpires(int param_1,undefined4 param_2);
void CacheStream::SetDataLength(int *param_1,int param_2);
void CacheStream::SetIsCompressed(int param_1,uint param_2);
void CacheStream::SetIsDataTrusted(int param_1,uint param_2);
void CacheStream::SetLastModified(int param_1,undefined4 param_2);
void CacheStream::SetName(int param_1,byte *param_2);
void CacheStream::SetPriority(int param_1,uint param_2);
void CacheStream::SetRingSize(int *param_1,uint param_2);
void CacheStream::SetStatus(int *param_1,int param_2);
uint CacheStream::Read(int *param_1,undefined4 *param_2,uint param_3);
int CacheStream::ReadNext(int *param_1,int param_2);
void CacheStream::Unread(int param_1,int param_2);
uint CacheStream::Write(int *param_1,undefined4 *param_2,uint param_3);
int CacheStream::WriteIgnoreUntilBoundary(int *param_1,char *param_2,int param_3);
int CacheStream::WriteIgnoreUntilBoundaryCRLF(int *param_1,char *param_2,int param_3);
uint CacheStream::WriteNormally(int *param_1,undefined4 *param_2,uint param_3);
int CacheStream::WriteReadHeaders(int *param_1,char *param_2,int param_3);
int CacheStream::WriteUntilBoundary(int *param_1,undefined4 *param_2,int param_3);
undefined4 CacheStream::WriteUntilBoundaryFinal(int *param_1,char *param_2,int param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void CompressionStream::CompressionStream(undefined4 *param_1);
void CompressionStream::~CompressionStream(int **param_1,uint param_2);
void CompressionAHufStream::CompressionAHufStream(undefined4 *param_1);
void CompressionAHufStream::~CompressionAHufStream(int **param_1,uint param_2);
void CompressionAHufStream::BeginWriting(int param_1,uint param_2);
int CompressionAHufStream::Write(int param_1,byte *param_2,int param_3);
void CompressionLzpfStream::CompressionLzpfStream(undefined4 *param_1);
void CompressionLzpfStream::~CompressionLzpfStream(int **param_1,uint param_2);
void CompressionLzpfStream::BeginWriting(int param_1,uint param_2);
int CompressionLzpfStream::Write(int param_1,byte *param_2,int param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
int CheckDataTypeIndex(int param_1,char param_2);
undefined4 MapURLToDataType(undefined4 *param_1,char param_2);
bool MimeEqualStringN(byte *param_1,byte *param_2,int param_3);
int MapMimeToDataType(byte *param_1,undefined4 *param_2,char param_3);
undefined ** MapDataTypeToMimeTypeDescriptor(int param_1);
int GetJSNumMimeDescriptors(void);
undefined ** GetJSMimeTypeDescriptor(int param_1);
uint * DateTimeParser::DateTimeParser(uint *param_1);
undefined * DateTimeParser::GetAMPMString(int param_1,char param_2);
int DateTimeParser::GetHours12(int param_1);
int DateTimeParser::GetMonthString(int param_1,char param_2);
undefined ** DateTimeParser::GetMonthAbbreviatedString(int param_1,char param_2);
undefined * DateTimeParser::GetDayOfWeekString(int param_1,char param_2);
undefined * DateTimeParser::GetDayOfWeekAbbreviatedString(int param_1,char param_2);
uint DateTimeParser::Parse(byte *param_1);
void DateTimeParser::Reset(undefined4 *param_1);
void DateTimeParser::SetDateTime(int *param_1,int param_2);
void DateTimeParser::SetDateTime(int *param_1,int param_2,int param_3,int param_4,int param_5,int param_6,int param_7,undefined4 param_8,undefined4 param_9);
void DateTimeParser::SetTimeZone(int param_1,undefined4 param_2,undefined4 param_3);
void DateTimeParser::SetTimeZoneName(int param_1,byte *param_2);
void DateTimeParser::SetTimeZoneOffset(int param_1,int param_2);
int DateTimeParser::GetDateString(int param_1,char param_2);
int DateTimeParser::GetTimeString(int param_1,char param_2);
int DateTimeParser::GetDateTimeString(int param_1,char param_2);
void DateTimeParser::SetDateTime(int *param_1,byte *param_2);
int DateTimeParser::ComputeDateTime(int *param_1);
uint DateTimeParser::strftime(int param_1,int param_2,int param_3,char *param_4);
int FindTimeZoneOffset(byte *param_1);
int FindMonth(byte *param_1);
int FindDayOfWeek(byte *param_1);
int GetDaysInMonth(int param_1,uint param_2);
undefined4 IsLeapYear(uint param_1);
void Linkable::Linkable(undefined4 *param_1);
void Linkable::~Linkable(int **param_1,uint param_2);
void Linkable::Add(int param_1,int param_2);
void Linkable::AddAfter(int param_1,int param_2);
int Linkable::Count(int param_1);
void Linkable::DeleteAll(int param_1);
void Linkable::First(int param_1);
void Linkable::Last(int param_1);
void Linkable::Remove(int param_1);
void Linkable::RemoveAllAfter(int param_1);
undefined4 LinkedList::LinkedList(undefined4 param_1);
void LinkedList::~LinkedList(int **param_1,uint param_2);
void LinkedList::Add(uint *param_1,int param_2);
void LinkedList::AddAfter(uint *param_1,int param_2,uint param_3);
int LinkedList::Count(int *param_1);
void LinkedList::DeleteAll(int *param_1);
undefined4 LinkedList::First(undefined4 *param_1);
undefined4 LinkedList::Last(int param_1);
void LinkedList::Remove(int *param_1,int param_2);
void DataList::DataList(undefined4 *param_1);
void DataList::~DataList(int **param_1,uint param_2);
void DataList::Add(int *param_1,undefined4 *param_2);
void DataList::AddAt(int *param_1,undefined4 *param_2,int param_3);
int DataList::At(int *param_1,int param_2);
void DataList::DeleteAll(undefined4 *param_1);
bool DataList::IsEmpty(int *param_1);
void DataList::RemoveAll(undefined4 *param_1);
void DataList::RemoveAt(int *param_1,int param_2);
void DataList::SetDataSize(int *param_1,ushort param_2);
void DataList::SetListIncrement(int *param_1,ushort param_2);
void Listable::~Listable(int **param_1,uint param_2);
void ObjectIterator::GetFirst(int param_1);
undefined4 ObjectIterator::GetNext(int *param_1);
void ObjectIterator::SetTarget(undefined4 *param_1,undefined4 param_2);
undefined4 * ObjectList::ObjectList(undefined4 *param_1);
void ObjectList::~ObjectList(int **param_1,uint param_2);
void ObjectList::DeleteAll(int param_1);
void ObjectList::DeleteAt(int param_1,int param_2);
int ObjectList::Find(int param_1,int param_2);
undefined4 * ObjectList::NewIterator(undefined4 param_1);
undefined4 ObjectList::Remove(int param_1,int param_2);
int * StringDictionary::StringDictionary(int *param_1);
void StringDictionary::~StringDictionary(int **param_1,uint param_2);
void StringDictionary::Write(int *param_1,int *param_2);
void StringDictionary::Add(int *param_1,undefined4 *param_2,undefined4 *param_3);
void StringDictionary::Add(int *param_1,char *param_2,undefined4 param_3,undefined4 param_4);
void StringDictionary::DeleteAll(int *param_1);
void StringDictionary::DeleteAt(int *param_1,int param_2);
undefined4 StringDictionary::GetKeyAt(int *param_1,int param_2);
byte * StringDictionary::GetValue(int *param_1,byte *param_2);
char * StringDictionary::GetValueAt(int *param_1,int param_2);
undefined4 * StringList::StringList(undefined4 *param_1);
void StringList::~StringList(int **param_1,uint param_2);
uint StringList::Add(int *param_1,undefined4 *param_2,uint param_3);
undefined4 StringList::AddAt(int *param_1,int param_2,undefined4 *param_3,uint param_4);
uint StringList::AddIfUnique(int *param_1,undefined4 *param_2,uint param_3);
uint StringList::AddSorted(int *param_1,undefined4 *param_2,uint param_3);
uint * StringList::At(int *param_1,int param_2);
undefined4 * StringList::PeekAt(int *param_1,int param_2);
undefined4 StringList::Change(int *param_1,int param_2,undefined4 *param_3,uint param_4);
void StringList::Delete(int *param_1,char *param_2);
void StringList::DeleteAll(undefined4 *param_1);
void StringList::DeleteAt(int *param_1,int param_2);
int StringList::Find(int *param_1,char *param_2,uint param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 ObjectList::RemoveAt(int param_1,int param_2);
void ObjectList::RemoveAll(int param_1);
void ObjectList::SetListIncrement(int param_1,ushort param_2);
bool ObjectList::IsEmpty(int param_1);
undefined4 ObjectList::At(int param_1,int param_2);
void ObjectList::Add(int param_1,undefined4 param_2);
void ObjectList::AddAt(int param_1,undefined4 param_2,int param_3);
int * Region::Region(int *param_1);
void Region::~Region(int **param_1,uint param_2);
undefined4 Region::operator==(int *param_1,int *param_2);
void Region::Add(int *param_1,int *param_2,char param_3);
void Region::GetSubRegionCount(uint *param_1,int param_2,int param_3);
void Region::GetBounds(int *param_1,undefined4 *param_2);
undefined4 Region::Intersects(int *param_1,int *param_2);
bool Region::IsRectangle(uint *param_1);
int * Region::NewCopy(int *param_1);
void Region::Offset(int *param_1,int param_2,int param_3);
int Region::SubRegionCheck(uint *param_1,int param_2,int **param_3,int param_4,int param_5);
void Region::CalcSubRegionCount(uint *param_1,int param_2,int param_3);
int ** Region::GetSubRegion(uint *param_1,int param_2,int param_3,int param_4);
void Region::Fatten(int *param_1,int param_2,int param_3);
void Region::Sort(int *param_1,uint param_2,char param_3);
void Region::Canonical(int *param_1);
int * Poly::Poly(int *param_1);
void Poly::~Poly(int **param_1,uint param_2);
void Poly::Reset(undefined4 *param_1);
void Poly::Add(int *param_1,undefined4 param_2,undefined4 param_3);
undefined4 Poly::Contains(int *param_1,int param_2,int param_3);
void Poly::GetVertex(int *param_1,undefined4 *param_2,int param_3);
void Poly::GetTriplet(int *param_1,int param_2,undefined4 *param_3,undefined4 *param_4,undefined4 *param_5);
void Poly::DetermineWinding(int *param_1);
bool Poly::ClosestEdge(int *param_1,undefined4 *param_2,int param_3,int param_4,char param_5);
bool IsColinear(int param_1,int param_2,int param_3,int param_4,int param_5,int param_6);
void Poly::GetBounds(int *param_1,int *param_2);
void MemoryStream::~MemoryStream(int **param_1,uint param_2);
void MemoryStream::DeleteToPosition(int param_1);
undefined4 MemoryStream::GetData(int param_1);
int MemoryStream::GetDataAsString(int *param_1);
undefined4 MemoryStream::GetDataLength(int param_1);
bool MemoryStream::MakeAvailable(int *param_1,uint param_2);
void MemoryStream::Reset(int *param_1);
void MemoryStream::SetDataExpected(int *param_1,uint param_2);
void MemoryStream::SetMaxLength(int param_1,undefined4 param_2);
void MemoryStream::SetName(int param_1,char *param_2);
void MemoryStream::SetStatus(int param_1,int param_2);
uint MemoryStream::Write(int *param_1,undefined4 *param_2,uint param_3);
void RC4Stream::RC4Stream(undefined4 *param_1);
void RC4Stream::~RC4Stream(int **param_1,uint param_2);
void RC4Stream::Read(int *param_1,undefined4 *param_2,uint param_3);
int RC4Stream::Write(int param_1,byte *param_2,int param_3);
void Stream::Stream(undefined4 *param_1);
void Stream::~Stream(int **param_1,uint param_2);
void Stream::FastForward(int *param_1);
undefined4 Stream::GetData(int param_1);
undefined4 Stream::GetDataAsString(int param_1);
undefined4 Stream::GetDataExpected(int param_1);
undefined4 Stream::GetDataLength(int param_1);
undefined4 Stream::GetDataType(int param_1);
undefined4 Stream::GetExpires(int param_1);
undefined4 Stream::GetLastModified(int param_1);
undefined4 Stream::GetName(int param_1);
int Stream::GetPending(int *param_1);
uint Stream::GetPercentComplete(int *param_1,int param_2);
undefined4 Stream::GetPriority(int param_1);
undefined4 Stream::GetStatus(int param_1);
undefined Stream::IsDataTrusted(int param_1);
undefined Stream::IsDataExpectedReliable(int param_1);
void Stream::ParseDataType(int *param_1,byte *param_2);
void Stream::Printf(int *param_1,byte *param_2,undefined4 param_3,undefined4 param_4);
uint Stream::Read(int *param_1,undefined4 *param_2,uint param_3);
int Stream::ReadNext(int *param_1,int param_2);
void Stream::Rewind(int param_1);
uint Stream::SetHeader(int *param_1,byte *param_2,byte *param_3);
void Stream::SetDataExpected(int param_1,undefined4 param_2,undefined param_3);
void Stream::SetDataLength(int param_1);
void Stream::SetDataType(int param_1);
void Stream::SetExpires(int param_1);
void Stream::SetIsCompressed(int param_1,undefined param_2);
void Stream::SetIsDataTrusted(int param_1,undefined param_2);
void Stream::SetLastModified(int param_1);
void Stream::SetName(int param_1);
void Stream::SetPriority(int param_1);
void Stream::SetStatus(int param_1);
void Stream::Unread(int param_1,int param_2);
int Stream::VPrintf(int *param_1,byte *param_2,uint param_3);
undefined4 Stream::Write(int param_1);
void Stream::WriteAttribute(int *param_1,char *param_2,undefined4 param_3);
void Stream::WriteAttribute(int *param_1,char *param_2,char *param_3);
void Stream::WriteAttribute(int *param_1,char *param_2,byte *param_3,int param_4);
void Stream::WriteHTMLEscapedString(int *param_1,char *param_2,char param_3);
void Stream::WriteNumeric(int *param_1,undefined4 param_2);
void Stream::WriteString(int *param_1,char *param_2);
void Stream::WriteQuery(int *param_1,byte *param_2,undefined4 param_3);
void Stream::WriteQuery(int *param_1,byte *param_2,byte *param_3,uint param_4,byte param_5,char param_6);
void Stream::WriteQueryString(int *param_1,byte *param_2,undefined4 param_3,char param_4);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
byte * strcpy_advancedest(byte *param_1,byte *param_2,byte param_3);
void URLParser::URLParser(undefined4 *param_1);
void URLParser::~URLParser(int **param_1,uint param_2);
void URLParser::NewURL(int *param_1,undefined4 *param_2);
int URLParser::ResolvePartialURL(int *param_1,undefined4 *param_2);
void URLParser::SetURL(byte **param_1,int *param_2);
void URLParser::SetURL(byte **param_1,undefined4 *param_2);
bool EqualString(byte *param_1,byte *param_2);
char * SkipCharacters(char *param_1,char *param_2);
char * FindCharacter(char *param_1,char param_2);
undefined4 HasHeaders::SetHeader(void);
undefined HasHeaders::SetHeaderString(int *param_1,char *param_2);
void HasBounds::GetBounds(undefined4 *param_1,undefined4 *param_2);
void HasBounds::SetBounds(undefined4 *param_1,undefined4 *param_2);
void HasBounds::SetBounds(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
int ** CatStringTo(int **param_1,char *param_2);
undefined4 CompareStringN(byte *param_1,byte *param_2,int param_3);
uint * CopyString(char *param_1);
uint * CopyStringN(char *param_1,uint param_2);
void CopyStringTo(int **param_1,char *param_2);
char * DeletePrefix(char *param_1,uint param_2);
bool EndsWithSuffix(char *param_1,byte *param_2);
int EqualStringInternational(byte *param_1,byte *param_2,int param_3,int param_4,char param_5,byte param_6,byte param_7);
bool EqualStringN(byte *param_1,byte *param_2,int param_3);
byte * FindStringInternational(byte *param_1,byte *param_2,char param_3);
byte * FindString(byte *param_1,char *param_2,char param_3);
uint GetNextLine(char *param_1);
int ** NewLocalURL(int *param_1,char *param_2,char *param_3);
uint * NewTitleFromURL(char *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int ** NewTruncatedStringWithEllipsis(int param_1,byte *param_2,uint param_3,char param_4,int param_5);
uint ParseAddress(byte *param_1);
byte * SkipString(byte *param_1,byte *param_2);
uint StringToBoolean(byte *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 Now(void);
void IdleCritical(void);
void DelayFor(int param_1,char param_2);
void QuickSort(undefined4 *param_1,uint param_2,uint param_3,undefined *param_4,undefined4 param_5);
uint * NewBase64String(byte *param_1);
uint * NewBase64StringFromBuf(byte *param_1,int param_2);
uint * NewFromBase64(byte *param_1,int *param_2);
undefined4 InitCrc32(void);
uint UpdateCrc32(uint param_1,char *param_2,int param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
undefined4 CanTruncate(int param_1);
uint ConvertLong(uint param_1);
uint LongAt(byte *param_1);
undefined4 GuessDataTypeFromFileName(undefined4 *param_1,uint param_2);
uint CompressionZipStream::UnzipMemory(int *param_1,undefined4 *param_2,int param_3,undefined4 *param_4,int param_5,int param_6);
void CompressionZipStream::CompressionZipStream(undefined4 *param_1);
void CompressionZipStream::~CompressionZipStream(int **param_1,uint param_2);
undefined4 CompressionZipStream::Write(int *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void InitGFX(void);
void InitDisplayListHandler(void);
void TermDisplayListHandler(void);
bool DisplayListAvailable(void);
void OpenDisplayList(void);
void SetDisplayList(int *param_1,int param_2,uint param_3);
void SetDisplayListSync(int *param_1,int param_2,uint param_3);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void InitGFXHardware(void);
undefined4 VBLHandler(void);
void InstallVBLHandler(void);
void RemoveVBLHandler(void);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void BitMapToTexture(undefined4 *param_1,undefined4 *param_2);
uint ** ImageToTexture(undefined4 *param_1,undefined2 param_2);
void GenMaskedRects(int **param_1,int *param_2,int *param_3,int *param_4);
void GenRect(int **param_1,undefined4 *param_2,int *param_3);
void CopyImage(undefined4 *param_1,int *param_2,int param_3,int param_4,byte param_5,int *param_6,int *param_7);
void CopyImage(undefined4 *param_1,int *param_2,int *param_3,int *param_4,byte param_5,int *param_6,int *param_7);
void CopyImage(undefined4 *param_1,int *param_2,undefined4 param_3,int **param_4,byte param_5);
void InitXFormCel(int *param_1,undefined4 *param_2,int **param_3,undefined param_4);
void SplitSide(int *param_1,int *param_2,int *param_3,int *param_4);
void GenerateXFormCel(int **param_1,int *param_2,int *param_3,int *param_4,int *param_5);
void GenerateCel(int **param_1,int *param_2,int *param_3,int param_4,int param_5);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void TVViewCommand(int param_1);
void TVChannelUpCommand(void);
void TVChannelDownCommand(void);
void TVDigitCommand(int param_1);
void TVEnterCommand(void);
void GFXVideoAt(undefined4 *param_1,undefined4 *param_2,undefined4 *param_3);
void InitGFXTelevision(void);
void BuildVideoBitMaps(void);
void TVTask(void);
void DisplayHandler(int **param_1);
void SetChannel(int **param_1);
void ViewCommand(int **param_1,int param_2);
void VideoAtCommand(int **param_1,undefined4 *param_2);
void BuildDigitBitMaps(void);
void BuildSingleDigit(byte **param_1,uint **param_2,uint param_3);
void DrawDigits(int **param_1,undefined4 param_2,undefined4 param_3,int *param_4);
void ScrollDigitsIn(int **param_1);
void ScrollDigitsOut(int **param_1,int param_2);
void SwapMainAndAux(int param_1);
void FilterDown(int *param_1,int *param_2,int *param_3);
void RefreshDisplay(int **param_1);
void ZoomInPIP(int **param_1);
void ZoomUpPIP(int **param_1);
void CrossFadeDisplay(int **param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void SetMatrixIdentity(undefined4 *param_1);
void SetMatrixRotate(int *param_1,uint param_2);
void SetMatrixScale(undefined4 *param_1,undefined4 param_2,undefined4 param_3);
void SetMatrixOffset(undefined4 *param_1,undefined4 param_2,undefined4 param_3);
void MultiplyMatrix(int *param_1,int *param_2);
uint RGBtoSoloYUV(uint param_1,int param_2);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
uint InitDisk(void);
uint * ReadDisk(int param_1,uint param_2,int param_3,uint param_4);
uint * WriteDisk(int param_1,uint param_2,int param_3,uint param_4);
uint * RWDiskSpecial(char param_1,uint param_2,uint param_3,int param_4,uint param_5);
void ReadDiskSpecial(uint param_1,uint param_2,int param_3,uint param_4);
void WriteDiskSpecial(uint param_1,uint param_2,int param_3,uint param_4);
bool DiskIsPresent(void);
bool ErrStatOK(uint param_1);
void IDEDriver::IDEDriver(undefined *param_1);
undefined2 extractShort(int param_1,int param_2);
undefined4 * IDEDriver::InitDevice(int param_1,char param_2);
bool IDEDriver::IsInitialized(int param_1);
undefined4 * IDEDriver::OpenDriver(int param_1);
void IDEDriver::SelectDisk(int param_1,char param_2);
undefined4 IDEDriver::DeselectDisk(int param_1);
int IDEDriver::CurSelectedDisk(int param_1);
void ZeroIDECmd(undefined *param_1);
uint IDEDriver::Identify(int param_1,undefined4 param_2,uint *param_3);
void IDEDriver::SetFeature(int param_1,undefined param_2,undefined param_3,uint *param_4);
undefined4 IDEDriver::GetPowerMode(int param_1);
undefined4 IDEDriver::SetPowerMode(int param_1,int param_2,int param_3);
uint IDEDriver::RWBlocksSync(int param_1,char param_2,int param_3,uint param_4,int param_5,uint *param_6);
void IDEDriver::RWSpecialBlocksSync(int param_1,char param_2,int param_3,uint param_4,int param_5,uint *param_6);
void IDEDriver::RawIDECommand(int param_1);
void IDEDriver::WaitIDEStatus(int param_1,undefined param_2);
uint IDEDriver::PolledIDECommand(int param_1,undefined4 param_2,uint *param_3,int param_4);
undefined4 AFileIsOpen(void);
uint * t_fopen(char *param_1,char *param_2);
undefined4 t_fclose(undefined4 *param_1);
int t_fread(undefined4 *param_1,int param_2,int param_3,int param_4);
int t_fwrite(undefined4 *param_1,int param_2,int param_3,int param_4);
void SoloIDEIntf::SoloIDEIntf(undefined4 *param_1);
undefined4 SoloIDEIntf::InitDevice(int param_1);
uint SoloIDEIntf::WaitIDEStatus(undefined4 param_1,uint param_2,uint *param_3);
undefined4 SoloIDEIntf::ProbeForDisks(void);
uint ParIDEDiskHWIntf::InitDevice(int param_1);
undefined4 ParIDEDiskHWIntf::SelectDisk(int param_1,byte param_2);
undefined4 ParIDEDiskHWIntf::DeselectDisk(int param_1);
void ParIDEDiskHWIntf::WriteCPP(int param_1,undefined param_2);
undefined ParIDEDiskHWIntf::ReadEPATReg(int param_1,byte param_2);
void ParIDEDiskHWIntf::WriteEPATReg(int param_1,byte param_2,undefined param_3);
bool ParIDEDiskHWIntf::SelectParDisk(int param_1,byte param_2);
void ParIDEDiskHWIntf::DeselectParDisk(int param_1);
undefined4 ParIDEDiskHWIntf::ProbeForParDisks(int param_1);
void ParIDEDiskHWIntf::ReadDataBlock(int param_1,uint param_2,undefined *param_3);
void ParIDEDiskHWIntf::WriteDataBlock(int param_1,uint param_2,undefined *param_3);
void ParIDEDiskHWIntf::RawIDECommand(int param_1,undefined *param_2);
uint ParIDEDiskHWIntf::WaitIDEStatus(int param_1,byte param_2,uint *param_3);
undefined ParIDEDiskHWIntf::ReadStatus(int param_1);
undefined ParIDEDiskHWIntf::ReadAlternateStatus(int param_1);
undefined ParIDEDiskHWIntf::ReadSectorCount(int param_1);
undefined4 GetVidDecoderIntf(void);
void InitVidDecoderIntf(void);
void BT827VideoDecoderHW::WriteReg(undefined4 param_1,uint param_2,uint param_3);
uint BT827VideoDecoderHW::ReadReg(undefined4 param_1,uint param_2);
void BT827VideoDecoderHW::Init(int *param_1);
void BT827VideoDecoderHW::SelectInput(int *param_1,int param_2);
void BT827VideoDecoderHW::SetVBIDecodeEnables(int param_1,char param_2,char param_3);
uint BT827VideoDecoderHW::GetNextVBIChar(int param_1,byte *param_2);
uint BT827VideoDecoderHW::VideoPresent(int *param_1);
undefined4 GetVideoInDMAIntf(void);
void InitVideoInDMAIntf(void);
void VideoInDMAIntf::Init(undefined4 *param_1);
void VideoInDMAIntf::SetCurFrameBuffer(int param_1,undefined4 param_2);
void VideoInDMAIntf::StartDMA(int *param_1);
void VideoInDMAIntf::StopDMA(int param_1,char param_2);
void VideoInDMAIntf::SuspendDMA(int param_1);
void VideoInDMAIntf::ResumeDMA(int *param_1);
undefined4 VideoInDMAIntf::DivDMAIntHandler(int *param_1);
void VideoInDMAIntf::ConfigureSingleFieldDMA(int param_1);
void VideoInDMAIntf::ConfigureTwoFieldDMA(int param_1);
undefined4 * VideoInDMAIntf::DequeueFieldRequest(int param_1);
void VideoInDMAIntf::EnqueueFieldRequest(int param_1,undefined4 *param_2);
void VideoInDMAIntf::ConfigureNextFieldDMA(undefined4 param_1,int param_2);
void VideoInDMAIntf::Start(int param_1);
void VideoInDMAIntf::Stop(int param_1,char param_2);
void VideoInDMAIntf::FixFrameDMA(int param_1);
undefined VideoInDMAIntf::DMAIsOn(int param_1);
undefined4 GetAudDecoderIntf(void);
void InitAudDecoderIntf(void);
void AudioDecoderHWIntf::Init(int param_1);
void AudioDecoderHWIntf::SetStereo(int param_1,undefined param_2);
void AudioDecoderHWIntf::SetSAP(int param_1,undefined param_2);
void AudioDecoderHWIntf::SetMute(int param_1,undefined param_2);
void AudioDecoderHWIntf::SetLevel(int param_1,byte param_2);
void AudioDecoderHWIntf::GetStatus(int param_1);
uint AudioDecoderHWIntf::ReadStatusReg(void);
bool AudioDecoderHWIntf::WriteConfigReg(undefined4 param_1,uint param_2);
bool AudioDecoderHWIntf::WriteReg(undefined4 param_1,uint param_2,uint param_3);
void AudioDecoderHWIntf::Reconfigure(int param_1);
undefined4 GetTVTunerHWIntf(void);
void InitTVTunerHWIntf(void);
void TVTunerHWIntf::Init(int *param_1);
int TVTunerHWIntf::GetNextChannel(int *param_1,int param_2);
undefined4 TVTunerHWIntf::GetMaxChannel(int *param_1);
void TVTunerHWIntf::SetChannel(int *param_1,uint param_2);
void TVTunerHWIntf::SetRFBypass(undefined4 param_1,char param_2);
bool TVTunerHWIntf::GetRFBypass(void);
void TVTunerHWIntf::SetFrequency(int param_1,undefined4 param_2,int param_3);
uint TVTunerHWIntf::GetAFTValue(void);
bool TVTunerHWIntf::CurrentlyInBand(int param_1,int param_2);
int TVTunerHWIntf::ChannelFrequency(int param_1,int param_2,int param_3);
void TVTunerHWIntf::ChangeChannel(int *param_1,uint param_2);
void TVTunerHWIntf::Tune(int param_1);
void TVTunerHWIntf::MSWait(undefined4 param_1,uint param_2);
undefined4 GetBoxTuner(void);
void InitTuner(void);
void BoxTuner::BoxTuner(undefined4 *param_1);
void BoxTuner::~BoxTuner(int **param_1,uint param_2);
void BoxTuner::Init(int *param_1);
void BoxTuner::SaveState(undefined4 *param_1);
void BoxTuner::RestoreState(int *param_1);
void BoxTuner::Freeze(int param_1);
undefined BoxTuner::VideoPresent(int param_1);
void BoxTuner::SetChannel(undefined4 *param_1,undefined4 param_2);
void BoxTuner::GetNextChannel(int param_1,int param_2);
void BoxTuner::GetMaxChannel(int param_1);
void BoxTuner::SetMute(int param_1,undefined param_2);
void BoxTuner::Setup(int param_1,undefined4 *param_2);
void BoxTuner::Shutoff(int param_1);
void BoxTuner::Turnon(int *param_1);
void BoxTuner::UnFreeze(int param_1);
void BoxTuner::SetAFTEnabled(int param_1,undefined param_2);
void BoxTuner::SyncWithAFT(int param_1);
void BoxTuner::SetVolume(int param_1,byte param_2);
void BoxTuner::SetVideoSource(int param_1,int param_2);
void BoxTuner::AFTSuspend(int param_1,undefined param_2);
void BoxTuner::AFTTask(uint *param_1);
int BoxTuner::BroadcastConnected(int param_1);
void BoxTuner::SetSuggestedBand(int param_1);
void BoxTuner::AsyncSetChannel(uint *param_1);
void BoxTuner::MSWait(undefined4 param_1,uint param_2);
void CurveSet(undefined4 *param_1,undefined4 *param_2,undefined4 *param_3,undefined4 *param_4);
void CurveSetLine(int *param_1,int *param_2,undefined4 *param_3);
void CurveBounds(int *param_1,int *param_2);
int CurveFlatness(int *param_1);
bool CurveTestLine(int *param_1,int param_2);
void CurveDivide(int *param_1,undefined4 *param_2,undefined4 *param_3);
void CurveDivide(int *param_1,int param_2,undefined4 *param_3,undefined4 *param_4);
void CurveCalcPoint(int *param_1,int param_2,int *param_3);
void CurveReverse(undefined4 *param_1,undefined4 *param_2);
uint CurveXRaySect(int *param_1,int *param_2,ushort param_3);
undefined4 CurveCoincident(int *param_1,int *param_2,int param_3);
bool CurveIsExtreme(int *param_1);
void CurveAdjust(int *param_1,int *param_2,int *param_3,undefined4 *param_4);
uint __FPSin(uint param_1,int param_2,int param_3);
uint _FPSin(uint param_1,int param_2,int param_3);
uint _FPCos(uint param_1,int param_2,int param_3);
int __FPATan(int param_1,int param_2,int param_3);
int _FPATan(int param_1,uint param_2,int param_3);
int _FPATan2(int param_1,int param_2,uint param_3,int param_4);
int * ChunkAlloc::ChunkAlloc(int *param_1,int param_2,int param_3);
void ChunkAlloc::~ChunkAlloc(int **param_1,uint param_2);
uint * ChunkAlloc::CreateChunk(int *param_1);
void ChunkAlloc::FreeChunk(int param_1,int **param_2);
undefined4 * ChunkAlloc::Alloc(int *param_1);
void ChunkAlloc::Free(int *param_1,int **param_2);
void ChunkAlloc::FreeEmpties(int param_1);
void PointScale(int *param_1,int param_2,uint *param_3);
void PointAverage(int *param_1,int *param_2,int param_3,int *param_4);
undefined4 PointEqual(int *param_1,int *param_2,int param_3);
int PointFastLength(int *param_1);
uint PointLength(int *param_1);
void PointDistance(int *param_1,int *param_2);
int PointFastDistance(int *param_1,int *param_2);
void PointAngle(int *param_1,int *param_2);
void PointPolar(int param_1,uint param_2,int *param_3,uint *param_4);
void PointPerpNearestLine(int *param_1,int *param_2,int *param_3,int *param_4);
void PointNearestLine(int *param_1,int *param_2,int *param_3,int *param_4);
void PointNormalize(uint *param_1,int param_2);
void RectSet(int param_1,int param_2,int param_3,int param_4,int *param_5);
void RectSetPoint(undefined4 *param_1,undefined4 *param_2);
void RectSetEmpty(undefined4 *param_1);
void RectInset(int param_1,int *param_2);
void RectValidate(int *param_1);
void RectGetPoint(int *param_1,undefined4 param_2,int *param_3);
void RectUnion(int *param_1,int *param_2,int *param_3);
void RectUnionPoint(int *param_1,int *param_2);
void RectIntersect(int *param_1,int *param_2,int *param_3);
bool RectTestIntersect(int *param_1,int *param_2);
bool RectPointIn(int *param_1,int *param_2);
void RectSize(int *param_1);
void MatrixTransformPoint(int *param_1,int *param_2,int *param_3);
void MatrixDeltaTransformPoint(int *param_1,int *param_2,undefined4 *param_3);
void MatrixTransformRect(int *param_1,int *param_2,undefined4 *param_3);
uint MatrixTransformThickness(int *param_1,int param_2);
void MatrixConcat(int *param_1,int *param_2,undefined4 *param_3);
void MatrixInvert(int *param_1,int *param_2);
void MatrixIdentity(undefined4 *param_1);
void MatrixScale(undefined4 param_1,undefined4 param_2,undefined4 *param_3);
void MatrixMap(int *param_1,int *param_2,int *param_3);
void MatrixMapAspect(int *param_1,int *param_2,int *param_3);
void PlayerWnd::FlushMem(void);
void PlayerWnd::PlayerWnd(undefined4 *param_1);
void PlayerWnd::~PlayerWnd(int **param_1,uint param_2);
void PlayerWnd::SetWindow(int param_1,undefined4 *param_2,undefined4 *param_3);
void PlayerWnd::ClientRect(int param_1,undefined4 *param_2);
void PlayerWnd::SetCamera(int param_1,int param_2);
void PlayerWnd::GotoFrame(int param_1,int param_2);
undefined4 PlayerWnd::CurrentFrame(int param_1);
void PlayerWnd::CheckUpdate(void);
void PlayerWnd::GetDirtyRectangle(int param_1,undefined4 *param_2);
undefined4 PlayerWnd::HasNonNavigableButtons(int param_1);
void PlayerWnd::UpdateScreen(int param_1,char param_2);
undefined4 PlayerWnd::UpdateBuffer(int param_1,char param_2);
void PlayerWnd::DoActions(int param_1);
undefined4 PlayerWnd::DoPlay(int param_1,char param_2,char param_3);
void PlayerWnd::Play(int param_1);
void PlayerWnd::StopPlay(int param_1);
uint RGBPixelToYUV(uint param_1);
uint RGBPixelToYUYV(uint param_1);
uint PackTwoPixYUYV(int *param_1,int *param_2);
void BuildRenderTables(void);
void RColor::SetUp(undefined4 *param_1,undefined4 param_2);
void RColor::FreeCache(int *param_1);
void ExpandPat(int param_1,uint param_2,uint param_3,uint param_4,int param_5,int param_6,uint *param_7);
undefined4 RColor::BuildCache(int *param_1);
void RActiveEdge::SetUp(int param_1,uint *param_2,int param_3);
void RActiveEdge::Step(int param_1,int param_2);
void RRun::CalcColor(int param_1,int param_2,int param_3,int *param_4);
void RPixel::Add(int *param_1,int *param_2,int param_3,int param_4,int param_5);
void CRaster::CRaster(undefined *param_1);
void CRaster::~CRaster(int **param_1,uint param_2);
void CRaster::FreeEmpties(int param_1);
void CRaster::Attach(char *param_1,int param_2,int *param_3,int *param_4,int *param_5,char param_6);
undefined4 CRaster::BeginPaint(int param_1);
undefined4 CRaster::AddEdge(int param_1,uint *param_2);
undefined4 CRaster::AddActive(char *param_1);
void CRaster::SortActive(int param_1);
undefined4 CRaster::PaintAASlab(int param_1,int *param_2,int *param_3);
void CRaster::UpdateColor(char *param_1,int *param_2);
void CRaster::ShowColor(char *param_1,int param_2,int *param_3);
void DoEdgeEdgeRule(char *param_1,int param_2);
void DoEdgeEvenOddRule(char *param_1,int param_2);
void DoEdgeWindingRule(char *param_1,int param_2);
void DoEdgeClipperRule(char *param_1,int param_2);
undefined4 CRaster::PaintActive(char *param_1);
void CRaster::PaintAARuns(int param_1);
undefined4 CRaster::PaintBits(char *param_1,int param_2);
void CRaster::EndPaint(int param_1,int param_2);
void CRaster::SetYCoord(int param_1,int param_2);
void CRaster::DrawRGBSlab(int param_1,uint param_2,int param_3,int *param_4);
void DrawBitmapSlab(int param_1,int param_2,int param_3,int param_4);
void DrawGradientSlab(int param_1,int param_2,int param_3,int param_4);
void DrawDitherSlab(int param_1,int param_2,int param_3,int param_4);
void CRaster::DrawPixels(int param_1,int param_2,int *param_3,int param_4,int param_5);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
uint SBitmapCalcRowbytes(int param_1,int param_2);
void SBitmapCore::GetRGBPixel(int *param_1,uint param_2,int param_3,uint *param_4);
uint GetWideYUYVPix(byte *param_1,int param_2);
void SBitmapCore::GetSSRGBPixel(int *param_1,uint param_2,uint param_3,uint *param_4);
void SBitmapCore::PIInit(undefined4 *param_1);
void SBitmapCore::LockBits(int *param_1);
void SBitmapCore::UnlockBits(undefined4 *param_1);
bool SBitmapCore::PICreate(undefined4 *param_1,undefined2 param_2,int param_3,int param_4);
void SBitmapCore::PIFree(undefined4 *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void DisplayList::DisplayList(undefined4 *param_1);
void DisplayList::~DisplayList(int **param_1,uint param_2);
void DisplayList::Reset(int param_1);
void DisplayList::FreeAll(int param_1);
void DisplayList::FreeCache(int param_1,char param_2);
void DisplayList::SetBits(int param_1,undefined4 param_2);
void DisplayList::SetCamera(int *param_1,int *param_2,undefined4 *param_3,char param_4,uint param_5);
void DisplayList::Invalidate(int param_1,undefined4 *param_2);
void DisplayList::ModifyCamera(int *param_1);
void DisplayList::SetBackgroundColor(int param_1,int param_2,int param_3);
void DisplayList::CalcBitsDirty(int param_1,int *param_2);
undefined4 DisplayList::UpdateTile(int param_1,int *param_2,byte param_3);
void DisplayList::UpdateQuadSub(int param_1,int *param_2,byte param_3);
void DisplayList::Update(int param_1,int *param_2,int *param_3);
void DisplayList::PlaceObject(int *param_1,int param_2,int param_3,undefined4 *param_4);
int * DisplayList::FindObject(int param_1,int param_2,int **param_3);
void DisplayList::RemoveObject(int param_1,int param_2);
void DisplayList::UpdateButton(int param_1,int param_2,uint param_3);
bool DisplayList::SetButtonState(int param_1,int param_2,uint param_3);
int DisplayList::HitButton(int *param_1,undefined4 *param_2);
undefined4 DisplayList::HitOneButton(int *param_1,int param_2,undefined4 *param_3);
undefined4 DisplayList::GetButtonBounds(int *param_1,int param_2,int *param_3);
undefined4 SCharacterParser::AddCurve(int param_1,int *param_2);
undefined4 CanUsePackedEdge(uint *param_1,int param_2,int param_3);
uint * DisplayList::AllocateEdge(int param_1,uint *param_2,int param_3,int param_4,uint param_5,uint param_6,int param_7);
undefined4 CurvesMergable(int *param_1,int *param_2,int *param_3);
undefined4 SCharacterParser::BuildEdges(char **param_1,char param_2,uint param_3,int *param_4);
void SObject::Free(int param_1);
undefined4 SObject::BuildEdges(int param_1,byte param_2);
undefined SObject::HitTest(int param_1,int *param_2);
int SObject::GetMatrix(int param_1);
int SObject::GetDeviceMatrix(int param_1);
void SObject::SetMatrix(int param_1,undefined4 *param_2);
void SObject::SetDeviceMatrix(int param_1,undefined4 *param_2);
void SParser::GetData(int *param_1,undefined4 *param_2,uint param_3);
void SParser::GetColor(int *param_1,uint *param_2);
void SParser::GetColor(uint *param_1,int *param_2);
void SParser::GetRect(int *param_1,uint *param_2);
void SParser::GetMatrix(int *param_1,uint *param_2);
uint * SParser::GetString(int *param_1);
void SParser::InitBits(int param_1);
uint SParser::GetBits(int *param_1,uint param_2);
uint SParser::GetSBits(int *param_1,uint param_2);
void SShapeParser::SShapeParser(char **param_1,char *param_2,char *param_3,undefined4 *param_4);
void SShapeParser::~SShapeParser(int **param_1,uint param_2);
void SShapeParser::GetStyles(char **param_1);
uint SShapeParser::GetEdge(int *param_1,int *param_2);
char ** ScriptPlayer::ScriptPlayer(char **param_1);
void ScriptPlayer::~ScriptPlayer(int **param_1,uint param_2);
void ScriptPlayer::FreeCharacter(char **param_1,int **param_2);
void ScriptPlayer::FreeCache(char **param_1);
void ScriptPlayer::FreeAll(char **param_1);
void ScriptPlayer::ClearScript(char **param_1);
int * ScriptPlayer::FindCharacter(int param_1,uint param_2);
undefined4 * ScriptPlayer::CreateCharacter(int param_1,uint param_2);
void ScriptPlayer::FreeCharacter(char **param_1,uint param_2);
void ScriptPlayer::DefineCharacter(int *param_1);
void ScriptPlayer::PlaceObject(int *param_1);
void ScriptPlayer::RemoveObject(int *param_1);
void ScriptPlayer::DefineButton(int *param_1);
void ScriptPlayer::DefineJPEGTables(int *param_1);
byte * DecodeJPEG(undefined4 *param_1,int param_2,byte *param_3);
void ScriptPlayer::BuildBits(char **param_1,int param_2);
void ScriptPlayer::DefineBits(int *param_1);
void ScriptPlayer::DefineFont(int *param_1);
void ScriptPlayer::DefineFontInfo(int *param_1);
void ScriptPlayer::DefineText(int *param_1);
undefined4 ScriptPlayer::ParseHeader(int *param_1);
void ScriptPlayer::SetData(char **param_1,char *param_2,int param_3);
char * ScriptPlayer::DoTag(char **param_1);
char * ScriptPlayer::DrawFrame(char **param_1,int param_2);
char * ScriptPlayer::GetScriptPtr(char **param_1);
int ScriptPlayer::HasDynamicButtons(int *param_1);
void HasVirtualDestructor::~HasVirtualDestructor(int **param_1,uint param_2);
void SStroker::SStroker(undefined *param_1,undefined4 param_2,undefined4 param_3);
void MakeVertLine(undefined4 *param_1,undefined4 param_2);
undefined4 SStroker::AddCurve(int param_1,int *param_2);
void SStroker::AddEdge(int param_1,int *param_2,int *param_3);
undefined4 SStroker::StrokeJoin(int param_1,int *param_2,int *param_3,int *param_4);
undefined4 SStroker::StrokeThickCurve(int param_1,int *param_2);
int SStroker::StrokeThinLine(int param_1,int *param_2);
int SStroker::StrokeThinCurve(int param_1,int *param_2);
void SStroker::BeginStroke(char *param_1,uint param_2,undefined4 param_3);
undefined4 SStroker::AddStrokeCurve(char *param_1,uint *param_2);
undefined4 SStroker::EndStroke(int param_1);
undefined4 _TSW_init_crypt_ctx(uint *param_1);
int TSW_crypt_init(uint *param_1);
undefined4 TSW_enable_protocol(void);
undefined4 TSW_crypt_term(uint *param_1);
int tsw_create_internal_ctx(undefined4 *param_1);
undefined4 tsw_destroy_internal_ctx(int **param_1);
uint tsw_copy_internal_ctx(undefined4 *param_1);
void Copy(undefined4 *param_1,undefined4 *param_2,uint param_3);
undefined4 build_default_crypt_ctx(undefined4 *param_1);
uint GenerateRandomBytes(undefined *param_1,int param_2,int param_3);
undefined4 tsw_RecordSID(undefined4 *param_1,undefined4 *param_2,uint *param_3);
int tsw_RecoverSIDState(undefined4 *param_1,undefined4 param_2,undefined4 param_3);
undefined4 ProduceKeys(int param_1);
undefined4 SendClearMsg(int *param_1,undefined4 *param_2,uint param_3);
void SendError(int *param_1,undefined4 param_2,int param_3);
uint tsw_SendClientHello(int *param_1);
undefined4 SendClientMasterKey(int *param_1);
void SendClientCertificate(void);
uint SendClientFinished(int *param_1);
undefined4 PickCipher(int param_1,char *param_2,int param_3);
undefined4 CheckForSSLPlusCipher(int param_1);
undefined * GenerateMasterKey(int param_1);
void tsw_ClientHandshake(int **param_1,int param_2);
void tsw_ServerHandshake(void);
void TSW_SSL_Handshake(int **param_1,int *param_2,undefined4 *param_3,int *param_4);
undefined4 tsw_SSL_SetError(undefined4 param_1);
undefined4 TSW_SSL_BindCryptCtx(int param_1,undefined4 param_2);
void TSW_SSL_AuthHook(int param_1,undefined4 param_2,undefined4 param_3);
void TSW_SSL_ReadHook(int param_1,undefined4 param_2,undefined4 param_3);
int Crypto(undefined4 param_1,int param_2,int param_3,undefined4 param_4,undefined4 param_5);
undefined4 CalcMAC(undefined4 param_1,int param_2,int param_3,undefined4 param_4,undefined4 param_5,uint param_6);
int * TSW_SSL_ReadRecord(int **param_1);
int * TSW_SSL_ReadMessage(int **param_1);
undefined4 free_item(int **param_1);
void TSW_SSL_Destroy(int **param_1);
undefined4 * tsw_ssl_NewHandle(undefined4 param_1,undefined4 param_2,undefined4 param_3);
void TSW_SSL_Create(undefined4 param_1,undefined4 param_2);
int * TSW_SSL_Read(int **param_1,undefined4 *param_2,int *param_3);
uint TSW_SSL_Write(int *param_1,undefined4 *param_2,uint param_3);
uint tsw__SSL_Write(int *param_1,undefined4 *param_2,uint param_3,int param_4);
undefined4 tsw_SSL_ProcessEscape(int param_1);
int * TSW_SSL_WaitForTerminator(int **param_1,uint *param_2);
int * TSW_SSL_Terminate(int **param_1);
undefined4 TSW_SSL_SendTerminator(int *param_1,int param_2);
undefined4 TSW_SSL_IsMoreData(int param_1,undefined4 *param_2);
undefined4 TSW_SSL_IsMoreWriteData(int param_1,undefined4 *param_2);
undefined * ComputeMD5Hash(undefined4 *param_1,uint param_2,undefined *param_3);
void MD5_Init(undefined4 *param_1);
void MD5_Update(int *param_1,undefined4 *param_2,uint param_3);
void MD5_Final(int *param_1,undefined *param_2);
undefined4 RC4_Init(undefined4 *param_1,byte *param_2,short param_3);
void RC4_Update(int *param_1,byte *param_2,uint param_3,byte *param_4);
void RC4_Final(int *param_1);
undefined4 TSW_SSL_HandleToFD(undefined4 *param_1);
undefined4 TSW_ll_append(int *param_1,undefined4 param_2);
undefined4 TSW_ll_insert(int *param_1,undefined4 param_2);
int * tsw_ll_pop(int **param_1);
undefined4 TSW_ll_free(int **param_1,undefined *param_2);
undefined4 TSW_ll_first(undefined4 param_1);
undefined4 TSW_ll_next(int param_1);
undefined4 TSW_ll_data(undefined4 *param_1);
void CopyBuffer(undefined4 *param_1,undefined4 *param_2,uint param_3);
void UnflattenSession(undefined2 *param_1,undefined2 *param_2);
undefined4 FlattenSession(int param_1,undefined4 *param_2,uint param_3,undefined4 *param_4,int *param_5);
undefined4 tsw_ssl_GetSIDInfo(int param_1,undefined4 param_2,undefined4 param_3,undefined4 *param_4,undefined4 param_5,undefined4 param_6);
undefined4 tsw_ssl_SetSIDInfo(int param_1,undefined4 *param_2,uint *param_3,undefined4 *param_4,undefined4 param_5,undefined4 param_6);
undefined4 find_map_entry(int param_1,int **param_2);
undefined4 tsw_SymmetricGetLengths(int param_1,uint *param_2,uint *param_3,int *param_4);
undefined4 tsw_SymmetricGetBlock(int param_1,uint *param_2);
undefined4 tsw_SymmetricGetMacInfo(int param_1,int *param_2,undefined4 *param_3);
uint tsw_Symmetric_CreateContext(undefined4 param_1,undefined4 param_2,int param_3,int param_4,undefined4 *param_5);
int tsw_SymmetricProcess(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
undefined4 tsw_MD_CreateContext(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void tsw_MD_Update(undefined4 *param_1,undefined4 param_2,undefined4 param_3);
void tsw_MD_Final(undefined4 *param_1,undefined4 param_2,undefined4 *param_3);
int tsw_create_symcrypto_obj(undefined4 *param_1,undefined4 param_2,undefined4 *param_3,undefined4 param_4,undefined4 param_5);
int tsw_destroy_symcrypto_obj(undefined4 *param_1);
int tsw_create_digcrypto_obj(int param_1,undefined4 *param_2,undefined4 param_3);
int tsw_destroy_digcrypto_obj(undefined4 *param_1);
undefined4 tsw_ssl3_alert_trap(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int * tsw_ssl3_handshake(int **param_1,int *param_2,undefined4 *param_3,int *param_4);
int * tsw_ssl3_handshake_more(int **param_1,int param_2,undefined4 param_3,int *param_4);
undefined4 *tsw_ssl3_client_start_handshake(int **param_1,int param_2,undefined4 *param_3,undefined4 param_4);
uint tsw_ssl3_client_handshake_turn(int *param_1,char *param_2,int *param_3,undefined4 param_4);
undefined4 * tsw_ssl3_send_client_hello(int *param_1);
int tsw_ssl3_client_read_server_hello(int *param_1,undefined *param_2,int param_3,undefined4 param_4);
uint tsw_ssl3_send_key_exchange(int *param_1);
uint tsw_ssl3_read_server_key_exchange(int *param_1,char *param_2,int param_3);
undefined4 free_item(int **param_1);
int tsw_ssl3_read_certificate(int *param_1,undefined *param_2,int param_3,int **param_4);
uint tsw_ssl3_send_finished(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint tsw_ssl3_receive_finished(int *param_1,undefined *param_2,int param_3,undefined4 param_4);
uint tsw_ssl3_get_handshake_hashes(int param_1,uint param_2,int param_3,undefined4 param_4);
uint tsw_ssl3_make_combined_hash(int param_1,undefined4 param_2,undefined4 param_3,int param_4);
uint tsw_ssl3_set_handshake_header(undefined *param_1,undefined param_2,uint param_3);
undefined4 tsw_ssl3_read_handshake_header(undefined *param_1,undefined *param_2,int *param_3);
int tsw_ssl3_compute_keys(int param_1,int param_2,int *param_3,undefined4 param_4);
uint tsw_ssl3_send_change_cipher_specs(int *param_1);
uint tsw_ssl3_receive_change_cipher_specs(int *param_1,char *param_2,int param_3);
int tsw_ssl3_send_hash_hp_data(int *param_1,undefined param_2,undefined4 *param_3,uint param_4);
undefined4 tsw_ssl3_zero_MsgHash(int param_1,undefined4 param_2,undefined4 *param_3,undefined4 param_4);
undefined4 tsw_ssl3_stop_MsgHash(int param_1,int param_2);
undefined4 tsw_ssl3_UpdateMsgHash(int param_1,undefined4 param_2,undefined4 param_3);
int tsw_ssl3_nuke_sid(undefined4 *param_1);
int tsw_PublicKeyFromIntegers(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,int **param_6);
undefined4 tsw_PKCS1_KeySize(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int tsw_PKCS1_PublicEncrypt(int *param_1,undefined4 param_2,undefined4 *param_3,undefined4 *param_4,uint param_5,undefined4 param_6,int param_7);
uint tsw_Raw_PKCS1_Verify(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,int param_5);
void tsw_CheckCert(int param_1,undefined4 param_2,byte *param_3,undefined4 param_4,int **param_5);
undefined4 tsw_X509_CheckCert(int param_1,byte *param_2,undefined4 param_3,int **param_4,int param_5);
uint tsw_CheckCertList(int param_1,undefined4 param_2,int **param_3);
uint tsw_verify_x509_cert(undefined4 param_1,byte *param_2,undefined4 param_3,int *param_4,int **param_5,int **param_6);
void tsw_destroy_certinfo(int **param_1);
int tsw_construct_certinfo(undefined4 param_1,int *param_2,int param_3,int *param_4,int *param_5,int *param_6,int *param_7,int *param_8,undefined4 *param_9);
undefined4 _destroy_certinfo(int **param_1);
char * SimpleCertStatusString(undefined4 param_1);
undefined * TSW_bin2hex(byte *param_1,int param_2);
uint tsw_create_asymkey(undefined4 param_1,int *param_2,undefined4 *param_3);
undefined4 tsw_destroy_asymkey(undefined4 *param_1);
uint tsw_set_asymkey_data(int *param_1,int *param_2,undefined4 param_3,undefined4 param_4);
uint tsw_get_asymkey_data(int *param_1,int *param_2,undefined4 param_3,undefined4 param_4);
void tsw_asym_sign_vrfy_data(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
int tsw_asym_enc_dec_data(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
void tsw_asym_get_algorithm(undefined4 param_1,undefined4 param_2,int *param_3,int param_4);
void tsw_asym_set_algorithm(undefined4 param_1,int *param_2,uint **param_3,int param_4);
void tsw_asym_delete_algorithm(undefined4 param_1,undefined4 param_2,int param_3);
void tsw_asym_set_data(undefined4 param_1,undefined4 param_2,uint **param_3,int param_4);
void tsw_asym_get_data(undefined4 param_1,undefined4 param_2,int *param_3,int param_4);
void tsw_asym_copy_data(undefined param_1,undefined param_2,undefined param_3,undefined param_4,int *param_5);
void tsw_asym_delete_data(undefined4 param_1,undefined4 param_2,uint **param_3);
void tsw_S_Zfree(int **param_1,uint param_2);
uint tsw_ssl3_write(int *param_1,undefined param_2,undefined4 *param_3,uint param_4);
int * tsw_ssl3_read(int **param_1,char param_2,undefined4 *param_3,int *param_4,int *param_5);
int * tsw__ssl3_read(int **param_1,char param_2,undefined4 *param_3,int *param_4,int *param_5);
uint tsw_ssl3_process_alert(int *param_1,byte *param_2,int param_3);
void tsw_ssl3_send_terminator(int *param_1,int param_2);
uint tsw_ssl3_send_alert(int *param_1,int param_2,undefined param_3);
undefined4 tsw_ssl3_alert_to_err(undefined4 param_1);
undefined4 tsw_algid_ber_to_alginfo(byte **param_1,undefined4 *param_2,int *param_3);
uint tsw_alginfo_to_algid_ber(int *param_1,int *param_2,int **param_3);
undefined4 tsw_create_algorithm(uint param_1,uint **param_2);
undefined4 tsw_destroy_algorithm(int *param_1);
undefined4 tsw_initialize_algorithm(uint *param_1,uint param_2);
undefined4 tsw_free_algorithm(int param_1);
uint tsw_copy_algorithm(uint **param_1,int *param_2);
uint tsw_dup_algorithm(uint *param_1,int *param_2);
uint tsw_find_algorithm_data(int *param_1,int param_2,int **param_3,undefined4 *param_4);
uint tsw_set_algorithm_data(int *param_1,int param_2,undefined4 param_3,undefined4 param_4);
uint tsw_get_algorithm_data(int *param_1,int param_2,undefined4 param_3,undefined4 param_4);
uint tsw_bsafe_decrypt_create(undefined4 param_1,uint **param_2,int *param_3,undefined4 *param_4);
byte tsw_bsafe_decrypt_update(int param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 *param_6);
byte tsw_bsafe_decrypt_final(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 *param_5);
undefined4 tsw_bsafe_decrypt_destroy(int **param_1);
uint tsw_bsafe_encrypt_create(undefined4 param_1,uint **param_2,int *param_3,undefined4 *param_4);
byte tsw_bsafe_encrypt_update(int param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 *param_6);
byte tsw_bsafe_encrypt_final(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 *param_5);
undefined4 tsw_bsafe_encrypt_destroy(int **param_1);
uint tsw_bsafe_alg_get_info(int *param_1,int *param_2,int *param_3,int *param_4,int *param_5);
uint tsw_bsafe_create_digest(uint **param_1,int *param_2,undefined4 param_3,undefined4 param_4);
byte tsw_bsafe_update_digest(int param_1,undefined4 *param_2);
undefined4 tsw_bsafe_final_digest(int param_1,undefined4 *param_2);
undefined4 tsw_bsafe_destroy_digest(int **param_1);
undefined4 set_rec_header(undefined *param_1,undefined param_2,undefined param_3,undefined param_4,undefined4 param_5);
undefined4 tsw_ssl3_ParseRecordHeader(undefined *param_1,undefined *param_2,uint *param_3,uint *param_4,uint *param_5);
int tsw_ssl3_calcmac(int param_1,int param_2,undefined param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
int tsw_ssl3_MakeRecord(int param_1,undefined param_2,undefined4 *param_3,uint param_4,undefined4 param_5,uint param_6,int *param_7);
int tsw_ssl3_ReadRecord(int *param_1,undefined param_2,undefined4 *param_3,uint param_4,undefined4 *param_5,uint param_6,uint *param_7);
uint tsw_bsafe_reify_pub_key(int param_1,int *param_2);
uint tsw_bsafe_verify(int param_1,int *param_2,byte **param_3,undefined4 *param_4,undefined4 *param_5);
int tsw_bsafe_keyexch_enc(int param_1,undefined4 *param_2,int *param_3,uint param_4,undefined4 param_5,undefined4 *param_6);
uint tsw_bsafe_reify_rsa_pub_key(int param_1,undefined4 *param_2,int param_3);
undefined4 tsw_asym_set_rsa_pub(void);
undefined4 tsw_asym_copy_rsa_pub(undefined param_1,undefined param_2,undefined param_3,undefined param_4,int *param_5);
undefined4 tsw_asym_delete_rsa_pub(undefined4 param_1,undefined4 param_2,uint **param_3);
undefined4 tsw_data_copy(int *param_1,int *param_2);
bool tsw_data_compare(byte **param_1,byte **param_2);
undefined4 tsw_data_alloc(int *param_1,undefined4 *param_2,uint param_3);
int tsw_data_alloc_extract(int *param_1,undefined4 *param_2,int *param_3);
undefined4 tsw_data_freeit(uint **param_1);
undefined4 tsw_data_zfree(uint **param_1);
uint tsw_decode_x509_cert(undefined4 param_1,byte **param_2,undefined4 *param_3,int param_4);
uint tsw__decode_x509_cert(undefined4 param_1,byte **param_2,byte **param_3,int param_4);
uint tsw_verify_x509_signed(undefined4 param_1,undefined4 *param_2,int param_3,uint param_4,undefined4 *param_5,undefined4 *param_6);
uint tsw_extend_cert_chain_from_cert(undefined4 param_1,byte **param_2,int *param_3,undefined4 param_4,int *param_5,int **param_6);
uint tsw_get_cert_subject(undefined4 param_1,byte **param_2,int *param_3);
uint tsw_get_cert_issuer(undefined4 param_1,byte **param_2,int *param_3);
undefined4 get_attr_from_oid(byte *param_1,int param_2,int *param_3);
undefined4 free_ava(int *param_1);
undefined4 free_ava_list(int *param_1);
void tsw_free_dn_aslist(int **param_1);
undefined4 dn_new_level(undefined4 param_1,undefined4 *param_2);
undefined4 dn_get_type(int param_1,int param_2);
undefined4 dn_get_val(int param_1,int *param_2);
int tsw_bertolist(byte *param_1,byte *param_2,int *param_3);
uint tsw_typecheck(int *param_1,int param_2);
undefined4 tsw_get_generic_data(int *param_1,undefined4 param_2,int param_3);
uint tsw_set_generic_data(uint **param_1,int param_2,int param_3);
undefined4 tsw_bsafe_create_bsafe_key(int param_1,int *param_2);
void tsw_bsafe_destroy_bsafe_key(int **param_1);
undefined4 * tsw_bsafe_construct_surrender(undefined4 *param_1,undefined4 *param_2);
int tsw_bsafe_set_key_from_map(undefined4 param_1,int param_2,int *param_3,undefined4 param_4);
uint tsw_bsafe_rsa_alg_data(int param_1,int *param_2);
void tsw_bsafe_force_reify(int param_1);
int tsw_bsafe_create_asym_key(int param_1,int *param_2);
undefined4 tsw_bsafe_destroy_asym_key(undefined4 *param_1);
undefined4 tsw_bsafe_create_random(undefined4 param_1,uint **param_2,undefined4 *param_3);
byte tsw_bsafe_seed_random(int param_1,undefined4 *param_2);
byte tsw_bsafe_generate_random(int param_1,undefined4 *param_2);
undefined4 tsw_bsafe_destroy_random(int **param_1);
undefined4 tsw_bsafe_get_ctx_random(undefined4 param_1,uint **param_2);
undefined4 tsw_bsafe_destroy_ctx_random(int **param_1);
uint ** DSNewContext(void);
void DSFreeContext(int **param_1);
void DSProcessData(int param_1,undefined4 param_2,undefined4 param_3);
uint ** DSPrepareCommon(int **param_1,uint param_2,int param_3,int param_4);
void DSVerifyPrepare(int **param_1,uint param_2);
int DSVerify(int *param_1,char *param_2,int param_3);
void A_MD5Init(undefined4 *param_1);
void A_MD5Update(int *param_1,undefined4 *param_2,uint param_3);
void A_MD5Final(int *param_1,undefined *param_2);
void MD5Transform(int *param_1,undefined *param_2);
void MD5Encode(undefined *param_1,undefined4 *param_2,int param_3);
void Decode(undefined4 *param_1,undefined *param_2,int param_3);
void A_RC4Init(undefined4 *param_1,byte **param_2);
undefined4 A_RC4Update(int *param_1,byte *param_2,uint *param_3,uint param_4,byte *param_5,uint param_6);
undefined4 A_RC4Final(int *param_1);
undefined4 RC4Init(undefined4 *param_1,byte **param_2);
void RC4Update(int *param_1,byte *param_2,uint *param_3,uint param_4,byte *param_5,uint param_6);
void RC4Final(int *param_1,undefined4 param_2,undefined4 *param_3);
undefined4 MD5Init(undefined4 *param_1);
undefined4 MD5Update(int *param_1,undefined4 *param_2,uint param_3);
undefined4 MD5Final(int *param_1,undefined *param_2,undefined4 *param_3,uint param_4);
undefined4 B_CreateAlgorithmObject(uint **param_1);
void B_DestroyAlgorithmObject(int **param_1);
int B_SetAlgorithmInfo(int param_1,undefined *param_2);
int B_GetAlgorithmInfo(int *param_1,int *param_2,undefined *param_3);
undefined4 AlgorithmWrapCheck(int param_1);
uint RandomAlgorithmCheck(int param_1);
undefined4 B_CreateKeyObject(uint **param_1);
void B_DestroyKeyObject(int **param_1);
int B_SetKeyInfo(int param_1,undefined *param_2,undefined4 param_3);
int B_GetKeyInfo(int *param_1,int *param_2,undefined *param_3);
undefined4 KeyWrapCheck(int param_1);
void KITItemAddInfo(int *param_1,undefined4 *param_2);
void B_EncryptInit(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void B_EncryptUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,int param_7,undefined4 param_8);
void B_EncryptFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,int param_5,undefined4 param_6);
void B_DecryptInit(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void B_DecryptUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,int param_7,undefined4 param_8);
void B_DecryptFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,int param_5,undefined4 param_6);
undefined4 MD2Init(uint *param_1);
undefined4 MD2Update(undefined4 *param_1,undefined4 *param_2,uint param_3);
undefined4 MD2Final(uint *param_1,undefined4 *param_2,undefined4 *param_3,uint param_4);
undefined4 SHAInit(undefined4 *param_1);
undefined4 SHAUpdate(int param_1,undefined4 *param_2,uint param_3);
undefined4 SHAFinal(undefined4 *param_1,undefined *param_2,undefined4 *param_3,uint param_4);
void B_DigestInit(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void B_DigestUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void B_DigestFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
undefined4 RSAQuery(undefined4 *param_1,char **param_2);
void RSAInit(int *param_1,int *param_2);
void RSAUpdate(uint *param_1,undefined *param_2,int *param_3,uint param_4,undefined4 *param_5,uint param_6,undefined **param_7);
void RSAFinal(int param_1,undefined4 param_2,undefined4 *param_3);
void KIT_RSAPublicBERAddInfo(int *param_1,byte **param_2);
undefined4 * KIT_RSAPublicBERMakeInfo(uint **param_1,int *param_2);
void AIT_PKCS_RSAPublicNewHandler(void);
void KIT_DSAPublicBERAddInfo(int *param_1,byte **param_2);
undefined4 * KIT_DSAPublicBERMakeInfo(uint **param_1,int *param_2);
void AIT_DSANewHandler(void);
void B_SignInit(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void B_SignUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void B_SignFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,int param_5,undefined4 param_6);
void B_VerifyInit(int param_1,int param_2,undefined4 param_3,undefined4 param_4);
void B_VerifyUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void B_VerifyFinal(int param_1,undefined4 param_2,undefined4 param_3,int param_4,undefined4 param_5);
void B_EncodeDigestInfo(undefined4 param_1,undefined4 *param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
void B_DecodeDigestInfo(undefined4 param_1,undefined4 param_2,byte *param_3,byte *param_4);
void KIT_RSAPublicAddInfo(int *param_1,int param_2);
int KIT_RSAPublicMakeInfo(uint **param_1,int *param_2);
int BERDecode(byte **param_1,uint *param_2,int param_3,byte *param_4,byte *param_5);
undefined4 BERDecodeAny(byte **param_1,uint param_2,byte **param_3);
undefined4 BEREncodeAnyAlloc(byte **param_1,undefined4 *param_2,uint param_3,byte param_4);
void AddBERElement(int *param_1,uint *param_2,uint param_3,int param_4,int param_5);
undefined4 AddBERElementPointer(int param_1,undefined4 param_2,uint param_3,int param_4,int param_5);
uint BERConstrainUINT2(int param_1,short *param_2);
undefined4 BERGetContents(int param_1,undefined4 *param_2);
int BERGetNonNegativeInteger(int param_1,uint **param_2);
undefined4 BERGetCanonicalInteger(int param_1,byte **param_2);
int BERGetUINT2(int param_1,undefined2 *param_2);
int BERGetUINT4(int param_1,int *param_2);
void BERSetBitString(int *param_1,uint param_2,int param_3,uint **param_4);
void BERSetContents(int *param_1,int param_2,int param_3,uint **param_4);
void BERSetNonNegativeInteger(int *param_1,uint param_2,int param_3,undefined4 *param_4);
void BERSetUINT2(int *param_1,uint param_2,int param_3,undefined2 *param_4);
void BERSetUINT4(int *param_1,uint param_2,int param_3,undefined4 *param_4);
void GetElementEntryCount(int *param_1,int param_2);
uint GetElementLen(uint *param_1,int *param_2,int **param_3);
void ConstructElement(int param_1,byte **param_2,int param_3,int *param_4,int param_5,int param_6);
undefined4 FindPositionInSet(byte **param_1,byte *param_2,byte *param_3,int param_4,byte *param_5);
void B_BERObjectConstructor(uint *param_1,uint param_2);
void B_BERObjectDestructor(int *param_1);
int GetIndefiniteElementLen(byte **param_1,byte *param_2,byte *param_3);
int DecodeElement(byte **param_1,uint *param_2,int param_3,byte *param_4,byte *param_5,undefined4 *param_6);
void EncodeElement(int *param_1,uint *param_2,int param_3);
void BeginConstructed(int param_1,int param_2,uint *param_3);
undefined4 FinishConstructedEncoding(int param_1);
uint EncodeFinishAndWrite(int *param_1);
int DecodePartialElement(uint *param_1,int *param_2,int param_3,int param_4,uint param_5,undefined4 *param_6,uint param_7,int *param_8);
void BERRecodeAlloc(uint *param_1,uint *param_2,int param_3,undefined4 *param_4,byte *param_5);
void BERGetSubTemplate(int *param_1,int param_2,int param_3);
int BERGetUTCTime(int param_1,int *param_2);
void BERSetEncoding(int *param_1,undefined4 param_2,int param_3,uint **param_4);
void BERSetUTCTime(int *param_1,int param_2,int param_3,uint *param_4);
void CheckElementDER(int *param_1,int *param_2,byte **param_3,uint *param_4,int param_5,byte *param_6,byte *param_7);
undefined4 TimeToUTCTime(char *param_1,undefined4 *param_2,uint param_3);
undefined4 UTCTimeToTime(int *param_1,byte *param_2,int param_3);
undefined4 B_KeySetInfo(int param_1,undefined **param_2,undefined4 param_3);
int B_KeyGetInfo(int *param_1,int *param_2,int param_3);
void B_KeyAddItemInfo(int *param_1,uint param_2,uint param_3);
int B_IntegerBits(char *param_1,uint param_2);
undefined4 MD5RandomInit(undefined4 *param_1);
undefined4 MD5RandomUpdate(int *param_1,undefined4 param_2,undefined4 param_3);
undefined4 MD5RandomGenerateBytes(int *param_1,undefined4 *param_2,uint param_3);
uint B_RandomInit(int param_1,undefined4 param_2,undefined4 param_3);
uint B_RandomUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint B_GenerateRandomBytes(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
undefined4 RSA_CRTQuery_2X(undefined4 *param_1,char **param_2);
void RSA_CRTInit_2X(undefined4 *param_1,int *param_2);
void RSA_CRTUpdate_2X(int *param_1,undefined *param_2,int *param_3,uint param_4,undefined4 *param_5,uint param_6,undefined **param_7);
void RSA_CRTFinal_2X(int param_1,undefined4 param_2,undefined4 *param_3);
void AIT_PKCS_RSAPrivateNewHandler(void);
void KIT_PKCS_RSAPrivateBERAddInfo(int *param_1,byte **param_2);
undefined4 * KIT_PKCS_RSAPrivateBERMakeInfo(uint **param_1,int *param_2);
void B_AlgorithmConstructor(uint *param_1);
void B_AlgorithmDestructor(int *param_1);
uint B_AlgorithmCheckType(int param_1,int param_2);
uint B_AlgorithmCheckTypeAndInitFlag(int param_1,int param_2);
int B_AlgorithmSetInfo(int param_1,int *param_2);
int B_AlgorithmGetInfo(int *param_1,int *param_2,int *param_3);
void B_InfoCacheConstructor(uint *param_1);
int B_InfoCacheAddInfo(int *param_1,undefined4 param_2,undefined4 param_3);
undefined4 B_InfoCacheFindInfo(int param_1,int *param_2,int param_3);
void B_InfoCacheReset(int *param_1);
void B_MemoryPoolConstructor(uint *param_1);
void B_MemoryPoolDestructor(int *param_1);
void B_MemoryPoolReset(int *param_1);
int B_MemoryPoolAlloc(int *param_1,uint **param_2,uint param_3);
int B_MemoryPoolAllocAndCopy(int *param_1,uint **param_2,undefined4 *param_3,uint param_4);
int B_MemoryPoolAdoptData(int *param_1,uint **param_2,uint param_3);
undefined4 B_MemoryPoolAdoptHelper(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int B_MemoryPoolRealloc(int *param_1,uint **param_2,uint *param_3);
void B_MemoryPoolFree(int *param_1,uint **param_2);
int * B_MemoryPoolFindAllocedObject(int *param_1,int param_2);
void AHEncryptDecryptConstructor(undefined **param_1);
uint B_AlgorithmEncryptInit(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint B_AlgorithmDecryptInit(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void B_AlgorithmEncryptUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8);
void B_AlgorithmDecryptUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8);
void B_AlgorithmEncryptFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
void B_AlgorithmDecryptFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
void TypedAHEncryptDecryptDestructor(int param_1);
void A_MD2Init(uint *param_1);
void A_MD2Update(undefined4 *param_1,undefined4 *param_2,uint param_3);
void A_MD2Final(uint *param_1,undefined4 *param_2);
void MD2Transform(undefined4 *param_1,byte *param_2,undefined4 *param_3);
void A_SHAInit(undefined4 *param_1);
void A_SHAUpdate(int param_1,undefined4 *param_2,uint param_3);
void A_SHAFinal(undefined4 *param_1,undefined *param_2);
void SHATransform(uint *param_1,byte *param_2);
void SHAExpand(int param_1);
void AITChooseDigestNullNewHandler(undefined *param_1);
void AHDigestConstructor(undefined **param_1);
uint B_AlgorithmDigestInit(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void B_AlgorithmDigestUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void B_AlgorithmDigestFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
void TypedAHDigestDestructor(int param_1);
int A_IntegerBits(char *param_1,uint param_2);
undefined4 ALG_RSAInit(int *param_1,int *param_2);
undefined4 ALG_RSAUpdate(uint *param_1,undefined *param_2,int *param_3,uint param_4,undefined4 *param_5,uint param_6,undefined **param_7);
undefined4 ALG_RSAFinal(int param_1);
undefined4 ALG_RSA(uint *param_1,undefined *param_2,uint *param_3,uint param_4,int param_5,undefined **param_6);
void ALG_RSAContextDestroy(uint *param_1);
int DecodePublicKeyInfo(undefined4 param_1,undefined4 param_2,undefined4 *param_3,byte **param_4);
void DecodePrivateKeyInfo(undefined4 param_1,undefined4 param_2,undefined4 param_3,byte **param_4);
void EncodePublicKeyInfoAlloc(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 *param_4);
void EncodePrivateKeyInfoAlloc(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
bool B_ItemEqual(byte **param_1,byte **param_2);
void B_BERAllocStreamConstructor(undefined4 *param_1,undefined4 *param_2);
undefined4 * BEREncodeAlloc(undefined4 *param_1,uint *param_2,int param_3);
undefined4 B_BERAllocStreamWrite(int param_1,undefined4 *param_2,uint param_3);
void AITNullAddInfo(undefined4 param_1,int *param_2);
undefined ** AH_RSAEncrypPublicConstructor(undefined **param_1);
uint EncodeBlock2(int param_1,int param_2,undefined4 param_3);
uint DecodeDSAParameters(byte **param_1,char **param_2);
undefined4 * EncodeDSAParametersAlloc(char **param_1,undefined4 *param_2);
void KIT_DSAPublicAddInfo(int *param_1,int param_2);
undefined ** AHChooseDSAConstructor(undefined **param_1);
void AHChooseDSADestructor(int param_1);
void AHChooseDSASignInit(int param_1,int *param_2,int **param_3,undefined4 param_4);
void AHChooseDSAVerifyInit(int param_1,int *param_2,int **param_3,undefined4 param_4);
undefined4 AHChooseDSAUpdate(int param_1,undefined4 *param_2,uint param_3);
uint AHChooseDSASignFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,int param_5,undefined4 param_6);
uint AHChooseDSAVerifyFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
undefined4 AHChooseDSAGetBlockLen(int param_1);
uint * InitDSAAlga(int param_1,undefined4 param_2,undefined4 param_3,int param_4,undefined4 param_5);
undefined4 AHChooseDSAInitHelper(int param_1,int param_2);
void AHSignVerifyConstructor(undefined **param_1);
uint B_AlgorithmSignInit(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint B_AlgorithmVerifyInit(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void B_AlgorithmSignUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void B_AlgorithmVerifyUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void B_AlgorithmSignFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,undefined4 param_6);
void B_AlgorithmVerifyFinal(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
void TypedAHSignVerifyDestructor(int param_1);
void B_BERFixedStreamConstructor(undefined4 *param_1,undefined4 param_2,undefined4 *param_3,undefined4 param_4);
undefined4 BEREncode(undefined4 param_1,undefined4 *param_2,undefined4 param_3,uint *param_4,int param_5);
undefined4 B_BERFixedStreamWrite(int param_1,undefined4 *param_2,uint param_3);
int AllocAndCopyIntegerItems(int param_1,int param_2,int param_3,int *param_4,uint param_5,int *param_6);
void CacheFullPrivateKey(int *param_1,undefined4 *param_2,undefined4 *param_3,undefined4 *param_4,undefined4 *param_5,undefined4 *param_6,undefined4 *param_7);
int GetFullPrivateKeyInfo(undefined4 *param_1,undefined4 *param_2,undefined4 *param_3,undefined4 *param_4,undefined4 *param_5,undefined4 *param_6,int *param_7);
byte BERDecodeType(byte **param_1,uint *param_2,int *param_3,byte **param_4,byte *param_5,byte *param_6);
undefined4 DEREncodeType(byte *param_1,uint *param_2,uint param_3,byte param_4,undefined4 *param_5,undefined4 *param_6,uint param_7);
void B_BERFlushStreamConstructor(undefined4 *param_1,undefined4 param_2);
void B_BERFlushStreamDestructor(int param_1);
uint BEREncodeToStream(uint param_1,uint *param_2,int param_3);
int BERDecodeFromStream(uint *param_1,int param_2,undefined4 param_3);
int B_BERFlushStreamFlush(int param_1,int *param_2,undefined4 *param_3);
int B_BERFlushStreamFlushExtended(int param_1,undefined4 *param_2,undefined4 *param_3);
void A_MD5RandomInit(undefined4 *param_1);
void A_MD5RandomUpdate(int *param_1,undefined4 param_2,undefined4 param_3);
void A_MD5RandomGenerateBytes(int *param_1,undefined4 *param_2,uint param_3);
void A_MD5RandomDigestUpdate(int param_1,undefined4 *param_2,uint param_3);
void A_MD5RandomDigestFinal(int param_1,undefined *param_2);
void AITChooseRandomNullNewHandler(undefined *param_1);
void AHRandomConstructor(undefined **param_1);
uint B_AlgorithmRandomInit(int param_1,undefined4 param_2,undefined4 param_3);
uint B_AlgorithmRandomUpdate(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
uint B_AlgorithmGenerateRandomBytes(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void TypedAHRandomDestructor(int param_1);
undefined4 ALG_RSA_CRTInit(undefined4 *param_1,int *param_2,undefined4 param_3);
undefined4 ALG_RSA_CRTUpdate(int *param_1,undefined *param_2,int *param_3,uint param_4,undefined4 *param_5,uint param_6,undefined **param_7);
undefined4 ALG_RSA_CRTFinal(int param_1);
void ALG_RSA_CRTContextDestroy(int param_1);
undefined4 ALG_RSA_CRT(int *param_1,undefined *param_2,uint *param_3,uint param_4,int param_5,undefined **param_6);
int BlindingMultiply(int param_1,int *param_2,int *param_3,undefined **param_4);
undefined ** AH_RSAEncrypPrivateConstructor(undefined **param_1);
undefined4 EncodeBlock1(int param_1);
void KIT_PKCS_RSAPrivateAddInfo(int *param_1,int param_2);
int KIT_PKCS_RSAPrivateMakeInfo(uint **param_1,int *param_2);
undefined4 AIT_CBC_IV8AddInfo(undefined4 param_1,int param_2,undefined4 *param_3);
undefined ** AITChooseEncryptNewHandler(undefined *param_1,int param_2);
void A_SHAInitCommon(undefined4 *param_1);
void A_SHAUpdateCommon(int param_1,undefined4 *param_2,uint param_3,undefined *param_4);
void A_SHAFinalCommon(undefined4 *param_1,undefined *param_2,undefined *param_3);
void UINT4ToBigEndian(undefined *param_1,undefined4 *param_2,uint param_3);
void UINT4FromBigEndian(uint *param_1,uint param_2,byte *param_3);
undefined ** AHChooseDigestConstructor2(undefined **param_1,undefined *param_2,undefined *param_3);
void AHChooseDigestDestructor(int param_1);
void AHChooseDigestInit(int param_1,int *param_2,int **param_3,undefined4 param_4);
undefined4 AHChooseDigestUpdate(int param_1);
undefined4 AHChooseDigestFinal(int param_1,undefined param_2,undefined param_3,undefined param_4,undefined4 param_5);
uint * InitDigestAlga(int param_1,undefined4 param_2,undefined4 param_3,int param_4,undefined4 param_5);
void CMP_Constructor(undefined4 *param_1);
void CMP_Destructor(int *param_1);
undefined4 CMP_realloc(int param_1,int *param_2);
undefined4 CMP_reallocNoCopy(int param_1,int *param_2);
void CMP_free(int *param_1);
int CMP_OctetStringToCMPInt(int param_1,uint param_2,int *param_3);
undefined4 CMP_CMPIntToFixedLenOctetStr(int param_1,uint param_2,uint param_3,uint *param_4,undefined *param_5);
undefined4 CMP_CMPIntToOctetString(int param_1,uint param_2,uint *param_3,undefined *param_4);
int CMP_CMPWordToCMPInt(undefined4 param_1,int *param_2);
int CMP_PowerOfTwo(uint param_1,int *param_2);
int CMP_BitLengthOfCMPInt(int param_1);
undefined4 CMP_ClearBit(uint param_1,int param_2);
int CMP_SetBit(uint param_1,int *param_2);
undefined4 ALG_ErrorCode(undefined4 param_1);
int CMP_ModExp(int param_1,int param_2,int *param_3,int *param_4,undefined **param_5);
uint CMP_GetBitsFromWord(uint param_1,int param_2,uint param_3);
uint CMP_GetBitsFromCMPInt(int param_1,uint *param_2,uint param_3);
int CMP_GetMSBitFromWord(uint param_1);
undefined4 CMP_ComputeLogOfTableSize(int param_1);
int CMP_InitExponentTable(uint param_1,int *param_2,int param_3,int param_4,int **param_5,int **param_6,undefined **param_7);
void CMP_DestructExponentTable(uint param_1,uint **param_2,uint **param_3);
int CMP_GenerateNewExponent(int param_1,int param_2,uint param_3,int param_4,int param_5);
int CMP_ModExpCRT(int *param_1,int *param_2,int *param_3,int param_4,int param_5,int param_6,int *param_7,undefined **param_8);
void AH_RSAEncryptionConstructor1(undefined **param_1,undefined *param_2);
void AH_RSAEncryptionDestructor(int param_1);
void AH_RSAEncryptionEncryptInit(int param_1,int *param_2,int **param_3,undefined4 param_4);
void AH_RSAEncryptionDecryptInit(int param_1,int *param_2,int **param_3,undefined4 param_4);
undefined4 AH_RSAEncryptionUpdate(int param_1,undefined4 param_2,undefined4 *param_3,undefined4 param_4,undefined4 *param_5,uint param_6);
int AH_RSAEncryptionEncryptFinal(int param_1,undefined param_2,undefined param_3,undefined param_4,undefined4 param_5,undefined4 param_6);
int AH_RSAEncryptionDecryptFinal(int param_1,undefined4 *param_2,uint *param_3,uint param_4,undefined param_5,undefined4 param_6);
int AH_RSAEncryptionInitHelper(int param_1,int param_2);
void ResizeContextConstructor(uint *param_1);
void ResizeContextDestructor(uint **param_1);
uint * ResizeContextMakeNewContext(uint **param_1,uint *param_2);
int AlgaChoiceChoose(int *param_1,int param_2,int *param_3,undefined4 param_4,int **param_5,undefined4 param_6);
undefined4 ConvertAlgaeError(undefined4 param_1);
undefined4 FindPublicExponentFromCRT(int param_1,int *param_2);
undefined4 FindPrivateExponentFromCRT(int param_1,int *param_2);
void A_DigestRandomInit(undefined4 *param_1,uint param_2,int param_3);
void A_DigestRandomUpdate(int *param_1,undefined4 param_2,undefined4 param_3);
void A_DigestRandomGenerateBytes(int *param_1,undefined4 *param_2,uint param_3);
undefined ** AHChooseRandomConstructor2(undefined **param_1,undefined *param_2,undefined *param_3);
void AHChooseRandomDestructor(int param_1);
void AHChooseRandomInit(int param_1,int **param_2,undefined4 param_3);
undefined4 AHChooseRandomUpdate(int param_1);
undefined4 AHChooseRandomGenerateBytes(int param_1);
uint * InitRandomAlga(int param_1,undefined4 param_2,undefined4 param_3,int param_4,undefined4 param_5);
int CMP_Move(int param_1,int *param_2);
undefined4 CMP_Compare(int param_1,int param_2);
int CMP_Add(int param_1,int param_2,int *param_3);
int CMP_AddCMPWord(uint param_1,int *param_2);
int CMP_Subtract(int param_1,int param_2,int *param_3);
undefined4 CMP_SubtractCMPWord(uint param_1,int param_2);
int CMP_ModAdd(int param_1,int param_2,int *param_3,int *param_4);
int CMP_ModSubtract(int param_1,int param_2,int *param_3,int *param_4);
int CMP_ModMultiply(int param_1,int param_2,int *param_3,int *param_4);
int CMP_ModInvert(int *param_1,int *param_2,int *param_3);
undefined ** AHChooseEncryptConstructor2(undefined **param_1,undefined *param_2,undefined *param_3);
void AHChooseEncryptDestructor(int param_1);
undefined4 AHChooseEncryptGetBlockLen(int param_1);
void AHChooseEncryptEncryptInit(int param_1,int *param_2,int **param_3,undefined4 param_4);
void AHChooseEncryptDecryptInit(int param_1,int *param_2,int **param_3,undefined4 param_4);
undefined4 AHChooseEncryptEncryptUpdate(int param_1,undefined param_2,undefined param_3,undefined param_4,undefined4 param_5,undefined4 param_6,undefined param_7,undefined4 param_8);
undefined4 AHChooseEncryptDecryptUpdate(int param_1,undefined param_2,undefined param_3,undefined param_4,undefined4 param_5,undefined4 param_6,undefined param_7,undefined4 param_8);
undefined4 AHChooseEncryptEncryptFinal(int param_1,undefined param_2,undefined param_3,undefined param_4,undefined param_5,undefined4 param_6);
undefined4 AHChooseEncryptDecryptFinal(int param_1,undefined param_2,undefined param_3,undefined param_4,undefined param_5,undefined4 param_6);
uint * InitEncryptDecryptAlga(int param_1,undefined4 param_2,undefined4 param_3,int param_4,undefined4 param_5);
int CMP_AddInPlace(int param_1,int *param_2);
undefined4 CMP_SubtractInPlace(int param_1,int param_2);
int CMP_ShiftLeftByCMPWords(int param_1,int *param_2);
int CMP_ShiftLeftByBits(uint param_1,int *param_2);
undefined4 CMP_ShiftRightByCMPWords(int param_1,int param_2);
int CMP_ShiftRightByBits(uint param_1,int param_2);
undefined4 CMP_RecomputeLength(int param_1,int param_2);
undefined4 CMP_GetOffsetOfMSB(int param_1,int *param_2);
bool CheckSurrender(undefined **param_1);
int CMP_ConvertToMont(int param_1,int *param_2,int *param_3);
int CMP_ConvertFromMont(int param_1,int param_2,int param_3,int *param_4);
undefined4 CMP_ComputeMontCoeff(int param_1,int *param_2);
int CMP_MontSquare(int param_1,int param_2,int param_3,int *param_4);
int CMP_MontProduct(int param_1,int param_2,int param_3,int param_4,int *param_5);
int CMP_Multiply(int param_1,int param_2,int *param_3);
int CMP_Divide(int *param_1,int *param_2,int *param_3,int *param_4);
int CMP_ModularReduce(int *param_1,int *param_2,int *param_3);
int CMP_AppendWord(undefined4 param_1,int *param_2);
int CMP_EstimateMSWQuotient(int param_1,int param_2,int *param_3,int *param_4);
void CMP_DivideTwoWordsByWord(uint param_1,uint param_2,uint param_3,int *param_4,int *param_5);
void CMP_DivOneAndHalfWordsByWord(uint param_1,uint param_2,uint param_3,uint *param_4,int *param_5);
int CMP_CMPWordModularReduce(int param_1,uint param_2,uint *param_3);
int CMP_FullCMPWordModReduce(int param_1,uint param_2,undefined4 *param_3);
int CMP_ComputeGCD(int param_1,int param_2,int *param_3);
int CMP_ComputeExtendedGCD(int *param_1,int *param_2,int *param_3,int *param_4,int *param_5);
int CMP_UpdateCoefficients(int *param_1,int *param_2,int param_3,int *param_4,int *param_5,int *param_6,int *param_7);
void CMP_AbsDifference(int param_1,int param_2,undefined4 *param_3,int *param_4);
void CMP_VectorMultiply(uint param_1,int param_2,int param_3,int param_4,int param_5,int param_6);
void CMP_AddInTrace(int param_1,int param_2);
void T_memset(uint *param_1,byte param_2,uint param_3);
void T_memcpy(undefined4 *param_1,undefined4 *param_2,uint param_3);
void T_memmove(undefined4 *param_1,undefined4 *param_2,uint param_3);
undefined4 T_memcmp(byte *param_1,byte *param_2,int param_3);
void T_malloc(int param_1);
void T_realloc(int param_1,int param_2);
void T_free(int param_1);
void T_strcpy(char *param_1,char *param_2);
void T_strcmp(char *param_1,char *param_2);
void T_strlen(char *param_1);
void T_time(undefined4 *param_1);

